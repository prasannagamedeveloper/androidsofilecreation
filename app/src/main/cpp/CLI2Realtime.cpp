//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: CLI2Realtime.cpp
//
// MATLAB Coder version            : 23.2
// C/C++ source code generated on  : 18-Feb-2024 18:29:23
//

// Include Files
#include "CLI2Realtime.h"
#include "rt_nonfinite.h"
#include "coder_array.h"
//#include "omp.h"
#include <algorithm>
#include <cmath>
#include <cstring>

// Type Definitions
namespace CLI2
{
  namespace coder
  {
    namespace internal
    {
      namespace fft
      {
        class FFTImplementationCallback
        {
         public:
          static void doHalfLengthBluestein(const double x[1250], creal_T y[1250],
            const creal_T wwc[1249], const double costabinv[2049], const double
            sintabinv[2049]);
        };
      }
    }
  }
}



// Variable Definitions
namespace CLI2
{
  //omp_nest_lock_t ClI2Baseline_nestLockGlobal;
  static const double dv[9]{ 0.62968376775834067, -0.95872635672727657,
    3.06612663931755, -3.0150844358154938, 4.8861039093177316,
    -3.0150844358154929, 3.06612663931755, -0.95872635672727657,
    0.62968376775834067 };

  static const double dv1[9]{ 1.0, -1.3479808159967095, 3.7671178427476306,
    -3.302956726777214, 4.7343134099728168, -2.6237723403955275,
    2.3797914279546215, -0.67291170191609329, 0.3965020427944505 };

  static const double dv2[9]{ 0.0055117821964552616, 0.0, -0.022047128785821046,
    0.0, 0.033070693178731569, 0.0, -0.022047128785821046, 0.0,
    0.0055117821964552616 };

  static const double dv3[9]{ 1.0, -6.05885966806427, 16.275002274245256,
    -25.394807115136413, 25.231567139996955, -16.361999638737803,
    6.7618116747295876, -1.6274382519019339, 0.17473914968663612 };

  static const double dv4[2049]{ 1.0, 0.99999882345170188, 0.99999529380957619,
    0.9999894110819284, 0.99998117528260111, 0.99997058643097414,
    0.9999576445519639, 0.99994234967602391, 0.9999247018391445,
    0.9999047010828529, 0.99988234745421256, 0.99985764100582386,
    0.9998305817958234, 0.99980116988788426, 0.99976940535121528,
    0.99973528826056168, 0.99969881869620425, 0.99965999674395922,
    0.99961882249517864, 0.99957529604674922, 0.99952941750109314,
    0.999481186966167, 0.99943060455546173, 0.99937767038800285,
    0.99932238458834954, 0.99926474728659442, 0.99920475861836389,
    0.99914241872481691, 0.99907772775264536, 0.99901068585407338,
    0.99894129318685687, 0.99886954991428356, 0.99879545620517241,
    0.99871901223387294, 0.99864021818026527, 0.99855907422975931,
    0.99847558057329477, 0.99838973740734016, 0.99830154493389289,
    0.99821100336047819, 0.99811811290014918, 0.99802287377148624,
    0.997925286198596, 0.99782535041111164, 0.99772306664419164,
    0.99761843513851955, 0.99751145614030345, 0.9974021299012753,
    0.99729045667869021, 0.99717643673532619, 0.997060070339483,
    0.99694135776498216, 0.99682029929116567, 0.99669689520289606,
    0.99657114579055484, 0.99644305135004263, 0.996312612182778,
    0.996179828595697, 0.996044700901252, 0.99590722941741172,
    0.99576741446765982, 0.99562525638099431, 0.99548075549192694,
    0.99533391214048228, 0.99518472667219693, 0.99503319943811863,
    0.99487933079480562, 0.9947231211043257, 0.99456457073425542,
    0.9944036800576791, 0.9942404494531879, 0.99407487930487937,
    0.99390697000235606, 0.9937367219407246, 0.9935641355205953,
    0.99338921114808065, 0.9932119492347945, 0.99303235019785141,
    0.9928504144598651, 0.992666142448948, 0.99247953459871, 0.99229059134825737,
    0.9920993131421918, 0.99190570043060933, 0.99170975366909953,
    0.9915114733187439, 0.99131085984611544, 0.99110791372327689,
    0.99090263542778, 0.99069502544266463, 0.99048508425645709,
    0.99027281236316911, 0.99005821026229712, 0.98984127845882053,
    0.98962201746320089, 0.98940042779138038, 0.989176509964781,
    0.988950264510303, 0.98872169196032378, 0.98849079285269659,
    0.98825756773074946, 0.98802201714328353, 0.98778414164457218,
    0.98754394179435923, 0.98730141815785843, 0.987056571305751,
    0.98680940181418553, 0.98655991026477541, 0.98630809724459867,
    0.98605396334619544, 0.98579750916756748, 0.98553873531217606,
    0.98527764238894122, 0.98501423101223984, 0.98474850180190421,
    0.98448045538322093, 0.984210092386929, 0.98393741344921892,
    0.98366241921173025, 0.98338511032155118, 0.98310548743121629,
    0.98282355119870524, 0.98253930228744124, 0.98225274136628937,
    0.98196386910955524, 0.98167268619698311, 0.98137919331375456,
    0.98108339115048671, 0.98078528040323043, 0.98048486177346938,
    0.98018213596811743, 0.97987710369951764, 0.97956976568544052,
    0.979260122649082, 0.9789481753190622, 0.97863392442942321,
    0.97831737071962765, 0.97799851493455714, 0.97767735782450993,
    0.97735390014520007, 0.97702814265775439, 0.97670008612871184,
    0.97636973133002114, 0.976037079039039, 0.97570213003852857,
    0.975364885116657, 0.97502534506699412, 0.97468351068851067,
    0.97433938278557586, 0.97399296216795583, 0.973644249650812,
    0.97329324605469825, 0.97293995220556018, 0.97258436893473221,
    0.97222649707893627, 0.9718663374802794, 0.97150389098625178,
    0.97113915844972509, 0.97077214072895035, 0.9704028386875555,
    0.970031253194544, 0.96965738512429245, 0.96928123535654853,
    0.96890280477642887, 0.96852209427441727, 0.96813910474636244,
    0.96775383709347551, 0.96736629222232851, 0.96697647104485207,
    0.96658437447833312, 0.9661900034454125, 0.96579335887408368,
    0.9653944416976894, 0.96499325285492032, 0.96458979328981276,
    0.96418406395174583, 0.96377606579543984, 0.963365799780954,
    0.96295326687368388, 0.96253846804435916, 0.96212140426904158,
    0.96170207652912254, 0.96128048581132064, 0.96085663310767966,
    0.96043051941556579, 0.960002145737666, 0.95957151308198452,
    0.95913862246184189, 0.9587034748958716, 0.95826607140801767,
    0.95782641302753291, 0.95738450078897586, 0.95694033573220882,
    0.9564939189023951, 0.95604525134999641, 0.95559433413077111,
    0.95514116830577078, 0.95468575494133834, 0.95422809510910567,
    0.95376818988599033, 0.95330604035419386, 0.95284164760119872,
    0.95237501271976588, 0.95190613680793235, 0.95143502096900834,
    0.95096166631157508, 0.9504860739494817, 0.950008245001843,
    0.94952818059303667, 0.94904588185270056, 0.94856134991573027,
    0.94807458592227623, 0.94758559101774109, 0.94709436635277722,
    0.94660091308328353, 0.94610523237040345, 0.94560732538052128,
    0.94510719328526061, 0.94460483726148026, 0.94410025849127266,
    0.94359345816196039, 0.94308443746609349, 0.94257319760144687,
    0.94205973977101731, 0.94154406518302081, 0.94102617505088926,
    0.9405060705932683, 0.93998375303401394, 0.93945922360218992,
    0.9389324835320646, 0.93840353406310806, 0.93787237643998989,
    0.937339011912575, 0.93680344173592156, 0.93626566717027826,
    0.93572568948108037, 0.93518350993894761, 0.93463912981968078,
    0.93409255040425887, 0.93354377297883617, 0.932992798834739,
    0.93243962926846236, 0.93188426558166815, 0.93132670908118043,
    0.93076696107898371, 0.93020502289221907, 0.92964089584318121,
    0.92907458125931586, 0.92850608047321559, 0.92793539482261789,
    0.92736252565040111, 0.92678747430458175, 0.92621024213831138,
    0.92563083050987272, 0.92504924078267758, 0.9244654743252626,
    0.92387953251128674, 0.92329141671952764, 0.92270112833387863,
    0.92210866874334518, 0.9215140393420419, 0.92091724152918952,
    0.92031827670911059, 0.91971714629122736, 0.91911385169005777,
    0.91850839432521225, 0.9179007756213905, 0.91729099700837791,
    0.9166790599210427, 0.91606496579933172, 0.91544871608826783,
    0.9148303122379462, 0.91420975570353069, 0.91358704794525081,
    0.91296219042839821, 0.91233518462332275, 0.91170603200542988,
    0.91107473405517636, 0.91044129225806725, 0.90980570810465222,
    0.90916798309052238, 0.90852811871630612, 0.90788611648766626,
    0.90724197791529582, 0.90659570451491533, 0.90594729780726846,
    0.90529675931811882, 0.90464409057824624, 0.90398929312344334,
    0.90333236849451182, 0.90267331823725883, 0.90201214390249318,
    0.901348847046022, 0.900683429228647, 0.90001589201616017,
    0.89934623697934157, 0.89867446569395382, 0.89800057974073988,
    0.89732458070541832, 0.89664647017868015, 0.89596624975618522,
    0.89528392103855758, 0.8945994856313827, 0.89391294514520325,
    0.89322430119551532, 0.89253355540276458, 0.89184070939234272,
    0.89114576479458318, 0.89044872324475788, 0.88974958638307278,
    0.88904835585466457, 0.88834503330959635, 0.88763962040285393,
    0.88693211879434219, 0.88622253014888064, 0.8855108561362,
    0.88479709843093779, 0.884081258712635, 0.88336333866573158,
    0.88264333997956279, 0.881921264348355, 0.88119711347122209,
    0.88047088905216075, 0.87974259280004741, 0.87901222642863353,
    0.87827979165654158, 0.87754529020726135, 0.87680872380914565,
    0.8760700941954066, 0.87532940310411089, 0.87458665227817611,
    0.87384184346536686, 0.87309497841829009, 0.87234605889439154,
    0.87159508665595109, 0.870842063470079, 0.87008699110871146,
    0.86932987134860684, 0.8685707059713409, 0.86780949676330332,
    0.86704624551569265, 0.866280954024513, 0.86551362409056909,
    0.86474425751946238, 0.8639728561215867, 0.86319942171212416,
    0.8624239561110405, 0.8616464611430813, 0.86086693863776731,
    0.86008539042939014, 0.85930181835700847, 0.85851622426444274,
    0.85772861000027212, 0.85693897741782876, 0.85614732837519447,
    0.855353664735196, 0.85455798836540053, 0.85376030113811141,
    0.85296060493036363, 0.85215890162391983, 0.8513551931052652,
    0.85054948126560348, 0.84974176800085255, 0.84893205521163961,
    0.84812034480329723, 0.84730663868585832, 0.84649093877405213,
    0.84567324698729907, 0.84485356524970712, 0.84403189549006641,
    0.84320823964184544, 0.84238259964318585, 0.84155497743689844,
    0.84072537497045807, 0.83989379419599952, 0.83906023707031274,
    0.83822470555483808, 0.83738720161566194, 0.836547727223512,
    0.8357062843537526, 0.83486287498638, 0.83401750110601813,
    0.83317016470191319, 0.83232086776792968, 0.83146961230254524,
    0.83061640030884631, 0.829761233794523, 0.82890411477186487,
    0.8280450452577558, 0.82718402727366913, 0.82632106284566353,
    0.82545615400437755, 0.82458930278502529, 0.82372051122739143,
    0.82284978137582643, 0.82197711527924155, 0.82110251499110465,
    0.82022598256943469, 0.819347520076797, 0.81846712958029866,
    0.81758481315158371, 0.81670057286682785, 0.81581441080673378,
    0.81492632905652662, 0.81403632970594841, 0.81314441484925359,
    0.81225058658520388, 0.81135484701706373, 0.81045719825259477,
    0.80955764240405126, 0.808656181588175, 0.80775281792619036,
    0.80684755354379933, 0.80594039057117628, 0.80503133114296366,
    0.8041203773982657, 0.80320753148064494, 0.80229279553811572,
    0.80137617172314024, 0.80045766219262282, 0.799537269107905,
    0.79861499463476093, 0.79769084094339116, 0.79676481020841883,
    0.79583690460888357, 0.794907126328237, 0.79397547755433717,
    0.79304196047944364, 0.79210657730021239, 0.7911693302176902,
    0.79023022143731, 0.78928925316888565, 0.78834642762660634,
    0.78740174702903143, 0.78645521359908577, 0.78550682956405393,
    0.78455659715557524, 0.78360451860963831, 0.78265059616657573,
    0.78169483207105939, 0.78073722857209449, 0.77977778792301455,
    0.778816512381476, 0.77785340420945315, 0.77688846567323244,
    0.77592169904340769, 0.77495310659487393, 0.7739826906068229,
    0.773010453362737, 0.77203639715038452, 0.77106052426181382,
    0.7700828369933479, 0.7691033376455797, 0.76812202852336542,
    0.7671389119358204, 0.76615399019631292, 0.765167265622459,
    0.76417874053611679, 0.76318841726338127, 0.7621962981345789,
    0.76120238548426178, 0.76020668165120242, 0.759209188978388,
    0.75820990981301528, 0.75720884650648457, 0.75620600141439454,
    0.75520137689653655, 0.75419497531688917, 0.75318679904361252,
    0.7521768504490427, 0.75116513190968637, 0.75015164580621507,
    0.74913639452345937, 0.7481193804504036, 0.74710060598018013,
    0.74608007351006378, 0.745057785441466, 0.74403374417992929,
    0.74300795213512172, 0.74198041172083107, 0.74095112535495922,
    0.7399200954595162, 0.73888732446061511, 0.737852814788466,
    0.73681656887736979, 0.73577858916571359, 0.7347388780959635,
    0.73369743811466037, 0.73265427167241282, 0.73160938122389263,
    0.73056276922782759, 0.729514438146997, 0.7284643904482252,
    0.72741262860237577, 0.726359155084346, 0.72530397237306077,
    0.724247082951467, 0.72318848930652746, 0.72212819392921535,
    0.72106619931450811, 0.72000250796138165, 0.71893712237280449,
    0.71787004505573171, 0.71680127852109954, 0.71573082528381859,
    0.71465868786276909, 0.71358486878079352, 0.71250937056469243,
    0.71143219574521643, 0.71035334685706242, 0.70927282643886569,
    0.7081906370331954, 0.70710678118654757, 0.70602126144933974,
    0.70493408037590488, 0.70384524052448494, 0.7027547444572253,
    0.70166259474016845, 0.70056879394324834, 0.69947334464028377,
    0.69837624940897292, 0.69727751083088652, 0.696177131491463,
    0.69507511398000088, 0.69397146088965389, 0.69286617481742463,
    0.69175925836415775, 0.6906507141345346, 0.68954054473706683,
    0.68842875278409044, 0.687315340891759, 0.68620031168003859,
    0.68508366777270036, 0.6839654117973154, 0.68284554638524808,
    0.68172407417164971, 0.680600997795453, 0.679476319899365,
    0.67835004312986147, 0.67722217013718033, 0.67609270357531592,
    0.674961646102012, 0.673829000378756, 0.67269476907077286,
    0.67155895484701833, 0.67042156038017309, 0.669282588346636,
    0.66814204142651845, 0.66699992230363747, 0.66585623366550972,
    0.66471097820334479, 0.66356415861203977, 0.66241577759017178,
    0.66126583783999227, 0.66011434206742048, 0.65896129298203732,
    0.65780669329707864, 0.65665054572942894, 0.65549285299961535,
    0.65433361783180044, 0.65317284295377676, 0.6520105310969595,
    0.650846684996381, 0.64968130739068319, 0.64851440102211244,
    0.64734596863651206, 0.64617601298331628, 0.64500453681554393,
    0.64383154288979139, 0.64265703396622686, 0.641481012808583,
    0.64030348218415167, 0.63912444486377573, 0.637943903621844,
    0.6367618612362842, 0.63557832048855611, 0.63439328416364549,
    0.63320675505005719, 0.63201873593980906, 0.63082922962842447,
    0.629638238914927, 0.6284457666018326, 0.62725181549514408,
    0.62605638840434352, 0.62485948814238634, 0.62366111752569453,
    0.62246127937415, 0.62125997651108755, 0.6200572117632891,
    0.61885298796097632, 0.61764730793780387, 0.61644017453085365,
    0.61523159058062682, 0.61402155893103849, 0.61281008242940971,
    0.61159716392646191, 0.61038280627630948, 0.60916701233645321,
    0.60794978496777363, 0.60673112703452448, 0.60551104140432555,
    0.604289530948156, 0.60306659854034816, 0.60184224705858, 0.600616479383869,
    0.59938929840056454, 0.59816070699634238, 0.59693070806219639,
    0.59569930449243336, 0.59446649918466443, 0.5932322950397998,
    0.591996694962041, 0.59075970185887416, 0.58952131864106394,
    0.58828154822264522, 0.587040393520918, 0.58579785745643886,
    0.58455394295301533, 0.58330865293769829, 0.58206199034077544,
    0.58081395809576453, 0.57956455913940563, 0.57831379641165559,
    0.57706167285567944, 0.57580819141784534, 0.57455335504771576,
    0.5732971666980422, 0.572039629324757, 0.57078074588696726,
    0.56952051934694714, 0.56825895267013149, 0.56699604882510868,
    0.56573181078361312, 0.5644662415205195, 0.56319934401383409,
    0.56193112124468936, 0.560661576197336, 0.55939071185913614,
    0.5581185312205561, 0.5568450372751601, 0.55557023301960218,
    0.55429412145362, 0.55301670558002747, 0.55173798840470734,
    0.55045797293660481, 0.54917666218771966, 0.54789405917310019,
    0.54661016691083486, 0.54532498842204646, 0.54403852673088382,
    0.54275078486451589, 0.54146176585312344, 0.54017147272989285,
    0.53887990853100842, 0.53758707629564539, 0.53629297906596318,
    0.53499761988709715, 0.533701001807153, 0.5324031278771979,
    0.531104001151255, 0.52980362468629461, 0.52850200154222848,
    0.52719913478190128, 0.52589502747108463, 0.524589682678469,
    0.52328310347565643, 0.52197529293715439, 0.52066625414036716,
    0.51935599016558964, 0.51804450409599934, 0.51673179901764987,
    0.51541787801946293, 0.51410274419322166, 0.512786400633563,
    0.5114688504379703, 0.51015009670676681, 0.508830142543107,
    0.50750899105297087, 0.50618664534515523, 0.50486310853126759,
    0.50353838372571758, 0.50221247404571079, 0.50088538261124071,
    0.49955711254508184, 0.49822766697278181, 0.49689704902265447,
    0.49556526182577254, 0.49423230851595967, 0.49289819222978404,
    0.4915629161065499, 0.49022648328829116, 0.48888889691976317,
    0.487550160148436, 0.48621027612448642, 0.48486924800079106,
    0.48352707893291874, 0.48218377207912272, 0.48083933060033396,
    0.47949375766015295, 0.478147056424843, 0.47679923006332209,
    0.47545028174715587, 0.47410021465054997, 0.47274903195034279,
    0.47139673682599764, 0.47004333245959562, 0.46868882203582796,
    0.46733320874198842, 0.46597649576796618, 0.46461868630623782,
    0.46325978355186015, 0.46189979070246273, 0.46053871095824,
    0.45917654752194409, 0.45781330359887717, 0.45644898239688392,
    0.45508358712634384, 0.45371712100016387, 0.45234958723377089,
    0.45098098904510386, 0.44961132965460654, 0.44824061228521989,
    0.44686884016237416, 0.44549601651398174, 0.4441221445704292,
    0.44274722756457, 0.44137126873171667, 0.43999427130963326,
    0.43861623853852766, 0.43723717366104409, 0.43585707992225547,
    0.43447596056965565, 0.43309381885315196, 0.43171065802505726,
    0.43032648134008261, 0.42894129205532949, 0.42755509343028208,
    0.42616788872679962, 0.42477968120910881, 0.42339047414379605,
    0.42200027079979968, 0.42060907444840251, 0.41921688836322391,
    0.41782371582021227, 0.41642956009763715, 0.41503442447608163,
    0.4136383122384345, 0.41224122666988289, 0.41084317105790391,
    0.40944414869225759, 0.40804416286497869, 0.40664321687036903,
    0.40524131400498986, 0.40383845756765407, 0.40243465085941843,
    0.40102989718357562, 0.39962419984564679, 0.39821756215337356,
    0.39680998741671031, 0.39540147894781635, 0.3939920400610481,
    0.39258167407295147, 0.39117038430225387, 0.38975817406985641,
    0.38834504669882625, 0.38693100551438858, 0.38551605384391885,
    0.38410019501693504, 0.38268343236508978, 0.38126576922216238,
    0.37984720892405116, 0.37842775480876556, 0.37700741021641826,
    0.37558617848921722, 0.37416406297145793, 0.37274106700951576,
    0.37131719395183749, 0.3698924471489341, 0.36846682995337232,
    0.36704034571976718, 0.36561299780477385, 0.36418478956707989,
    0.36275572436739723, 0.36132580556845428, 0.35989503653498811,
    0.35846342063373654, 0.35703096123343, 0.35559766170478385,
    0.35416352542049034, 0.35272855575521073, 0.35129275608556709,
    0.34985612979013492, 0.34841868024943456, 0.34698041084592368,
    0.34554132496398909, 0.34410142598993881, 0.34266071731199438,
    0.34121920232028236, 0.33977688440682685, 0.33833376696554113,
    0.33688985339222005, 0.3354451470845316, 0.33399965144200938,
    0.33255336986604422, 0.33110630575987643, 0.32965846252858749,
    0.3282098435790925, 0.32676045232013173, 0.32531029216226293,
    0.32385936651785285, 0.32240767880106985, 0.32095523242787521,
    0.31950203081601569, 0.31804807738501495, 0.31659337555616585,
    0.31513792875252244, 0.31368174039889152, 0.31222481392182488,
    0.31076715274961147, 0.30930876031226873, 0.30784964004153487,
    0.30638979537086092, 0.30492922973540237, 0.30346794657201132,
    0.30200594931922808, 0.30054324141727345, 0.29907982630804048,
    0.2976157074350862, 0.29615088824362379, 0.29468537218051433,
    0.29321916269425863, 0.29175226323498926, 0.29028467725446233,
    0.28881640820604948, 0.28734745954472951, 0.28587783472708062,
    0.28440753721127188, 0.28293657045705539, 0.28146493792575794,
    0.27999264308027322, 0.27851968938505306, 0.2770460803060999,
    0.27557181931095814, 0.27409690986870638, 0.272621355449949,
    0.271145159526808, 0.26966832557291509, 0.26819085706340318,
    0.26671275747489837, 0.26523403028551179, 0.26375467897483135,
    0.26227470702391359, 0.26079411791527551, 0.25931291513288623,
    0.257831102162159, 0.25634868248994291, 0.25486565960451457,
    0.25338203699557016, 0.25189781815421697, 0.25041300657296522,
    0.24892760574572015, 0.24744161916777327, 0.24595505033579459,
    0.24446790274782415, 0.24298017990326387, 0.24149188530286933,
    0.2400030224487415, 0.23851359484431842, 0.2370236059943672,
    0.23553305940497549, 0.23404195858354343, 0.23255030703877524,
    0.23105810828067111, 0.22956536582051887, 0.22807208317088573,
    0.22657826384561, 0.22508391135979283, 0.22358902922979, 0.22209362097320351,
    0.22059769010887351, 0.2191012401568698, 0.21760427463848364,
    0.21610679707621952, 0.21460881099378676, 0.21311031991609136,
    0.21161132736922755, 0.21011183688046961, 0.20861185197826349,
    0.20711137619221856, 0.20561041305309924, 0.20410896609281687,
    0.20260703884442113, 0.2011046348420919, 0.19960175762113097,
    0.19809841071795356, 0.19659459767008022, 0.19509032201612825,
    0.19358558729580361, 0.19208039704989244, 0.19057475482025274,
    0.18906866414980619, 0.1875621285825296, 0.18605515166344663,
    0.18454773693861962, 0.18303988795514095, 0.18153160826112497,
    0.18002290140569951, 0.17851377093899751, 0.17700422041214875,
    0.17549425337727143, 0.17398387338746382, 0.17247308399679595,
    0.17096188876030122, 0.16945029123396796, 0.16793829497473117,
    0.1664259035404641, 0.16491312048996992, 0.16339994938297323,
    0.16188639378011183, 0.16037245724292828, 0.15885814333386145,
    0.15734345561623825, 0.15582839765426523, 0.1543129730130201,
    0.15279718525844344, 0.15128103795733022, 0.14976453467732151,
    0.14824767898689603, 0.14673047445536175, 0.14521292465284746,
    0.14369503315029447, 0.14217680351944803, 0.14065823933284921,
    0.1391393441638262, 0.13762012158648604, 0.1361005751757062,
    0.13458070850712617, 0.13306052515713906, 0.13154002870288312,
    0.13001922272223335, 0.12849811079379317, 0.12697669649688587,
    0.12545498341154623, 0.12393297511851216, 0.1224106751992162,
    0.12088808723577708, 0.11936521481099135, 0.11784206150832498,
    0.11631863091190475, 0.11479492660651008, 0.11327095217756435,
    0.11174671121112659, 0.11022220729388306, 0.10869744401313872,
    0.10717242495680884, 0.10564715371341062, 0.10412163387205459,
    0.10259586902243628, 0.10106986275482782, 0.099543618660069319,
    0.0980171403295606, 0.096490431355252593, 0.094963495329638992,
    0.093436335845747787, 0.091908956497132724, 0.090381360877864983,
    0.0888535525825246, 0.087325535206192059, 0.0857973123444399,
    0.084268887593324071, 0.082740264549375692, 0.081211446809592441,
    0.079682437971430126, 0.078153241632794232, 0.076623861392031492,
    0.0750943008479213, 0.073564563599667426, 0.072034653246889332,
    0.070504573389613856, 0.068974327628266746, 0.067443919563664051,
    0.0659133527970038, 0.064382630929857465, 0.0628517575641614,
    0.061320736302208578, 0.059789570746639868, 0.058258264500435752,
    0.056726821166907748, 0.055195244349689941, 0.05366353765273052,
    0.052131704680283324, 0.050599749036899282, 0.049067674327418015,
    0.0475354841569593, 0.046003182130914623, 0.044470771854938668,
    0.04293825693494082, 0.041405640977076739, 0.039872927587739811,
    0.038340120373552694, 0.036807222941358832, 0.035274238898213947,
    0.03374117185137758, 0.032208025408304586, 0.030674803176636626,
    0.029141508764193722, 0.02760814577896574, 0.0260747178291039,
    0.024541228522912288, 0.023007681468839369, 0.021474080275469508,
    0.019940428551514441, 0.01840672990580482, 0.01687298794728171,
    0.0153392062849881, 0.013805388528060391, 0.012271538285719925,
    0.010737659167264491, 0.00920375478205982, 0.007669828739531097,
    0.0061358846491544753, 0.0046019261204485705, 0.0030679567629659761,
    0.0015339801862847655, 0.0, -0.0015339801862847655, -0.0030679567629659761,
    -0.0046019261204485705, -0.0061358846491544753, -0.007669828739531097,
    -0.00920375478205982, -0.010737659167264491, -0.012271538285719925,
    -0.013805388528060391, -0.0153392062849881, -0.01687298794728171,
    -0.01840672990580482, -0.019940428551514441, -0.021474080275469508,
    -0.023007681468839369, -0.024541228522912288, -0.0260747178291039,
    -0.02760814577896574, -0.029141508764193722, -0.030674803176636626,
    -0.032208025408304586, -0.03374117185137758, -0.035274238898213947,
    -0.036807222941358832, -0.038340120373552694, -0.039872927587739811,
    -0.041405640977076739, -0.04293825693494082, -0.044470771854938668,
    -0.046003182130914623, -0.0475354841569593, -0.049067674327418015,
    -0.050599749036899282, -0.052131704680283324, -0.05366353765273052,
    -0.055195244349689941, -0.056726821166907748, -0.058258264500435752,
    -0.059789570746639868, -0.061320736302208578, -0.0628517575641614,
    -0.064382630929857465, -0.0659133527970038, -0.067443919563664051,
    -0.068974327628266746, -0.070504573389613856, -0.072034653246889332,
    -0.073564563599667426, -0.0750943008479213, -0.076623861392031492,
    -0.078153241632794232, -0.079682437971430126, -0.081211446809592441,
    -0.082740264549375692, -0.084268887593324071, -0.0857973123444399,
    -0.087325535206192059, -0.0888535525825246, -0.090381360877864983,
    -0.091908956497132724, -0.093436335845747787, -0.094963495329638992,
    -0.096490431355252593, -0.0980171403295606, -0.099543618660069319,
    -0.10106986275482782, -0.10259586902243628, -0.10412163387205459,
    -0.10564715371341062, -0.10717242495680884, -0.10869744401313872,
    -0.11022220729388306, -0.11174671121112659, -0.11327095217756435,
    -0.11479492660651008, -0.11631863091190475, -0.11784206150832498,
    -0.11936521481099135, -0.12088808723577708, -0.1224106751992162,
    -0.12393297511851216, -0.12545498341154623, -0.12697669649688587,
    -0.12849811079379317, -0.13001922272223335, -0.13154002870288312,
    -0.13306052515713906, -0.13458070850712617, -0.1361005751757062,
    -0.13762012158648604, -0.1391393441638262, -0.14065823933284921,
    -0.14217680351944803, -0.14369503315029447, -0.14521292465284746,
    -0.14673047445536175, -0.14824767898689603, -0.14976453467732151,
    -0.15128103795733022, -0.15279718525844344, -0.1543129730130201,
    -0.15582839765426523, -0.15734345561623825, -0.15885814333386145,
    -0.16037245724292828, -0.16188639378011183, -0.16339994938297323,
    -0.16491312048996992, -0.1664259035404641, -0.16793829497473117,
    -0.16945029123396796, -0.17096188876030122, -0.17247308399679595,
    -0.17398387338746382, -0.17549425337727143, -0.17700422041214875,
    -0.17851377093899751, -0.18002290140569951, -0.18153160826112497,
    -0.18303988795514095, -0.18454773693861962, -0.18605515166344663,
    -0.1875621285825296, -0.18906866414980619, -0.19057475482025274,
    -0.19208039704989244, -0.19358558729580361, -0.19509032201612825,
    -0.19659459767008022, -0.19809841071795356, -0.19960175762113097,
    -0.2011046348420919, -0.20260703884442113, -0.20410896609281687,
    -0.20561041305309924, -0.20711137619221856, -0.20861185197826349,
    -0.21011183688046961, -0.21161132736922755, -0.21311031991609136,
    -0.21460881099378676, -0.21610679707621952, -0.21760427463848364,
    -0.2191012401568698, -0.22059769010887351, -0.22209362097320351,
    -0.22358902922979, -0.22508391135979283, -0.22657826384561,
    -0.22807208317088573, -0.22956536582051887, -0.23105810828067111,
    -0.23255030703877524, -0.23404195858354343, -0.23553305940497549,
    -0.2370236059943672, -0.23851359484431842, -0.2400030224487415,
    -0.24149188530286933, -0.24298017990326387, -0.24446790274782415,
    -0.24595505033579459, -0.24744161916777327, -0.24892760574572015,
    -0.25041300657296522, -0.25189781815421697, -0.25338203699557016,
    -0.25486565960451457, -0.25634868248994291, -0.257831102162159,
    -0.25931291513288623, -0.26079411791527551, -0.26227470702391359,
    -0.26375467897483135, -0.26523403028551179, -0.26671275747489837,
    -0.26819085706340318, -0.26966832557291509, -0.271145159526808,
    -0.272621355449949, -0.27409690986870638, -0.27557181931095814,
    -0.2770460803060999, -0.27851968938505306, -0.27999264308027322,
    -0.28146493792575794, -0.28293657045705539, -0.28440753721127188,
    -0.28587783472708062, -0.28734745954472951, -0.28881640820604948,
    -0.29028467725446233, -0.29175226323498926, -0.29321916269425863,
    -0.29468537218051433, -0.29615088824362379, -0.2976157074350862,
    -0.29907982630804048, -0.30054324141727345, -0.30200594931922808,
    -0.30346794657201132, -0.30492922973540237, -0.30638979537086092,
    -0.30784964004153487, -0.30930876031226873, -0.31076715274961147,
    -0.31222481392182488, -0.31368174039889152, -0.31513792875252244,
    -0.31659337555616585, -0.31804807738501495, -0.31950203081601569,
    -0.32095523242787521, -0.32240767880106985, -0.32385936651785285,
    -0.32531029216226293, -0.32676045232013173, -0.3282098435790925,
    -0.32965846252858749, -0.33110630575987643, -0.33255336986604422,
    -0.33399965144200938, -0.3354451470845316, -0.33688985339222005,
    -0.33833376696554113, -0.33977688440682685, -0.34121920232028236,
    -0.34266071731199438, -0.34410142598993881, -0.34554132496398909,
    -0.34698041084592368, -0.34841868024943456, -0.34985612979013492,
    -0.35129275608556709, -0.35272855575521073, -0.35416352542049034,
    -0.35559766170478385, -0.35703096123343, -0.35846342063373654,
    -0.35989503653498811, -0.36132580556845428, -0.36275572436739723,
    -0.36418478956707989, -0.36561299780477385, -0.36704034571976718,
    -0.36846682995337232, -0.3698924471489341, -0.37131719395183749,
    -0.37274106700951576, -0.37416406297145793, -0.37558617848921722,
    -0.37700741021641826, -0.37842775480876556, -0.37984720892405116,
    -0.38126576922216238, -0.38268343236508978, -0.38410019501693504,
    -0.38551605384391885, -0.38693100551438858, -0.38834504669882625,
    -0.38975817406985641, -0.39117038430225387, -0.39258167407295147,
    -0.3939920400610481, -0.39540147894781635, -0.39680998741671031,
    -0.39821756215337356, -0.39962419984564679, -0.40102989718357562,
    -0.40243465085941843, -0.40383845756765407, -0.40524131400498986,
    -0.40664321687036903, -0.40804416286497869, -0.40944414869225759,
    -0.41084317105790391, -0.41224122666988289, -0.4136383122384345,
    -0.41503442447608163, -0.41642956009763715, -0.41782371582021227,
    -0.41921688836322391, -0.42060907444840251, -0.42200027079979968,
    -0.42339047414379605, -0.42477968120910881, -0.42616788872679962,
    -0.42755509343028208, -0.42894129205532949, -0.43032648134008261,
    -0.43171065802505726, -0.43309381885315196, -0.43447596056965565,
    -0.43585707992225547, -0.43723717366104409, -0.43861623853852766,
    -0.43999427130963326, -0.44137126873171667, -0.44274722756457,
    -0.4441221445704292, -0.44549601651398174, -0.44686884016237416,
    -0.44824061228521989, -0.44961132965460654, -0.45098098904510386,
    -0.45234958723377089, -0.45371712100016387, -0.45508358712634384,
    -0.45644898239688392, -0.45781330359887717, -0.45917654752194409,
    -0.46053871095824, -0.46189979070246273, -0.46325978355186015,
    -0.46461868630623782, -0.46597649576796618, -0.46733320874198842,
    -0.46868882203582796, -0.47004333245959562, -0.47139673682599764,
    -0.47274903195034279, -0.47410021465054997, -0.47545028174715587,
    -0.47679923006332209, -0.478147056424843, -0.47949375766015295,
    -0.48083933060033396, -0.48218377207912272, -0.48352707893291874,
    -0.48486924800079106, -0.48621027612448642, -0.487550160148436,
    -0.48888889691976317, -0.49022648328829116, -0.4915629161065499,
    -0.49289819222978404, -0.49423230851595967, -0.49556526182577254,
    -0.49689704902265447, -0.49822766697278181, -0.49955711254508184,
    -0.50088538261124071, -0.50221247404571079, -0.50353838372571758,
    -0.50486310853126759, -0.50618664534515523, -0.50750899105297087,
    -0.508830142543107, -0.51015009670676681, -0.5114688504379703,
    -0.512786400633563, -0.51410274419322166, -0.51541787801946293,
    -0.51673179901764987, -0.51804450409599934, -0.51935599016558964,
    -0.52066625414036716, -0.52197529293715439, -0.52328310347565643,
    -0.524589682678469, -0.52589502747108463, -0.52719913478190128,
    -0.52850200154222848, -0.52980362468629461, -0.531104001151255,
    -0.5324031278771979, -0.533701001807153, -0.53499761988709715,
    -0.53629297906596318, -0.53758707629564539, -0.53887990853100842,
    -0.54017147272989285, -0.54146176585312344, -0.54275078486451589,
    -0.54403852673088382, -0.54532498842204646, -0.54661016691083486,
    -0.54789405917310019, -0.54917666218771966, -0.55045797293660481,
    -0.55173798840470734, -0.55301670558002747, -0.55429412145362,
    -0.55557023301960218, -0.5568450372751601, -0.5581185312205561,
    -0.55939071185913614, -0.560661576197336, -0.56193112124468936,
    -0.56319934401383409, -0.5644662415205195, -0.56573181078361312,
    -0.56699604882510868, -0.56825895267013149, -0.56952051934694714,
    -0.57078074588696726, -0.572039629324757, -0.5732971666980422,
    -0.57455335504771576, -0.57580819141784534, -0.57706167285567944,
    -0.57831379641165559, -0.57956455913940563, -0.58081395809576453,
    -0.58206199034077544, -0.58330865293769829, -0.58455394295301533,
    -0.58579785745643886, -0.587040393520918, -0.58828154822264522,
    -0.58952131864106394, -0.59075970185887416, -0.591996694962041,
    -0.5932322950397998, -0.59446649918466443, -0.59569930449243336,
    -0.59693070806219639, -0.59816070699634238, -0.59938929840056454,
    -0.600616479383869, -0.60184224705858, -0.60306659854034816,
    -0.604289530948156, -0.60551104140432555, -0.60673112703452448,
    -0.60794978496777363, -0.60916701233645321, -0.61038280627630948,
    -0.61159716392646191, -0.61281008242940971, -0.61402155893103849,
    -0.61523159058062682, -0.61644017453085365, -0.61764730793780387,
    -0.61885298796097632, -0.6200572117632891, -0.62125997651108755,
    -0.62246127937415, -0.62366111752569453, -0.62485948814238634,
    -0.62605638840434352, -0.62725181549514408, -0.6284457666018326,
    -0.629638238914927, -0.63082922962842447, -0.63201873593980906,
    -0.63320675505005719, -0.63439328416364549, -0.63557832048855611,
    -0.6367618612362842, -0.637943903621844, -0.63912444486377573,
    -0.64030348218415167, -0.641481012808583, -0.64265703396622686,
    -0.64383154288979139, -0.64500453681554393, -0.64617601298331628,
    -0.64734596863651206, -0.64851440102211244, -0.64968130739068319,
    -0.650846684996381, -0.6520105310969595, -0.65317284295377676,
    -0.65433361783180044, -0.65549285299961535, -0.65665054572942894,
    -0.65780669329707864, -0.65896129298203732, -0.66011434206742048,
    -0.66126583783999227, -0.66241577759017178, -0.66356415861203977,
    -0.66471097820334479, -0.66585623366550972, -0.66699992230363747,
    -0.66814204142651845, -0.669282588346636, -0.67042156038017309,
    -0.67155895484701833, -0.67269476907077286, -0.673829000378756,
    -0.674961646102012, -0.67609270357531592, -0.67722217013718033,
    -0.67835004312986147, -0.679476319899365, -0.680600997795453,
    -0.68172407417164971, -0.68284554638524808, -0.6839654117973154,
    -0.68508366777270036, -0.68620031168003859, -0.687315340891759,
    -0.68842875278409044, -0.68954054473706683, -0.6906507141345346,
    -0.69175925836415775, -0.69286617481742463, -0.69397146088965389,
    -0.69507511398000088, -0.696177131491463, -0.69727751083088652,
    -0.69837624940897292, -0.69947334464028377, -0.70056879394324834,
    -0.70166259474016845, -0.7027547444572253, -0.70384524052448494,
    -0.70493408037590488, -0.70602126144933974, -0.70710678118654757,
    -0.7081906370331954, -0.70927282643886569, -0.71035334685706242,
    -0.71143219574521643, -0.71250937056469243, -0.71358486878079352,
    -0.71465868786276909, -0.71573082528381859, -0.71680127852109954,
    -0.71787004505573171, -0.71893712237280449, -0.72000250796138165,
    -0.72106619931450811, -0.72212819392921535, -0.72318848930652746,
    -0.724247082951467, -0.72530397237306077, -0.726359155084346,
    -0.72741262860237577, -0.7284643904482252, -0.729514438146997,
    -0.73056276922782759, -0.73160938122389263, -0.73265427167241282,
    -0.73369743811466037, -0.7347388780959635, -0.73577858916571359,
    -0.73681656887736979, -0.737852814788466, -0.73888732446061511,
    -0.7399200954595162, -0.74095112535495922, -0.74198041172083107,
    -0.74300795213512172, -0.74403374417992929, -0.745057785441466,
    -0.74608007351006378, -0.74710060598018013, -0.7481193804504036,
    -0.74913639452345937, -0.75015164580621507, -0.75116513190968637,
    -0.7521768504490427, -0.75318679904361252, -0.75419497531688917,
    -0.75520137689653655, -0.75620600141439454, -0.75720884650648457,
    -0.75820990981301528, -0.759209188978388, -0.76020668165120242,
    -0.76120238548426178, -0.7621962981345789, -0.76318841726338127,
    -0.76417874053611679, -0.765167265622459, -0.76615399019631292,
    -0.7671389119358204, -0.76812202852336542, -0.7691033376455797,
    -0.7700828369933479, -0.77106052426181382, -0.77203639715038452,
    -0.773010453362737, -0.7739826906068229, -0.77495310659487393,
    -0.77592169904340769, -0.77688846567323244, -0.77785340420945315,
    -0.778816512381476, -0.77977778792301455, -0.78073722857209449,
    -0.78169483207105939, -0.78265059616657573, -0.78360451860963831,
    -0.78455659715557524, -0.78550682956405393, -0.78645521359908577,
    -0.78740174702903143, -0.78834642762660634, -0.78928925316888565,
    -0.79023022143731, -0.7911693302176902, -0.79210657730021239,
    -0.79304196047944364, -0.79397547755433717, -0.794907126328237,
    -0.79583690460888357, -0.79676481020841883, -0.79769084094339116,
    -0.79861499463476093, -0.799537269107905, -0.80045766219262282,
    -0.80137617172314024, -0.80229279553811572, -0.80320753148064494,
    -0.8041203773982657, -0.80503133114296366, -0.80594039057117628,
    -0.80684755354379933, -0.80775281792619036, -0.808656181588175,
    -0.80955764240405126, -0.81045719825259477, -0.81135484701706373,
    -0.81225058658520388, -0.81314441484925359, -0.81403632970594841,
    -0.81492632905652662, -0.81581441080673378, -0.81670057286682785,
    -0.81758481315158371, -0.81846712958029866, -0.819347520076797,
    -0.82022598256943469, -0.82110251499110465, -0.82197711527924155,
    -0.82284978137582643, -0.82372051122739143, -0.82458930278502529,
    -0.82545615400437755, -0.82632106284566353, -0.82718402727366913,
    -0.8280450452577558, -0.82890411477186487, -0.829761233794523,
    -0.83061640030884631, -0.83146961230254524, -0.83232086776792968,
    -0.83317016470191319, -0.83401750110601813, -0.83486287498638,
    -0.8357062843537526, -0.836547727223512, -0.83738720161566194,
    -0.83822470555483808, -0.83906023707031274, -0.83989379419599952,
    -0.84072537497045807, -0.84155497743689844, -0.84238259964318585,
    -0.84320823964184544, -0.84403189549006641, -0.84485356524970712,
    -0.84567324698729907, -0.84649093877405213, -0.84730663868585832,
    -0.84812034480329723, -0.84893205521163961, -0.84974176800085255,
    -0.85054948126560348, -0.8513551931052652, -0.85215890162391983,
    -0.85296060493036363, -0.85376030113811141, -0.85455798836540053,
    -0.855353664735196, -0.85614732837519447, -0.85693897741782876,
    -0.85772861000027212, -0.85851622426444274, -0.85930181835700847,
    -0.86008539042939014, -0.86086693863776731, -0.8616464611430813,
    -0.8624239561110405, -0.86319942171212416, -0.8639728561215867,
    -0.86474425751946238, -0.86551362409056909, -0.866280954024513,
    -0.86704624551569265, -0.86780949676330332, -0.8685707059713409,
    -0.86932987134860684, -0.87008699110871146, -0.870842063470079,
    -0.87159508665595109, -0.87234605889439154, -0.87309497841829009,
    -0.87384184346536686, -0.87458665227817611, -0.87532940310411089,
    -0.8760700941954066, -0.87680872380914565, -0.87754529020726135,
    -0.87827979165654158, -0.87901222642863353, -0.87974259280004741,
    -0.88047088905216075, -0.88119711347122209, -0.881921264348355,
    -0.88264333997956279, -0.88336333866573158, -0.884081258712635,
    -0.88479709843093779, -0.8855108561362, -0.88622253014888064,
    -0.88693211879434219, -0.88763962040285393, -0.88834503330959635,
    -0.88904835585466457, -0.88974958638307278, -0.89044872324475788,
    -0.89114576479458318, -0.89184070939234272, -0.89253355540276458,
    -0.89322430119551532, -0.89391294514520325, -0.8945994856313827,
    -0.89528392103855758, -0.89596624975618522, -0.89664647017868015,
    -0.89732458070541832, -0.89800057974073988, -0.89867446569395382,
    -0.89934623697934157, -0.90001589201616017, -0.900683429228647,
    -0.901348847046022, -0.90201214390249318, -0.90267331823725883,
    -0.90333236849451182, -0.90398929312344334, -0.90464409057824624,
    -0.90529675931811882, -0.90594729780726846, -0.90659570451491533,
    -0.90724197791529582, -0.90788611648766626, -0.90852811871630612,
    -0.90916798309052238, -0.90980570810465222, -0.91044129225806725,
    -0.91107473405517636, -0.91170603200542988, -0.91233518462332275,
    -0.91296219042839821, -0.91358704794525081, -0.91420975570353069,
    -0.9148303122379462, -0.91544871608826783, -0.91606496579933172,
    -0.9166790599210427, -0.91729099700837791, -0.9179007756213905,
    -0.91850839432521225, -0.91911385169005777, -0.91971714629122736,
    -0.92031827670911059, -0.92091724152918952, -0.9215140393420419,
    -0.92210866874334518, -0.92270112833387863, -0.92329141671952764,
    -0.92387953251128674, -0.9244654743252626, -0.92504924078267758,
    -0.92563083050987272, -0.92621024213831138, -0.92678747430458175,
    -0.92736252565040111, -0.92793539482261789, -0.92850608047321559,
    -0.92907458125931586, -0.92964089584318121, -0.93020502289221907,
    -0.93076696107898371, -0.93132670908118043, -0.93188426558166815,
    -0.93243962926846236, -0.932992798834739, -0.93354377297883617,
    -0.93409255040425887, -0.93463912981968078, -0.93518350993894761,
    -0.93572568948108037, -0.93626566717027826, -0.93680344173592156,
    -0.937339011912575, -0.93787237643998989, -0.93840353406310806,
    -0.9389324835320646, -0.93945922360218992, -0.93998375303401394,
    -0.9405060705932683, -0.94102617505088926, -0.94154406518302081,
    -0.94205973977101731, -0.94257319760144687, -0.94308443746609349,
    -0.94359345816196039, -0.94410025849127266, -0.94460483726148026,
    -0.94510719328526061, -0.94560732538052128, -0.94610523237040345,
    -0.94660091308328353, -0.94709436635277722, -0.94758559101774109,
    -0.94807458592227623, -0.94856134991573027, -0.94904588185270056,
    -0.94952818059303667, -0.950008245001843, -0.9504860739494817,
    -0.95096166631157508, -0.95143502096900834, -0.95190613680793235,
    -0.95237501271976588, -0.95284164760119872, -0.95330604035419386,
    -0.95376818988599033, -0.95422809510910567, -0.95468575494133834,
    -0.95514116830577078, -0.95559433413077111, -0.95604525134999641,
    -0.9564939189023951, -0.95694033573220882, -0.95738450078897586,
    -0.95782641302753291, -0.95826607140801767, -0.9587034748958716,
    -0.95913862246184189, -0.95957151308198452, -0.960002145737666,
    -0.96043051941556579, -0.96085663310767966, -0.96128048581132064,
    -0.96170207652912254, -0.96212140426904158, -0.96253846804435916,
    -0.96295326687368388, -0.963365799780954, -0.96377606579543984,
    -0.96418406395174583, -0.96458979328981276, -0.96499325285492032,
    -0.9653944416976894, -0.96579335887408368, -0.9661900034454125,
    -0.96658437447833312, -0.96697647104485207, -0.96736629222232851,
    -0.96775383709347551, -0.96813910474636244, -0.96852209427441727,
    -0.96890280477642887, -0.96928123535654853, -0.96965738512429245,
    -0.970031253194544, -0.9704028386875555, -0.97077214072895035,
    -0.97113915844972509, -0.97150389098625178, -0.9718663374802794,
    -0.97222649707893627, -0.97258436893473221, -0.97293995220556018,
    -0.97329324605469825, -0.973644249650812, -0.97399296216795583,
    -0.97433938278557586, -0.97468351068851067, -0.97502534506699412,
    -0.975364885116657, -0.97570213003852857, -0.976037079039039,
    -0.97636973133002114, -0.97670008612871184, -0.97702814265775439,
    -0.97735390014520007, -0.97767735782450993, -0.97799851493455714,
    -0.97831737071962765, -0.97863392442942321, -0.9789481753190622,
    -0.979260122649082, -0.97956976568544052, -0.97987710369951764,
    -0.98018213596811743, -0.98048486177346938, -0.98078528040323043,
    -0.98108339115048671, -0.98137919331375456, -0.98167268619698311,
    -0.98196386910955524, -0.98225274136628937, -0.98253930228744124,
    -0.98282355119870524, -0.98310548743121629, -0.98338511032155118,
    -0.98366241921173025, -0.98393741344921892, -0.984210092386929,
    -0.98448045538322093, -0.98474850180190421, -0.98501423101223984,
    -0.98527764238894122, -0.98553873531217606, -0.98579750916756748,
    -0.98605396334619544, -0.98630809724459867, -0.98655991026477541,
    -0.98680940181418553, -0.987056571305751, -0.98730141815785843,
    -0.98754394179435923, -0.98778414164457218, -0.98802201714328353,
    -0.98825756773074946, -0.98849079285269659, -0.98872169196032378,
    -0.988950264510303, -0.989176509964781, -0.98940042779138038,
    -0.98962201746320089, -0.98984127845882053, -0.99005821026229712,
    -0.99027281236316911, -0.99048508425645709, -0.99069502544266463,
    -0.99090263542778, -0.99110791372327689, -0.99131085984611544,
    -0.9915114733187439, -0.99170975366909953, -0.99190570043060933,
    -0.9920993131421918, -0.99229059134825737, -0.99247953459871,
    -0.992666142448948, -0.9928504144598651, -0.99303235019785141,
    -0.9932119492347945, -0.99338921114808065, -0.9935641355205953,
    -0.9937367219407246, -0.99390697000235606, -0.99407487930487937,
    -0.9942404494531879, -0.9944036800576791, -0.99456457073425542,
    -0.9947231211043257, -0.99487933079480562, -0.99503319943811863,
    -0.99518472667219693, -0.99533391214048228, -0.99548075549192694,
    -0.99562525638099431, -0.99576741446765982, -0.99590722941741172,
    -0.996044700901252, -0.996179828595697, -0.996312612182778,
    -0.99644305135004263, -0.99657114579055484, -0.99669689520289606,
    -0.99682029929116567, -0.99694135776498216, -0.997060070339483,
    -0.99717643673532619, -0.99729045667869021, -0.9974021299012753,
    -0.99751145614030345, -0.99761843513851955, -0.99772306664419164,
    -0.99782535041111164, -0.997925286198596, -0.99802287377148624,
    -0.99811811290014918, -0.99821100336047819, -0.99830154493389289,
    -0.99838973740734016, -0.99847558057329477, -0.99855907422975931,
    -0.99864021818026527, -0.99871901223387294, -0.99879545620517241,
    -0.99886954991428356, -0.99894129318685687, -0.99901068585407338,
    -0.99907772775264536, -0.99914241872481691, -0.99920475861836389,
    -0.99926474728659442, -0.99932238458834954, -0.99937767038800285,
    -0.99943060455546173, -0.999481186966167, -0.99952941750109314,
    -0.99957529604674922, -0.99961882249517864, -0.99965999674395922,
    -0.99969881869620425, -0.99973528826056168, -0.99976940535121528,
    -0.99980116988788426, -0.9998305817958234, -0.99985764100582386,
    -0.99988234745421256, -0.9999047010828529, -0.9999247018391445,
    -0.99994234967602391, -0.9999576445519639, -0.99997058643097414,
    -0.99998117528260111, -0.9999894110819284, -0.99999529380957619,
    -0.99999882345170188, -1.0 };

  static boolean_T isInitialized_CLI2Realtime{ false };
}

// Function Declarations
namespace CLI2
{
  static void binary_expand_op(::coder::array<double, 2U> &in1, int in2, const
    double in3[100], const double in4_data[], const int &in4_size, const double
    in5[2]);
  static void binary_expand_op_1(::coder::array<double, 2U> &in1, int in2);
  namespace coder
  {
    static double b_norm(const double x[2]);
    static double b_std(const double x_data[], const int x_size[2]);
    static void filter(const double b[9], const double a[9], const double x
                       [120000], double y[120000]);
    namespace internal
    {
      namespace blas
      {
        static double xnrm2(int n, const ::coder::array<double, 2U> &x, int ix0);
        static double xnrm2(int n, const double x_data[]);
      }

      namespace lapack
      {
        static int xgeqp3(::coder::array<double, 2U> &A, double tau_data[], int
                          jpvt_data[], int jpvt_size[2]);
      }

      static void merge(int idx[8], double x[8], int np, int nq, int iwork[8],
                        double xwork[8]);
      static double minimum(const double x_data[], const int x_size[2], int &idx);
      static int nullAssignment(double x_data[], const boolean_T idx[100]);
      static double quickselect(double v[100], int n, int vlen, int &nfirst, int
        &nlast);
      static void sort(double x[8], int idx[8]);
      static int thirdOfFive(const double v[100], int ia, int ib);
    }

    static void mean(const ::coder::array<double, 3U> &x, double y[110]);
    static double median(const double x[100]);
    static void mldivide(const ::coder::array<double, 2U> &A, double B_data[],
                         int &B_size);
    static void movmean(const double x[92400], double y[92400]);
    static void prctile(const double x[220], double y[100]);
    static void pwelch(const double x[1250], double varargout_1[626], double
                       varargout_2[626]);
    static void sum(const ::coder::array<double, 2U> &x, double y_data[], int
                    y_size[2]);
    static void vmovfun(const double x[110], double y[110]);
  }

  static double rt_hypotd_snf(double u0, double u1);
  static double rt_powd_snf(double u0, double u1);
  static void sigm_fit(const double x[100], const double initial_params[4],
                       double param[4]);
}

// Function Definitions
//
// Arguments    : const double x[1250]
//                creal_T y[1250]
//                const creal_T wwc[1249]
//                const double costabinv[2049]
//                const double sintabinv[2049]
// Return Type  : void
//
namespace CLI2
{
  namespace coder
  {
    namespace internal
    {
      namespace fft
      {
        void FFTImplementationCallback::doHalfLengthBluestein(const double x
          [1250], creal_T y[1250], const creal_T wwc[1249], const double
          costabinv[2049], const double sintabinv[2049])
        {
          static const creal_T reconVar1[625]{ { 1.0,// re
              -1.0                     // im
            }, { 0.9949734729211811,   // re
              -0.99998736693296575     // im
            }, { 0.98994707284326933,  // re
              -0.99994946805105178     // im
            }, { 0.98492092676396292,  // re
              -0.99988630431181635     // im
            }, { 0.97989516167454238,  // re
              -0.999797877311163       // im
            }, { 0.97486990455666256,  // re
              -0.99968418928329994     // im
            }, { 0.96984528237914325,  // re
              -0.99954524310068449     // im
            }, { 0.96482142209476218,  // re
              -0.99938104227394919     // im
            }, { 0.95979845063704683,  // re
              -0.99919159095181442     // im
            }, { 0.9547764949170674,   // re
              -0.99897689392098254     // im
            }, { 0.9497556818202304,   // re
              -0.99873695660601747     // im
            }, { 0.94473613820307278,  // re
              -0.99847178506920775     // im
            }, { 0.93971799089005648,  // re
              -0.99818138601041273     // im
            }, { 0.9347013666703643,   // re
              -0.9978657667668942      // im
            }, { 0.92968639229469618,  // re
              -0.99752493531313025     // im
            }, { 0.92467319447206731,  // re
              -0.99715890026061393     // im
            }, { 0.91966189986660574,  // re
              -0.99676767085763607     // im
            }, { 0.914652635094353,    // re
              -0.99635125698905125     // im
            }, { 0.90964552672006438,  // re
              -0.995909669176028       // im
            }, { 0.90464070125401141,  // re
              -0.99544291857578315     // im
            }, { 0.89963828514878508,  // re
              -0.99495101698130017     // im
            }, { 0.89463840479610157,  // re
              -0.99443397682103052     // im
            }, { 0.88964118652360824,  // re
              -0.99389181115858027     // im
            }, { 0.88464675659169179,  // re
              -0.99332453369237972     // im
            }, { 0.87965524119028848,  // re
              -0.99273215875533738     // im
            }, { 0.87466676643569574,  // re
              -0.99211470131447788     // im
            }, { 0.86968145836738553,  // re
              -0.99147217697056356     // im
            }, { 0.86469944294481971,  // re
              -0.99080460195770081     // im
            }, { 0.859720846044268,    // re
              -0.9901119931429293      // im
            }, { 0.85474579345562718,  // re
              -0.98939436802579617     // im
            }, { 0.84977441087924288,  // re
              -0.98865174473791406     // im
            }, { 0.844806823922734,    // re
              -0.98788414204250219     // im
            }, { 0.83984315809781818,  // re
              -0.98709157933391345     // im
            }, { 0.834883538817142,    // re
              -0.98627407663714339     // im
            }, { 0.8299280913911109,   // re
              -0.98543165460732474     // im
            }, { 0.824976941024724,    // re
              -0.98456433452920533     // im
            }, { 0.82003021281441024,  // re
              -0.98367213831661082     // im
            }, { 0.81508803174486777,  // re
              -0.98275508851189008     // im
            }, { 0.81015052268590615,  // re
              -0.98181320828534657     // im
            }, { 0.80521781038929108,  // re
              -0.98084652143465234     // im
            }, { 0.800290019485593,    // re
              -0.97985505238424686     // im
            }, { 0.79536727448103739,  // re
              -0.97883882618472018     // im
            }, { 0.79044969975435941,  // re
              -0.97779786851217976     // im
            }, { 0.78553741955366163,  // re
              -0.97673220566760155     // im
            }, { 0.78063055799327408,  // re
              -0.975641864576166       // im
            }, { 0.77572923905061886,  // re
              -0.97452687278657713     // im
            }, { 0.77083358656307732,  // re
              -0.97338725847036722     // im
            }, { 0.76594372422486168,  // re
              -0.97222305042118418     // im
            }, { 0.76105977558388938,  // re
              -0.97103427805406473     // im
            }, { 0.7561818640386615,   // re
              -0.96982097140469092     // im
            }, { 0.75131011283514515,  // re
              -0.96858316112863108     // im
            }, { 0.74644464506365948,  // re
              -0.96732087850056581     // im
            }, { 0.74158558365576532,  // re
              -0.966034155413497       // im
            }, { 0.73673305138115974,  // re
              -0.96472302437794288     // im
            }, { 0.73188717084457378,  // re
              -0.96338751852111582     // im
            }, { 0.72704806448267478,  // re
              -0.96202767158608593     // im
            }, { 0.7222158545609727,   // re
              -0.96064351793092806     // im
            }, { 0.71739066317073152,  // re
              -0.95923509252785422     // im
            }, { 0.71257261222588364,  // re
              -0.95780243096232942     // im
            }, { 0.70776182345995009,  // re
              -0.95634556943217275     // im
            }, { 0.70295841842296514,  // re
              -0.954864544746643       // im
            }, { 0.698162518478404,    // re
              -0.95335939432550842     // im
            }, { 0.69337424480011811,  // re
              -0.95183015619810141     // im
            }, { 0.68859371836927186,  // re
              -0.95027686900235742     // im
            }, { 0.683821059971287,    // re
              -0.94869957198383914     // im
            }, { 0.67905639019279052,  // re
              -0.94709830499474434     // im
            }, { 0.67429982941856792,  // re
              -0.94547310849289945     // im
            }, { 0.6695514978285213,   // re
              -0.94382402354073736     // im
            }, { 0.66481151539463335,  // re
              -0.94215109180425927     // im
            }, { 0.66008000187793558,  // re
              -0.94045435555198309     // im
            }, { 0.65535707682548294,  // re
              -0.93873385765387407     // im
            }, { 0.650642859567333,    // re
              -0.936989641580263       // im
            }, { 0.645937469213531,    // re
              -0.935221751400747       // im
            }, { 0.64124102465110044,  // re
              -0.93343023178307638     // im
            }, { 0.63655364454103935,  // re
              -0.931615127992026       // im
            }, { 0.63187544731532208,  // re
              -0.92977648588825146     // im
            }, { 0.62720655117390678,  // re
              -0.92791435192713068     // im
            }, { 0.62254707408174936,  // re
              -0.92602877315759013     // im
            }, { 0.61789713376582267,  // re
              -0.92411979722091575     // im
            }, { 0.61325684771214228,  // re
              -0.92218747234954934     // im
            }, { 0.60862633316279768,  // re
              -0.92023184736587038     // im
            }, { 0.60400570711299006,  // re
              -0.91825297168096165     // im
            }, { 0.599395086308077,    // re
              -0.91625089529336179     // im
            }, { 0.594794587240622,    // re
              -0.914225668787801       // im
            }, { 0.59020432614745078,  // re
              -0.91217734333392375     // im
            }, { 0.58562441900671591,  // re
              -0.91010597068499566     // im
            }, { 0.581054981534965,    // re
              -0.90801160317659568     // im
            }, { 0.57649612918421811,  // re
              -0.90589429372529418     // im
            }, { 0.57194797713904966,  // re
              -0.90375409582731547     // im
            }, { 0.56741064031367916,  // re
              -0.90159106355718666     // im
            }, { 0.56288423334906712,  // re
              -0.89940525156637108     // im
            }, { 0.55836887061001872,  // re
              -0.89719671508188747     // im
            }, { 0.55386466618229424,  // re
              -0.89496550990491486     // im
            }, { 0.54937173386972671,  // re
              -0.89271169240938231     // im
            }, { 0.5448901871913463,   // re
              -0.89043531954054478     // im
            }, { 0.54042013937851219,  // re
              -0.88813644881354459     // im
            }, { 0.53596170337205162,  // re
              -0.88581513831195746     // im
            }, { 0.53151499181940665,  // re
              -0.88347144668632582     // im
            }, { 0.52708011707178748,  // re
              -0.88110543315267653     // im
            }, { 0.522657191181334,    // re
              -0.87871715749102486     // im
            }, { 0.51824632589828468,  // re
              -0.87630668004386358     // im
            }, { 0.51384763266815336,  // re
              -0.87387406171463933     // im
            }, { 0.50946122262891258,  // re
              -0.87141936396621267     // im
            }, { 0.50508720660818673,  // re
              -0.86894264881930638     // im
            }, { 0.50072569512045084,  // re
              -0.866443978850937       // im
            }, { 0.4963767983642392,   // re
              -0.86392341719283527     // im
            }, { 0.49204062621935996,  // re
              -0.86138102752984991     // im
            }, { 0.48771728824412,     // re
              -0.85881687409833884     // im
            }, { 0.48340689367255618,  // re
              -0.85623102168454646     // im
            }, { 0.47910955141167577,  // re
              -0.85362353562296667     // im
            }, { 0.47482537003870429,  // re
              -0.85099448179469184     // im
            }, { 0.47055445779834282,  // re
              -0.84834392662574842     // im
            }, { 0.46629692260003264,  // re
              -0.84567193708541877     // im
            }, { 0.46205287201522871,  // re
              -0.84297858068454867     // im
            }, { 0.45782241327468232,  // re
              -0.8402639254738421      // im
            }, { 0.45360565326573088,  // re
              -0.83752804004214165     // im
            }, { 0.44940269852959847,  // re
              -0.83477099351469541     // im
            }, { 0.4452136552587026,   // re
              -0.83199285555141056     // im
            }, { 0.44103862929397242,  // re
              -0.82919369634509332     // im
            }, { 0.43687772612217357,  // re
              -0.82637358661967553     // im
            }, { 0.43273105087324348,  // re
              -0.82353259762842745     // im
            }, { 0.42859870831763491,  // re
              -0.820670801152158       // im
            }, { 0.42448080286366896,  // re
              -0.81778826949740047     // im
            }, { 0.42037743855489673,  // re
              -0.81488507549458622     // im
            }, { 0.41628871906747111,  // re
              -0.81196129249620419     // im
            }, { 0.41221474770752686,  // re
              -0.80901699437494745     // im
            }, { 0.40815562740857048,  // re
              -0.80605225552184723     // im
            }, { 0.40411146072887971,  // re
              -0.80306715084439273     // im
            }, { 0.400082349848912,    // re
              -0.800061755764639       // im
            }, { 0.39606839656872306,  // re
              -0.797036146217301       // im
            }, { 0.39206970230539462,  // re
              -0.79399039864783538     // im
            }, { 0.38808636809047203,  // re
              -0.7909245900105083      // im
            }, { 0.38411849456741154,  // re
              -0.787838797766452       // im
            }, { 0.38016618198903773,  // re
              -0.784733099881707       // im
            }, { 0.37622953021500982,  // re
              -0.78160757482525245     // im
            }, { 0.37230863870929953,  // re
              -0.77846230156702345     // im
            }, { 0.36840360653767723,  // re
              -0.77529735957591572     // im
            }, { 0.36451453236520936,  // re
              -0.7721128288177781      // im
            }, { 0.36064151445376524,  // re
              -0.7689087897533915      // im
            }, { 0.3567846506595348,   // re
              -0.76568532333643646     // im
            }, { 0.35294403843055577,  // re
              -0.76244251101144789     // im
            }, { 0.34911977480425149,  // re
              -0.75918043471175656     // im
            }, { 0.34531195640497947,  // re
              -0.75589917685741959     // im
            }, { 0.34152067944159004,  // re
              -0.752598820353138       // im
            }, { 0.33774603970499517,  // re
              -0.74927944858616136     // im
            }, { 0.33398813256574844,  // re
              -0.74594114542418222     // im
            }, { 0.33024705297163548,  // re
              -0.7425839952132155      // im
            }, { 0.326522895445275,    // re
              -0.73920808277546857     // im
            }, { 0.32281575408173013,  // re
              -0.73581349340719771     // im
            }, { 0.31912572254613181,  // re
              -0.73240031287655316     // im
            }, { 0.31545289407131138,  // re
              -0.72896862742141155     // im
            }, { 0.31179736145544557,  // re
              -0.72551852374719794     // im
            }, { 0.30815921705971139,  // re
              -0.72205008902469392     // im
            }, { 0.3045385528059531,   // re
              -0.71856341088783671     // im
            }, { 0.30093546017435913,  // re
              -0.71505857743150314     // im
            }, { 0.29735003020115092,  // re
              -0.71153567720928534     // im
            }, { 0.29378235347628268,  // re
              -0.70799479923125275     // im
            }, { 0.29023252014115308,  // re
              -0.70443603296170287     // im
            }, { 0.28670061988632711,  // re
              -0.7008594683169016      // im
            }, { 0.28318674194927018,  // re
              -0.69726519566281076     // im
            }, { 0.27969097511209307,  // re
              -0.69365330581280493     // im
            }, { 0.27621340769930958,  // re
              -0.69002389002537734     // im
            }, { 0.27275412757560413,  // re
              -0.686377040001834       // im
            }, { 0.26931322214361209,  // re
              -0.68271284788397646     // im
            }, { 0.26589077834171138,  // re
              -0.67903140625177394     // im
            }, { 0.26248688264182607,  // re
              -0.67533280812102436     // im
            }, { 0.2591016210472411,   // re
              -0.671617146941004       // im
            }, { 0.25573507909043003,  // re
              -0.66788451659210635     // im
            }, { 0.25238734183089306,  // re
              -0.66413501138347009     // im
            }, { 0.2490584938530086,   // re
              -0.66036872605059682     // im
            }, { 0.24574861926389613,  // re
              -0.65658575575295641     // im
            }, { 0.24245780169129061,  // re
              -0.65278619607158372     // im
            }, { 0.23918612428143016,  // re
              -0.648970143006663       // im
            }, { 0.23593366969695484,  // re
              -0.64513769297510271     // im
            }, { 0.232700520114818,    // re
              -0.641288942808099       // im
            }, { 0.22948675722421075,  // re
              -0.63742398974868963     // im
            }, { 0.22629246222449695,  // re
              -0.63354293144929685     // im
            }, { 0.22311771582316242,  // re
              -0.62964586596926        // im
            }, { 0.21996259823377529,  // re
              -0.62573289177235791     // im
            }, { 0.2168271891739596,   // re
              -0.62180410772432115     // im
            }, { 0.21371156786338108,  // re
              -0.61785961309033433     // im
            }, { 0.21061581302174537,  // re
              -0.61389950753252764     // im
            }, { 0.2075400028668094,   // re
              -0.60992389110745915     // im
            }, { 0.204484215112405,    // re
              -0.60593286426358628     // im
            }, { 0.20144852696647508,  // re
              -0.60192652783872846     // im
            }, { 0.19843301512912337,  // re
              -0.59790498305751882     // im
            }, { 0.19543775579067635,  // re
              -0.5938683315288471      // im
            }, { 0.19246282462975794,  // re
              -0.589816675243292       // im
            }, { 0.18950829681137771,  // re
              -0.58575011657054432     // im
            }, { 0.18657424698503167,  // re
              -0.58166875825682074     // im
            }, { 0.18366074928281606,  // re
              -0.57757270342226752     // im
            }, { 0.18076787731755439,  // re
              -0.5734620555583555      // im
            }, { 0.17789570418093759,  // re
              -0.56933691852526447     // im
            }, { 0.17504430244167735,  // re
              -0.56519739654925982     // im
            }, { 0.17221374414367208,  // re
              -0.56104359422005878     // im
            }, { 0.16940410080418733,  // re
              -0.556875616488188       // im
            }, { 0.16661544341204848,  // re
              -0.55269356866233155     // im
            }, { 0.16384784242584693,  // re
              -0.54849755640667042     // im
            }, { 0.16110136777216022,  // re
              -0.544287685738213       // im
            }, { 0.15837608884378529,  // re
              -0.54006406302411569     // im
            }, { 0.15567207449798492,  // re
              -0.53582679497899666     // im
            }, { 0.152989393054748,    // re
              -0.5315759886622381      // im
            }, { 0.1503281122950636,   // re
              -0.52731175147528242     // im
            }, { 0.14768829945920825,  // re
              -0.523034191158918       // im
            }, { 0.14507002124504675,  // re
              -0.51874341579055749     // im
            }, { 0.14247334380634769,  // re
              -0.51443953378150642     // im
            }, { 0.13989833275111141,  // re
              -0.51012265387422473     // im
            }, { 0.1373450531399123,   // re
              -0.50579288513957887     // im
            }, { 0.13481356948425538,  // re
              -0.50145033697408625     // im
            }, { 0.13230394574494608,  // re
              -0.49709511909715082     // im
            }, { 0.12981624533047431,  // re
              -0.49272734154829156     // im
            }, { 0.12735053109541228,  // re
              -0.48834711468436154     // im
            }, { 0.12490686533882633,  // re
              -0.48395454917675995     // im
            }, { 0.12248530980270311,  // re
              -0.47954975600863581     // im
            }, { 0.12008592567038956,  // re
              -0.47513284647208381     // im
            }, { 0.11770877356504672,  // re
              -0.47070393216533252     // im
            }, { 0.11535391354811841,  // re
              -0.46626312498992462     // im
            }, { 0.11302140511781356,  // re
              -0.4618105371478895      // im
            }, { 0.11071130720760292,  // re
              -0.45734628113890857     // im
            }, { 0.10842367818472998,  // re
              -0.45287046975747269     // im
            }, { 0.10615857584873623,  // re
              -0.44838321609003223     // im
            }, { 0.1039160574300011,   // re
              -0.44388463351214        // im
            }, { 0.10169617958829547,  // re
              -0.4393748356855865      // im
            }, { 0.099498998411350681, // re
              -0.43485393655552829     // im
            }, { 0.097324569413440809, // re
              -0.43032205034760879     // im
            }, { 0.095172947533980423, // re
              -0.42577929156507266     // im
            }, { 0.093044187136136491, // re
              -0.42122577498587221     // im
            }, { 0.090938342005454587, // re
              -0.41666161565976789     // im
            }, { 0.088855465348500084, // re
              -0.41208692890542109     // im
            }, { 0.0867956097915138,   // re
              -0.40750183030748072     // im
            }, { 0.084758827379082469, // re
              -0.40290643571366264     // im
            }, { 0.082745169572823518, // re
              -0.39830086123182279     // im
            }, { 0.080754687250085166, // re
              -0.39368522322702343     // im
            }, { 0.078787430702660588, // re
              -0.38905963831859325     // im
            }, { 0.076843449635517369, // re
              -0.38442422337718063     // im
            }, { 0.074922793165541957, // re
              -0.37977909552180106     // im
            }, { 0.0730255098202981,   // re
              -0.3751243721168776      // im
            }, { 0.071151647536801144, // re
              -0.3704601707692759      // im
            }, { 0.069301253660306816, // re
              -0.36578660932533252     // im
            }, { 0.067474374943114923, // re
              -0.36110380586787744     // im
            }, { 0.065671057543387978, // re
              -0.3564118787132507      // im
            }, { 0.063891347023985134, // re
              -0.35171094640831274     // im
            }, { 0.0621352883513111,   // re
              -0.34700112772744951     // im
            }, { 0.060402925894179726, // re
              -0.34228254166957117     // im
            }, { 0.058694303422693106, // re
              -0.33755530745510576     // im
            }, { 0.057009464107135477, // re
              -0.33281954452298662     // im
            }, { 0.055348450516883196, // re
              -0.32807537252763497     // im
            }, { 0.053711304619328049, // re
              -0.32332291133593644     // im
            }, { 0.052098067778817869, // re
              -0.31856228102421275     // im
            }, { 0.050508780755611049, // re
              -0.31379360187518746     // im
            }, { 0.048943483704846469, // re
              -0.3090169943749474      // im
            }, { 0.0474022161755292,   // re
              -0.30423257920989805     // im
            }, { 0.045885017109531523, // re
              -0.29944047726371431     // im
            }, { 0.044391924840608277, // re
              -0.29464080961428657     // im
            }, { 0.042922977093428849, // re
              -0.289833697530661       // im
            }, { 0.041478210982624164, // re
              -0.28501926246997611     // im
            }, { 0.04005766301184821,  // re
              -0.28019762607439358     // im
            }, { 0.038661369072856666, // re
              -0.27536891016802489     // im
            }, { 0.037289364444599404, // re
              -0.27053323675385371     // im
            }, { 0.035941683792329204, // re
              -0.26569072801065263     // im
            }, { 0.034618361166726119, // re
              -0.26084150628989694     // im
            }, { 0.033319430003037054, // re
              -0.25598569411267269     // im
            }, { 0.032044923120230884, // re
              -0.25112341416658135     // im
            }, { 0.030794872720169564, // re
              -0.24625478930263997     // im
            }, { 0.029569310386793779, // re
              -0.24137994253217704     // im
            }, { 0.028368267085326027, // re
              -0.23649899702372468     // im
            }, { 0.027191773161487354, // re
              -0.23161207609990644     // im
            }, { 0.026039858340730748, // re
              -0.22671930323432157     // im
            }, { 0.024912551727490739, // re
              -0.2218208020484253      // im
            }, { 0.023809881804447319, // re
              -0.21691669630840529     // im
            }, { 0.022731876431806519, // re
              -0.21200710992205465     // im
            }, { 0.021678562846596638, // re
              -0.20709216693564123     // im
            }, { 0.020649967661980018, // re
              -0.2021719915307735      // im
            }, { 0.019646116866580354, // re
              -0.19724670802126285     // im
            }, { 0.01866703582382645,  // re
              -0.19231644084998278     // im
            }, { 0.017712749271311279, // re
              -0.1873813145857246      // im
            }, { 0.016783281320166821, // re
              -0.18244145392005021     // im
            }, { 0.015878655454454882, // re
              -0.17749698366414141     // im
            }, { 0.014998894530573903, // re
              -0.17254802874564659     // im
            }, { 0.01414402077668131,  // re
              -0.16759471420552424     // im
            }, { 0.013314055792131962, // re
              -0.16263716519488358     // im
            }, { 0.012509020546932481, // re
              -0.15767550697182262     // im
            }, { 0.011728935381211225, // re
              -0.15270986489826319     // im
            }, { 0.010973820004704704, // re
              -0.14774036443678365     // im
            }, { 0.010243693496259088, // re
              -0.14276713114744893     // im
            }, { 0.0095385743033488124,// re
              -0.13779029068463808     // im
            }, { 0.0088584802416097341,// re
              -0.13280996879386942     // im
            }, { 0.00820342849438982,  // re
              -0.12782629130862361     // im
            }, { 0.0075734356123141611,// re
              -0.1228393841471641      // im
            }, { 0.0069685175128675336,// re
              -0.11784937330935585     // im
            }, { 0.006388689479991605, // re
              -0.11285638487348168     // im
            }, { 0.0058339661636992446,// re
              -0.10786054499305682     // im
            }, { 0.0053043615797040422,// re
              -0.10286197989364146     // im
            }, { 0.0047998891090665907,// re
              -0.097860815869651535    // im
            }, { 0.0043205614978558682,// re
              -0.092857179281167823    // im
            }, { 0.0038663908568274952,// re
              -0.087851196550743166    // im
            }, { 0.0034373886611179794,// re
              -0.082842994160208391    // im
            }, { 0.0030335657499540591,// re
              -0.077832698647476523    // im
            }, { 0.0026549323263798108,// re
              -0.072820436603345709    // im
            }, { 0.0023014979569978555,// re
              -0.067806334668300758    // im
            }, { 0.001973271571728441, // re
              -0.062790519529313374    // im
            }, { 0.0016702614635834,   // re
              -0.057773117916641338    // im
            }, { 0.0013924752884568736,// re
              -0.052754256600626472    // im
            }, { 0.0011399200649314656,// re
              -0.047734062388491642    // im
            }, { 0.00091260217410127353,// re
              -0.042712662121136877    // im
            }, { 0.00071052735941079526,// re
              -0.037690182669934541    // im
            }, { 0.00053370072650915645,// re
              -0.032666750933523794    // im
            }, { 0.000382126743121991, // re
              -0.027642493834604379    // im
            }, { 0.0002558092389377542,// re
              -0.022617538316729753    // im
            }, { 0.00015475140551146627,// re
              -0.017592011341099723    // im
            }, { 7.895579618388826E-5, // re
              -0.012566039883352606    // im
            }, { 2.8424326017018053E-5,// re
              -0.0075397509303570913   // im
            }, { 3.15827174590666E-6,  // re
              -0.0025132714770037265   // im
            }, { 3.15827174590666E-6,  // re
              0.0025132714770037265    // im
            }, { 2.8424326017018053E-5,// re
              0.0075397509303570913    // im
            }, { 7.895579618388826E-5, // re
              0.012566039883352606     // im
            }, { 0.00015475140551146627,// re
              0.017592011341099723     // im
            }, { 0.0002558092389377542,// re
              0.022617538316729753     // im
            }, { 0.000382126743121991, // re
              0.027642493834604379     // im
            }, { 0.00053370072650915645,// re
              0.032666750933523794     // im
            }, { 0.00071052735941079526,// re
              0.037690182669934541     // im
            }, { 0.00091260217410127353,// re
              0.042712662121136877     // im
            }, { 0.0011399200649314656,// re
              0.047734062388491642     // im
            }, { 0.0013924752884568736,// re
              0.052754256600626472     // im
            }, { 0.0016702614635834,   // re
              0.057773117916641338     // im
            }, { 0.001973271571728441, // re
              0.062790519529313374     // im
            }, { 0.0023014979569978555,// re
              0.067806334668300758     // im
            }, { 0.0026549323263798108,// re
              0.072820436603345709     // im
            }, { 0.0030335657499540591,// re
              0.077832698647476523     // im
            }, { 0.0034373886611179794,// re
              0.082842994160208391     // im
            }, { 0.0038663908568274952,// re
              0.087851196550743166     // im
            }, { 0.0043205614978558682,// re
              0.092857179281167823     // im
            }, { 0.0047998891090665907,// re
              0.097860815869651535     // im
            }, { 0.0053043615797040422,// re
              0.10286197989364146      // im
            }, { 0.0058339661636992446,// re
              0.10786054499305682      // im
            }, { 0.006388689479991605, // re
              0.11285638487348168      // im
            }, { 0.0069685175128675336,// re
              0.11784937330935585      // im
            }, { 0.0075734356123141611,// re
              0.1228393841471641       // im
            }, { 0.00820342849438982,  // re
              0.12782629130862361      // im
            }, { 0.0088584802416097341,// re
              0.13280996879386942      // im
            }, { 0.0095385743033488124,// re
              0.13779029068463808      // im
            }, { 0.010243693496259088, // re
              0.14276713114744893      // im
            }, { 0.010973820004704704, // re
              0.14774036443678365      // im
            }, { 0.011728935381211225, // re
              0.15270986489826319      // im
            }, { 0.012509020546932481, // re
              0.15767550697182262      // im
            }, { 0.013314055792131962, // re
              0.16263716519488358      // im
            }, { 0.01414402077668131,  // re
              0.16759471420552424      // im
            }, { 0.014998894530573903, // re
              0.17254802874564659      // im
            }, { 0.015878655454454882, // re
              0.17749698366414141      // im
            }, { 0.016783281320166821, // re
              0.18244145392005021      // im
            }, { 0.017712749271311279, // re
              0.1873813145857246       // im
            }, { 0.01866703582382645,  // re
              0.19231644084998278      // im
            }, { 0.019646116866580354, // re
              0.19724670802126285      // im
            }, { 0.020649967661980018, // re
              0.2021719915307735       // im
            }, { 0.021678562846596638, // re
              0.20709216693564123      // im
            }, { 0.022731876431806519, // re
              0.21200710992205465      // im
            }, { 0.023809881804447319, // re
              0.21691669630840529      // im
            }, { 0.024912551727490739, // re
              0.2218208020484253       // im
            }, { 0.026039858340730748, // re
              0.22671930323432157      // im
            }, { 0.027191773161487354, // re
              0.23161207609990644      // im
            }, { 0.028368267085326027, // re
              0.23649899702372468      // im
            }, { 0.029569310386793779, // re
              0.24137994253217704      // im
            }, { 0.030794872720169564, // re
              0.24625478930263997      // im
            }, { 0.032044923120230884, // re
              0.25112341416658135      // im
            }, { 0.033319430003037054, // re
              0.25598569411267269      // im
            }, { 0.034618361166726119, // re
              0.26084150628989694      // im
            }, { 0.035941683792329204, // re
              0.26569072801065263      // im
            }, { 0.037289364444599404, // re
              0.27053323675385371      // im
            }, { 0.038661369072856666, // re
              0.27536891016802489      // im
            }, { 0.04005766301184821,  // re
              0.28019762607439358      // im
            }, { 0.041478210982624164, // re
              0.28501926246997611      // im
            }, { 0.042922977093428849, // re
              0.289833697530661        // im
            }, { 0.044391924840608277, // re
              0.29464080961428657      // im
            }, { 0.045885017109531523, // re
              0.29944047726371431      // im
            }, { 0.0474022161755292,   // re
              0.30423257920989805      // im
            }, { 0.048943483704846469, // re
              0.3090169943749474       // im
            }, { 0.050508780755611049, // re
              0.31379360187518746      // im
            }, { 0.052098067778817869, // re
              0.31856228102421275      // im
            }, { 0.053711304619328049, // re
              0.32332291133593644      // im
            }, { 0.055348450516883196, // re
              0.32807537252763497      // im
            }, { 0.057009464107135477, // re
              0.33281954452298662      // im
            }, { 0.058694303422693106, // re
              0.33755530745510576      // im
            }, { 0.060402925894179726, // re
              0.34228254166957117      // im
            }, { 0.0621352883513111,   // re
              0.34700112772744951      // im
            }, { 0.063891347023985134, // re
              0.35171094640831274      // im
            }, { 0.065671057543387978, // re
              0.3564118787132507       // im
            }, { 0.067474374943114923, // re
              0.36110380586787744      // im
            }, { 0.069301253660306816, // re
              0.36578660932533252      // im
            }, { 0.071151647536801144, // re
              0.3704601707692759       // im
            }, { 0.0730255098202981,   // re
              0.3751243721168776       // im
            }, { 0.074922793165541957, // re
              0.37977909552180106      // im
            }, { 0.076843449635517369, // re
              0.38442422337718063      // im
            }, { 0.078787430702660588, // re
              0.38905963831859325      // im
            }, { 0.080754687250085166, // re
              0.39368522322702343      // im
            }, { 0.082745169572823518, // re
              0.39830086123182279      // im
            }, { 0.084758827379082469, // re
              0.40290643571366264      // im
            }, { 0.0867956097915138,   // re
              0.40750183030748072      // im
            }, { 0.088855465348500084, // re
              0.41208692890542109      // im
            }, { 0.090938342005454587, // re
              0.41666161565976789      // im
            }, { 0.093044187136136491, // re
              0.42122577498587221      // im
            }, { 0.095172947533980423, // re
              0.42577929156507266      // im
            }, { 0.097324569413440809, // re
              0.43032205034760879      // im
            }, { 0.099498998411350681, // re
              0.43485393655552829      // im
            }, { 0.10169617958829547,  // re
              0.4393748356855865       // im
            }, { 0.1039160574300011,   // re
              0.44388463351214         // im
            }, { 0.10615857584873623,  // re
              0.44838321609003223      // im
            }, { 0.10842367818472998,  // re
              0.45287046975747269      // im
            }, { 0.11071130720760292,  // re
              0.45734628113890857      // im
            }, { 0.11302140511781356,  // re
              0.4618105371478895       // im
            }, { 0.11535391354811841,  // re
              0.46626312498992462      // im
            }, { 0.11770877356504672,  // re
              0.47070393216533252      // im
            }, { 0.12008592567038956,  // re
              0.47513284647208381      // im
            }, { 0.12248530980270311,  // re
              0.47954975600863581      // im
            }, { 0.12490686533882633,  // re
              0.48395454917675995      // im
            }, { 0.12735053109541228,  // re
              0.48834711468436154      // im
            }, { 0.12981624533047431,  // re
              0.49272734154829156      // im
            }, { 0.13230394574494608,  // re
              0.49709511909715082      // im
            }, { 0.13481356948425538,  // re
              0.50145033697408625      // im
            }, { 0.1373450531399123,   // re
              0.50579288513957887      // im
            }, { 0.13989833275111141,  // re
              0.51012265387422473      // im
            }, { 0.14247334380634769,  // re
              0.51443953378150642      // im
            }, { 0.14507002124504675,  // re
              0.51874341579055749      // im
            }, { 0.14768829945920825,  // re
              0.523034191158918        // im
            }, { 0.1503281122950636,   // re
              0.52731175147528242      // im
            }, { 0.152989393054748,    // re
              0.5315759886622381       // im
            }, { 0.15567207449798492,  // re
              0.53582679497899666      // im
            }, { 0.15837608884378529,  // re
              0.54006406302411569      // im
            }, { 0.16110136777216022,  // re
              0.544287685738213        // im
            }, { 0.16384784242584693,  // re
              0.54849755640667042      // im
            }, { 0.16661544341204848,  // re
              0.55269356866233155      // im
            }, { 0.16940410080418733,  // re
              0.556875616488188        // im
            }, { 0.17221374414367208,  // re
              0.56104359422005878      // im
            }, { 0.17504430244167735,  // re
              0.56519739654925982      // im
            }, { 0.17789570418093759,  // re
              0.56933691852526447      // im
            }, { 0.18076787731755439,  // re
              0.5734620555583555       // im
            }, { 0.18366074928281606,  // re
              0.57757270342226752      // im
            }, { 0.18657424698503167,  // re
              0.58166875825682074      // im
            }, { 0.18950829681137771,  // re
              0.58575011657054432      // im
            }, { 0.19246282462975794,  // re
              0.589816675243292        // im
            }, { 0.19543775579067635,  // re
              0.5938683315288471       // im
            }, { 0.19843301512912337,  // re
              0.59790498305751882      // im
            }, { 0.20144852696647508,  // re
              0.60192652783872846      // im
            }, { 0.204484215112405,    // re
              0.60593286426358628      // im
            }, { 0.2075400028668094,   // re
              0.60992389110745915      // im
            }, { 0.21061581302174537,  // re
              0.61389950753252764      // im
            }, { 0.21371156786338108,  // re
              0.61785961309033433      // im
            }, { 0.2168271891739596,   // re
              0.62180410772432115      // im
            }, { 0.21996259823377529,  // re
              0.62573289177235791      // im
            }, { 0.22311771582316242,  // re
              0.62964586596926         // im
            }, { 0.22629246222449695,  // re
              0.63354293144929685      // im
            }, { 0.22948675722421075,  // re
              0.63742398974868963      // im
            }, { 0.232700520114818,    // re
              0.641288942808099        // im
            }, { 0.23593366969695484,  // re
              0.64513769297510271      // im
            }, { 0.23918612428143016,  // re
              0.648970143006663        // im
            }, { 0.24245780169129061,  // re
              0.65278619607158372      // im
            }, { 0.24574861926389613,  // re
              0.65658575575295641      // im
            }, { 0.2490584938530086,   // re
              0.66036872605059682      // im
            }, { 0.25238734183089306,  // re
              0.66413501138347009      // im
            }, { 0.25573507909043003,  // re
              0.66788451659210635      // im
            }, { 0.2591016210472411,   // re
              0.671617146941004        // im
            }, { 0.26248688264182607,  // re
              0.67533280812102436      // im
            }, { 0.26589077834171138,  // re
              0.67903140625177394      // im
            }, { 0.26931322214361209,  // re
              0.68271284788397646      // im
            }, { 0.27275412757560413,  // re
              0.686377040001834        // im
            }, { 0.27621340769930958,  // re
              0.69002389002537734      // im
            }, { 0.27969097511209307,  // re
              0.69365330581280493      // im
            }, { 0.28318674194927018,  // re
              0.69726519566281076      // im
            }, { 0.28670061988632711,  // re
              0.7008594683169016       // im
            }, { 0.29023252014115308,  // re
              0.70443603296170287      // im
            }, { 0.29378235347628268,  // re
              0.70799479923125275      // im
            }, { 0.29735003020115092,  // re
              0.71153567720928534      // im
            }, { 0.30093546017435913,  // re
              0.71505857743150314      // im
            }, { 0.3045385528059531,   // re
              0.71856341088783671      // im
            }, { 0.30815921705971139,  // re
              0.72205008902469392      // im
            }, { 0.31179736145544557,  // re
              0.72551852374719794      // im
            }, { 0.31545289407131138,  // re
              0.72896862742141155      // im
            }, { 0.31912572254613181,  // re
              0.73240031287655316      // im
            }, { 0.32281575408173013,  // re
              0.73581349340719771      // im
            }, { 0.326522895445275,    // re
              0.73920808277546857      // im
            }, { 0.33024705297163548,  // re
              0.7425839952132155       // im
            }, { 0.33398813256574844,  // re
              0.74594114542418222      // im
            }, { 0.33774603970499517,  // re
              0.74927944858616136      // im
            }, { 0.34152067944159004,  // re
              0.752598820353138        // im
            }, { 0.34531195640497947,  // re
              0.75589917685741959      // im
            }, { 0.34911977480425149,  // re
              0.75918043471175656      // im
            }, { 0.35294403843055577,  // re
              0.76244251101144789      // im
            }, { 0.3567846506595348,   // re
              0.76568532333643646      // im
            }, { 0.36064151445376524,  // re
              0.7689087897533915       // im
            }, { 0.36451453236520936,  // re
              0.7721128288177781       // im
            }, { 0.36840360653767723,  // re
              0.77529735957591572      // im
            }, { 0.37230863870929953,  // re
              0.77846230156702345      // im
            }, { 0.37622953021500982,  // re
              0.78160757482525245      // im
            }, { 0.38016618198903773,  // re
              0.784733099881707        // im
            }, { 0.38411849456741154,  // re
              0.787838797766452        // im
            }, { 0.38808636809047203,  // re
              0.7909245900105083       // im
            }, { 0.39206970230539462,  // re
              0.79399039864783538      // im
            }, { 0.39606839656872306,  // re
              0.797036146217301        // im
            }, { 0.400082349848912,    // re
              0.800061755764639        // im
            }, { 0.40411146072887971,  // re
              0.80306715084439273      // im
            }, { 0.40815562740857048,  // re
              0.80605225552184723      // im
            }, { 0.41221474770752686,  // re
              0.80901699437494745      // im
            }, { 0.41628871906747111,  // re
              0.81196129249620419      // im
            }, { 0.42037743855489673,  // re
              0.81488507549458622      // im
            }, { 0.42448080286366896,  // re
              0.81778826949740047      // im
            }, { 0.42859870831763491,  // re
              0.820670801152158        // im
            }, { 0.43273105087324348,  // re
              0.82353259762842745      // im
            }, { 0.43687772612217357,  // re
              0.82637358661967553      // im
            }, { 0.44103862929397242,  // re
              0.82919369634509332      // im
            }, { 0.4452136552587026,   // re
              0.83199285555141056      // im
            }, { 0.44940269852959847,  // re
              0.83477099351469541      // im
            }, { 0.45360565326573088,  // re
              0.83752804004214165      // im
            }, { 0.45782241327468232,  // re
              0.8402639254738421       // im
            }, { 0.46205287201522871,  // re
              0.84297858068454867      // im
            }, { 0.46629692260003264,  // re
              0.84567193708541877      // im
            }, { 0.47055445779834282,  // re
              0.84834392662574842      // im
            }, { 0.47482537003870429,  // re
              0.85099448179469184      // im
            }, { 0.47910955141167577,  // re
              0.85362353562296667      // im
            }, { 0.48340689367255618,  // re
              0.85623102168454646      // im
            }, { 0.48771728824412,     // re
              0.85881687409833884      // im
            }, { 0.49204062621935996,  // re
              0.86138102752984991      // im
            }, { 0.4963767983642392,   // re
              0.86392341719283527      // im
            }, { 0.50072569512045084,  // re
              0.866443978850937        // im
            }, { 0.50508720660818673,  // re
              0.86894264881930638      // im
            }, { 0.50946122262891258,  // re
              0.87141936396621267      // im
            }, { 0.51384763266815336,  // re
              0.87387406171463933      // im
            }, { 0.51824632589828468,  // re
              0.87630668004386358      // im
            }, { 0.522657191181334,    // re
              0.87871715749102486      // im
            }, { 0.52708011707178748,  // re
              0.88110543315267653      // im
            }, { 0.53151499181940665,  // re
              0.88347144668632582      // im
            }, { 0.53596170337205162,  // re
              0.88581513831195746      // im
            }, { 0.54042013937851219,  // re
              0.88813644881354459      // im
            }, { 0.5448901871913463,   // re
              0.89043531954054478      // im
            }, { 0.54937173386972671,  // re
              0.89271169240938231      // im
            }, { 0.55386466618229424,  // re
              0.89496550990491486      // im
            }, { 0.55836887061001872,  // re
              0.89719671508188747      // im
            }, { 0.56288423334906712,  // re
              0.89940525156637108      // im
            }, { 0.56741064031367916,  // re
              0.90159106355718666      // im
            }, { 0.57194797713904966,  // re
              0.90375409582731547      // im
            }, { 0.57649612918421811,  // re
              0.90589429372529418      // im
            }, { 0.581054981534965,    // re
              0.90801160317659568      // im
            }, { 0.58562441900671591,  // re
              0.91010597068499566      // im
            }, { 0.59020432614745078,  // re
              0.91217734333392375      // im
            }, { 0.594794587240622,    // re
              0.914225668787801        // im
            }, { 0.599395086308077,    // re
              0.91625089529336179      // im
            }, { 0.60400570711299006,  // re
              0.91825297168096165      // im
            }, { 0.60862633316279768,  // re
              0.92023184736587038      // im
            }, { 0.61325684771214228,  // re
              0.92218747234954934      // im
            }, { 0.61789713376582267,  // re
              0.92411979722091575      // im
            }, { 0.62254707408174936,  // re
              0.92602877315759013      // im
            }, { 0.62720655117390678,  // re
              0.92791435192713068      // im
            }, { 0.63187544731532208,  // re
              0.92977648588825146      // im
            }, { 0.63655364454103935,  // re
              0.931615127992026        // im
            }, { 0.64124102465110044,  // re
              0.93343023178307638      // im
            }, { 0.645937469213531,    // re
              0.935221751400747        // im
            }, { 0.650642859567333,    // re
              0.936989641580263        // im
            }, { 0.65535707682548294,  // re
              0.93873385765387407      // im
            }, { 0.66008000187793558,  // re
              0.94045435555198309      // im
            }, { 0.66481151539463335,  // re
              0.94215109180425927      // im
            }, { 0.6695514978285213,   // re
              0.94382402354073736      // im
            }, { 0.67429982941856792,  // re
              0.94547310849289945      // im
            }, { 0.67905639019279052,  // re
              0.94709830499474434      // im
            }, { 0.683821059971287,    // re
              0.94869957198383914      // im
            }, { 0.68859371836927186,  // re
              0.95027686900235742      // im
            }, { 0.69337424480011811,  // re
              0.95183015619810141      // im
            }, { 0.698162518478404,    // re
              0.95335939432550842      // im
            }, { 0.70295841842296514,  // re
              0.954864544746643        // im
            }, { 0.70776182345995009,  // re
              0.95634556943217275      // im
            }, { 0.71257261222588364,  // re
              0.95780243096232942      // im
            }, { 0.71739066317073152,  // re
              0.95923509252785422      // im
            }, { 0.7222158545609727,   // re
              0.96064351793092806      // im
            }, { 0.72704806448267478,  // re
              0.96202767158608593      // im
            }, { 0.73188717084457378,  // re
              0.96338751852111582      // im
            }, { 0.73673305138115974,  // re
              0.96472302437794288      // im
            }, { 0.74158558365576532,  // re
              0.966034155413497        // im
            }, { 0.74644464506365948,  // re
              0.96732087850056581      // im
            }, { 0.75131011283514515,  // re
              0.96858316112863108      // im
            }, { 0.7561818640386615,   // re
              0.96982097140469092      // im
            }, { 0.76105977558388938,  // re
              0.97103427805406473      // im
            }, { 0.76594372422486168,  // re
              0.97222305042118418      // im
            }, { 0.77083358656307732,  // re
              0.97338725847036722      // im
            }, { 0.77572923905061886,  // re
              0.97452687278657713      // im
            }, { 0.78063055799327408,  // re
              0.975641864576166        // im
            }, { 0.78553741955366163,  // re
              0.97673220566760155      // im
            }, { 0.79044969975435941,  // re
              0.97779786851217976      // im
            }, { 0.79536727448103739,  // re
              0.97883882618472018      // im
            }, { 0.800290019485593,    // re
              0.97985505238424686      // im
            }, { 0.80521781038929108,  // re
              0.98084652143465234      // im
            }, { 0.81015052268590615,  // re
              0.98181320828534657      // im
            }, { 0.81508803174486777,  // re
              0.98275508851189008      // im
            }, { 0.82003021281441024,  // re
              0.98367213831661082      // im
            }, { 0.824976941024724,    // re
              0.98456433452920533      // im
            }, { 0.8299280913911109,   // re
              0.98543165460732474      // im
            }, { 0.834883538817142,    // re
              0.98627407663714339      // im
            }, { 0.83984315809781818,  // re
              0.98709157933391345      // im
            }, { 0.844806823922734,    // re
              0.98788414204250219      // im
            }, { 0.84977441087924288,  // re
              0.98865174473791406      // im
            }, { 0.85474579345562718,  // re
              0.98939436802579617      // im
            }, { 0.859720846044268,    // re
              0.9901119931429293       // im
            }, { 0.86469944294481971,  // re
              0.99080460195770081      // im
            }, { 0.86968145836738553,  // re
              0.99147217697056356      // im
            }, { 0.87466676643569574,  // re
              0.99211470131447788      // im
            }, { 0.87965524119028848,  // re
              0.99273215875533738      // im
            }, { 0.88464675659169179,  // re
              0.99332453369237972      // im
            }, { 0.88964118652360824,  // re
              0.99389181115858027      // im
            }, { 0.89463840479610157,  // re
              0.99443397682103052      // im
            }, { 0.89963828514878508,  // re
              0.99495101698130017      // im
            }, { 0.90464070125401141,  // re
              0.99544291857578315      // im
            }, { 0.90964552672006438,  // re
              0.995909669176028        // im
            }, { 0.914652635094353,    // re
              0.99635125698905125      // im
            }, { 0.91966189986660574,  // re
              0.99676767085763607      // im
            }, { 0.92467319447206731,  // re
              0.99715890026061393      // im
            }, { 0.92968639229469618,  // re
              0.99752493531313025      // im
            }, { 0.9347013666703643,   // re
              0.9978657667668942       // im
            }, { 0.93971799089005648,  // re
              0.99818138601041273      // im
            }, { 0.94473613820307278,  // re
              0.99847178506920775      // im
            }, { 0.9497556818202304,   // re
              0.99873695660601747      // im
            }, { 0.9547764949170674,   // re
              0.99897689392098254      // im
            }, { 0.95979845063704683,  // re
              0.99919159095181442      // im
            }, { 0.96482142209476218,  // re
              0.99938104227394919      // im
            }, { 0.96984528237914325,  // re
              0.99954524310068449      // im
            }, { 0.97486990455666256,  // re
              0.99968418928329994      // im
            }, { 0.97989516167454238,  // re
              0.999797877311163        // im
            }, { 0.98492092676396292,  // re
              0.99988630431181635      // im
            }, { 0.98994707284326933,  // re
              0.99994946805105178      // im
            }, { 0.9949734729211811,   // re
              0.99998736693296575      // im
            } };

          static const creal_T reconVar2[625]{ { 1.0,// re
              1.0                      // im
            }, { 1.0050265270788188,   // re
              0.99998736693296575      // im
            }, { 1.0100529271567307,   // re
              0.99994946805105178      // im
            }, { 1.0150790732360371,   // re
              0.99988630431181635      // im
            }, { 1.0201048383254576,   // re
              0.999797877311163        // im
            }, { 1.0251300954433376,   // re
              0.99968418928329994      // im
            }, { 1.0301547176208568,   // re
              0.99954524310068449      // im
            }, { 1.0351785779052378,   // re
              0.99938104227394919      // im
            }, { 1.0402015493629533,   // re
              0.99919159095181442      // im
            }, { 1.0452235050829326,   // re
              0.99897689392098254      // im
            }, { 1.0502443181797696,   // re
              0.99873695660601747      // im
            }, { 1.0552638617969272,   // re
              0.99847178506920775      // im
            }, { 1.0602820091099434,   // re
              0.99818138601041273      // im
            }, { 1.0652986333296357,   // re
              0.9978657667668942       // im
            }, { 1.0703136077053037,   // re
              0.99752493531313025      // im
            }, { 1.0753268055279328,   // re
              0.99715890026061393      // im
            }, { 1.0803381001333943,   // re
              0.99676767085763607      // im
            }, { 1.0853473649056469,   // re
              0.99635125698905125      // im
            }, { 1.0903544732799355,   // re
              0.995909669176028        // im
            }, { 1.0953592987459886,   // re
              0.99544291857578315      // im
            }, { 1.1003617148512148,   // re
              0.99495101698130017      // im
            }, { 1.1053615952038984,   // re
              0.99443397682103052      // im
            }, { 1.1103588134763918,   // re
              0.99389181115858027      // im
            }, { 1.1153532434083082,   // re
              0.99332453369237972      // im
            }, { 1.1203447588097115,   // re
              0.99273215875533738      // im
            }, { 1.1253332335643043,   // re
              0.99211470131447788      // im
            }, { 1.1303185416326145,   // re
              0.99147217697056356      // im
            }, { 1.1353005570551802,   // re
              0.99080460195770081      // im
            }, { 1.140279153955732,    // re
              0.9901119931429293       // im
            }, { 1.1452542065443727,   // re
              0.98939436802579617      // im
            }, { 1.1502255891207571,   // re
              0.98865174473791406      // im
            }, { 1.155193176077266,    // re
              0.98788414204250219      // im
            }, { 1.1601568419021817,   // re
              0.98709157933391345      // im
            }, { 1.1651164611828579,   // re
              0.98627407663714339      // im
            }, { 1.1700719086088891,   // re
              0.98543165460732474      // im
            }, { 1.1750230589752761,   // re
              0.98456433452920533      // im
            }, { 1.1799697871855899,   // re
              0.98367213831661082      // im
            }, { 1.1849119682551321,   // re
              0.98275508851189008      // im
            }, { 1.189849477314094,    // re
              0.98181320828534657      // im
            }, { 1.1947821896107089,   // re
              0.98084652143465234      // im
            }, { 1.1997099805144069,   // re
              0.97985505238424686      // im
            }, { 1.2046327255189626,   // re
              0.97883882618472018      // im
            }, { 1.2095503002456405,   // re
              0.97779786851217976      // im
            }, { 1.2144625804463383,   // re
              0.97673220566760155      // im
            }, { 1.2193694420067258,   // re
              0.975641864576166        // im
            }, { 1.2242707609493813,   // re
              0.97452687278657713      // im
            }, { 1.2291664134369227,   // re
              0.97338725847036722      // im
            }, { 1.2340562757751383,   // re
              0.97222305042118418      // im
            }, { 1.2389402244161105,   // re
              0.97103427805406473      // im
            }, { 1.2438181359613385,   // re
              0.96982097140469092      // im
            }, { 1.2486898871648549,   // re
              0.96858316112863108      // im
            }, { 1.2535553549363405,   // re
              0.96732087850056581      // im
            }, { 1.2584144163442348,   // re
              0.966034155413497        // im
            }, { 1.2632669486188401,   // re
              0.96472302437794288      // im
            }, { 1.2681128291554262,   // re
              0.96338751852111582      // im
            }, { 1.2729519355173253,   // re
              0.96202767158608593      // im
            }, { 1.2777841454390273,   // re
              0.96064351793092806      // im
            }, { 1.2826093368292684,   // re
              0.95923509252785422      // im
            }, { 1.2874273877741165,   // re
              0.95780243096232942      // im
            }, { 1.29223817654005,     // re
              0.95634556943217275      // im
            }, { 1.2970415815770349,   // re
              0.954864544746643        // im
            }, { 1.3018374815215958,   // re
              0.95335939432550842      // im
            }, { 1.3066257551998819,   // re
              0.95183015619810141      // im
            }, { 1.3114062816307281,   // re
              0.95027686900235742      // im
            }, { 1.3161789400287129,   // re
              0.94869957198383914      // im
            }, { 1.3209436098072094,   // re
              0.94709830499474434      // im
            }, { 1.325700170581432,    // re
              0.94547310849289945      // im
            }, { 1.3304485021714787,   // re
              0.94382402354073736      // im
            }, { 1.3351884846053665,   // re
              0.94215109180425927      // im
            }, { 1.3399199981220644,   // re
              0.94045435555198309      // im
            }, { 1.3446429231745172,   // re
              0.93873385765387407      // im
            }, { 1.349357140432667,    // re
              0.936989641580263        // im
            }, { 1.3540625307864689,   // re
              0.935221751400747        // im
            }, { 1.3587589753488996,   // re
              0.93343023178307638      // im
            }, { 1.3634463554589606,   // re
              0.931615127992026        // im
            }, { 1.3681245526846779,   // re
              0.92977648588825146      // im
            }, { 1.3727934488260933,   // re
              0.92791435192713068      // im
            }, { 1.3774529259182506,   // re
              0.92602877315759013      // im
            }, { 1.3821028662341774,   // re
              0.92411979722091575      // im
            }, { 1.3867431522878577,   // re
              0.92218747234954934      // im
            }, { 1.3913736668372023,   // re
              0.92023184736587038      // im
            }, { 1.39599429288701,     // re
              0.91825297168096165      // im
            }, { 1.400604913691923,    // re
              0.91625089529336179      // im
            }, { 1.405205412759378,    // re
              0.914225668787801        // im
            }, { 1.4097956738525492,   // re
              0.91217734333392375      // im
            }, { 1.4143755809932841,   // re
              0.91010597068499566      // im
            }, { 1.418945018465035,    // re
              0.90801160317659568      // im
            }, { 1.4235038708157819,   // re
              0.90589429372529418      // im
            }, { 1.4280520228609503,   // re
              0.90375409582731547      // im
            }, { 1.4325893596863208,   // re
              0.90159106355718666      // im
            }, { 1.4371157666509329,   // re
              0.89940525156637108      // im
            }, { 1.4416311293899813,   // re
              0.89719671508188747      // im
            }, { 1.4461353338177059,   // re
              0.89496550990491486      // im
            }, { 1.4506282661302734,   // re
              0.89271169240938231      // im
            }, { 1.4551098128086537,   // re
              0.89043531954054478      // im
            }, { 1.4595798606214878,   // re
              0.88813644881354459      // im
            }, { 1.4640382966279484,   // re
              0.88581513831195746      // im
            }, { 1.4684850081805934,   // re
              0.88347144668632582      // im
            }, { 1.4729198829282124,   // re
              0.88110543315267653      // im
            }, { 1.477342808818666,    // re
              0.87871715749102486      // im
            }, { 1.4817536741017152,   // re
              0.87630668004386358      // im
            }, { 1.4861523673318466,   // re
              0.87387406171463933      // im
            }, { 1.4905387773710874,   // re
              0.87141936396621267      // im
            }, { 1.4949127933918134,   // re
              0.86894264881930638      // im
            }, { 1.4992743048795492,   // re
              0.866443978850937        // im
            }, { 1.5036232016357607,   // re
              0.86392341719283527      // im
            }, { 1.50795937378064,     // re
              0.86138102752984991      // im
            }, { 1.51228271175588,     // re
              0.85881687409833884      // im
            }, { 1.5165931063274438,   // re
              0.85623102168454646      // im
            }, { 1.5208904485883243,   // re
              0.85362353562296667      // im
            }, { 1.5251746299612958,   // re
              0.85099448179469184      // im
            }, { 1.5294455422016573,   // re
              0.84834392662574842      // im
            }, { 1.5337030773999674,   // re
              0.84567193708541877      // im
            }, { 1.5379471279847712,   // re
              0.84297858068454867      // im
            }, { 1.5421775867253178,   // re
              0.8402639254738421       // im
            }, { 1.5463943467342691,   // re
              0.83752804004214165      // im
            }, { 1.5505973014704015,   // re
              0.83477099351469541      // im
            }, { 1.5547863447412973,   // re
              0.83199285555141056      // im
            }, { 1.5589613707060277,   // re
              0.82919369634509332      // im
            }, { 1.5631222738778265,   // re
              0.82637358661967553      // im
            }, { 1.5672689491267566,   // re
              0.82353259762842745      // im
            }, { 1.5714012916823652,   // re
              0.820670801152158        // im
            }, { 1.5755191971363312,   // re
              0.81778826949740047      // im
            }, { 1.5796225614451034,   // re
              0.81488507549458622      // im
            }, { 1.5837112809325289,   // re
              0.81196129249620419      // im
            }, { 1.5877852522924731,   // re
              0.80901699437494745      // im
            }, { 1.5918443725914295,   // re
              0.80605225552184723      // im
            }, { 1.5958885392711202,   // re
              0.80306715084439273      // im
            }, { 1.5999176501510881,   // re
              0.800061755764639        // im
            }, { 1.6039316034312769,   // re
              0.797036146217301        // im
            }, { 1.6079302976946055,   // re
              0.79399039864783538      // im
            }, { 1.611913631909528,    // re
              0.7909245900105083       // im
            }, { 1.6158815054325886,   // re
              0.787838797766452        // im
            }, { 1.6198338180109624,   // re
              0.784733099881707        // im
            }, { 1.6237704697849902,   // re
              0.78160757482525245      // im
            }, { 1.6276913612907005,   // re
              0.77846230156702345      // im
            }, { 1.6315963934623228,   // re
              0.77529735957591572      // im
            }, { 1.6354854676347905,   // re
              0.7721128288177781       // im
            }, { 1.6393584855462349,   // re
              0.7689087897533915       // im
            }, { 1.6432153493404651,   // re
              0.76568532333643646      // im
            }, { 1.6470559615694442,   // re
              0.76244251101144789      // im
            }, { 1.6508802251957486,   // re
              0.75918043471175656      // im
            }, { 1.6546880435950206,   // re
              0.75589917685741959      // im
            }, { 1.6584793205584099,   // re
              0.752598820353138        // im
            }, { 1.6622539602950048,   // re
              0.74927944858616136      // im
            }, { 1.6660118674342517,   // re
              0.74594114542418222      // im
            }, { 1.6697529470283645,   // re
              0.7425839952132155       // im
            }, { 1.673477104554725,    // re
              0.73920808277546857      // im
            }, { 1.6771842459182698,   // re
              0.73581349340719771      // im
            }, { 1.6808742774538681,   // re
              0.73240031287655316      // im
            }, { 1.6845471059286887,   // re
              0.72896862742141155      // im
            }, { 1.6882026385445545,   // re
              0.72551852374719794      // im
            }, { 1.6918407829402886,   // re
              0.72205008902469392      // im
            }, { 1.695461447194047,    // re
              0.71856341088783671      // im
            }, { 1.699064539825641,    // re
              0.71505857743150314      // im
            }, { 1.7026499697988491,   // re
              0.71153567720928534      // im
            }, { 1.7062176465237173,   // re
              0.70799479923125275      // im
            }, { 1.7097674798588469,   // re
              0.70443603296170287      // im
            }, { 1.7132993801136729,   // re
              0.7008594683169016       // im
            }, { 1.7168132580507298,   // re
              0.69726519566281076      // im
            }, { 1.7203090248879069,   // re
              0.69365330581280493      // im
            }, { 1.7237865923006903,   // re
              0.69002389002537734      // im
            }, { 1.7272458724243958,   // re
              0.686377040001834        // im
            }, { 1.7306867778563879,   // re
              0.68271284788397646      // im
            }, { 1.7341092216582887,   // re
              0.67903140625177394      // im
            }, { 1.7375131173581739,   // re
              0.67533280812102436      // im
            }, { 1.740898378952759,    // re
              0.671617146941004        // im
            }, { 1.74426492090957,     // re
              0.66788451659210635      // im
            }, { 1.7476126581691069,   // re
              0.66413501138347009      // im
            }, { 1.7509415061469915,   // re
              0.66036872605059682      // im
            }, { 1.754251380736104,    // re
              0.65658575575295641      // im
            }, { 1.7575421983087094,   // re
              0.65278619607158372      // im
            }, { 1.7608138757185698,   // re
              0.648970143006663        // im
            }, { 1.764066330303045,    // re
              0.64513769297510271      // im
            }, { 1.767299479885182,    // re
              0.641288942808099        // im
            }, { 1.7705132427757893,   // re
              0.63742398974868963      // im
            }, { 1.7737075377755032,   // re
              0.63354293144929685      // im
            }, { 1.7768822841768377,   // re
              0.62964586596926         // im
            }, { 1.7800374017662248,   // re
              0.62573289177235791      // im
            }, { 1.7831728108260405,   // re
              0.62180410772432115      // im
            }, { 1.7862884321366188,   // re
              0.61785961309033433      // im
            }, { 1.7893841869782547,   // re
              0.61389950753252764      // im
            }, { 1.7924599971331907,   // re
              0.60992389110745915      // im
            }, { 1.7955157848875949,   // re
              0.60593286426358628      // im
            }, { 1.798551473033525,    // re
              0.60192652783872846      // im
            }, { 1.8015669848708766,   // re
              0.59790498305751882      // im
            }, { 1.8045622442093237,   // re
              0.5938683315288471       // im
            }, { 1.8075371753702421,   // re
              0.589816675243292        // im
            }, { 1.8104917031886223,   // re
              0.58575011657054432      // im
            }, { 1.8134257530149682,   // re
              0.58166875825682074      // im
            }, { 1.8163392507171841,   // re
              0.57757270342226752      // im
            }, { 1.8192321226824455,   // re
              0.5734620555583555       // im
            }, { 1.8221042958190625,   // re
              0.56933691852526447      // im
            }, { 1.8249556975583228,   // re
              0.56519739654925982      // im
            }, { 1.8277862558563278,   // re
              0.56104359422005878      // im
            }, { 1.8305958991958127,   // re
              0.556875616488188        // im
            }, { 1.8333845565879514,   // re
              0.55269356866233155      // im
            }, { 1.8361521575741531,   // re
              0.54849755640667042      // im
            }, { 1.8388986322278398,   // re
              0.544287685738213        // im
            }, { 1.8416239111562147,   // re
              0.54006406302411569      // im
            }, { 1.8443279255020151,   // re
              0.53582679497899666      // im
            }, { 1.8470106069452519,   // re
              0.5315759886622381       // im
            }, { 1.8496718877049365,   // re
              0.52731175147528242      // im
            }, { 1.8523117005407919,   // re
              0.523034191158918        // im
            }, { 1.8549299787549534,   // re
              0.51874341579055749      // im
            }, { 1.8575266561936523,   // re
              0.51443953378150642      // im
            }, { 1.8601016672488886,   // re
              0.51012265387422473      // im
            }, { 1.8626549468600877,   // re
              0.50579288513957887      // im
            }, { 1.8651864305157446,   // re
              0.50145033697408625      // im
            }, { 1.8676960542550538,   // re
              0.49709511909715082      // im
            }, { 1.8701837546695257,   // re
              0.49272734154829156      // im
            }, { 1.8726494689045876,   // re
              0.48834711468436154      // im
            }, { 1.8750931346611737,   // re
              0.48395454917675995      // im
            }, { 1.8775146901972968,   // re
              0.47954975600863581      // im
            }, { 1.8799140743296103,   // re
              0.47513284647208381      // im
            }, { 1.8822912264349534,   // re
              0.47070393216533252      // im
            }, { 1.8846460864518817,   // re
              0.46626312498992462      // im
            }, { 1.8869785948821864,   // re
              0.4618105371478895       // im
            }, { 1.8892886927923971,   // re
              0.45734628113890857      // im
            }, { 1.8915763218152701,   // re
              0.45287046975747269      // im
            }, { 1.8938414241512638,   // re
              0.44838321609003223      // im
            }, { 1.8960839425699989,   // re
              0.44388463351214         // im
            }, { 1.8983038204117046,   // re
              0.4393748356855865       // im
            }, { 1.9005010015886494,   // re
              0.43485393655552829      // im
            }, { 1.9026754305865592,   // re
              0.43032205034760879      // im
            }, { 1.9048270524660196,   // re
              0.42577929156507266      // im
            }, { 1.9069558128638635,   // re
              0.42122577498587221      // im
            }, { 1.9090616579945454,   // re
              0.41666161565976789      // im
            }, { 1.9111445346515,      // re
              0.41208692890542109      // im
            }, { 1.9132043902084863,   // re
              0.40750183030748072      // im
            }, { 1.9152411726209175,   // re
              0.40290643571366264      // im
            }, { 1.9172548304271766,   // re
              0.39830086123182279      // im
            }, { 1.9192453127499149,   // re
              0.39368522322702343      // im
            }, { 1.9212125692973394,   // re
              0.38905963831859325      // im
            }, { 1.9231565503644825,   // re
              0.38442422337718063      // im
            }, { 1.9250772068344579,   // re
              0.37977909552180106      // im
            }, { 1.9269744901797019,   // re
              0.3751243721168776       // im
            }, { 1.928848352463199,    // re
              0.3704601707692759       // im
            }, { 1.9306987463396932,   // re
              0.36578660932533252      // im
            }, { 1.932525625056885,    // re
              0.36110380586787744      // im
            }, { 1.9343289424566121,   // re
              0.3564118787132507       // im
            }, { 1.936108652976015,    // re
              0.35171094640831274      // im
            }, { 1.9378647116486889,   // re
              0.34700112772744951      // im
            }, { 1.9395970741058202,   // re
              0.34228254166957117      // im
            }, { 1.9413056965773068,   // re
              0.33755530745510576      // im
            }, { 1.9429905358928645,   // re
              0.33281954452298662      // im
            }, { 1.9446515494831167,   // re
              0.32807537252763497      // im
            }, { 1.946288695380672,    // re
              0.32332291133593644      // im
            }, { 1.9479019322211821,   // re
              0.31856228102421275      // im
            }, { 1.949491219244389,    // re
              0.31379360187518746      // im
            }, { 1.9510565162951536,   // re
              0.3090169943749474       // im
            }, { 1.9525977838244708,   // re
              0.30423257920989805      // im
            }, { 1.9541149828904685,   // re
              0.29944047726371431      // im
            }, { 1.9556080751593918,   // re
              0.29464080961428657      // im
            }, { 1.9570770229065713,   // re
              0.289833697530661        // im
            }, { 1.9585217890173758,   // re
              0.28501926246997611      // im
            }, { 1.9599423369881519,   // re
              0.28019762607439358      // im
            }, { 1.9613386309271434,   // re
              0.27536891016802489      // im
            }, { 1.9627106355554007,   // re
              0.27053323675385371      // im
            }, { 1.9640583162076708,   // re
              0.26569072801065263      // im
            }, { 1.9653816388332739,   // re
              0.26084150628989694      // im
            }, { 1.9666805699969629,   // re
              0.25598569411267269      // im
            }, { 1.9679550768797691,   // re
              0.25112341416658135      // im
            }, { 1.9692051272798303,   // re
              0.24625478930263997      // im
            }, { 1.9704306896132062,   // re
              0.24137994253217704      // im
            }, { 1.971631732914674,    // re
              0.23649899702372468      // im
            }, { 1.9728082268385125,   // re
              0.23161207609990644      // im
            }, { 1.9739601416592691,   // re
              0.22671930323432157      // im
            }, { 1.9750874482725091,   // re
              0.2218208020484253       // im
            }, { 1.9761901181955528,   // re
              0.21691669630840529      // im
            }, { 1.9772681235681935,   // re
              0.21200710992205465      // im
            }, { 1.9783214371534035,   // re
              0.20709216693564123      // im
            }, { 1.97935003233802,     // re
              0.2021719915307735       // im
            }, { 1.9803538831334198,   // re
              0.19724670802126285      // im
            }, { 1.9813329641761737,   // re
              0.19231644084998278      // im
            }, { 1.9822872507286888,   // re
              0.1873813145857246       // im
            }, { 1.9832167186798331,   // re
              0.18244145392005021      // im
            }, { 1.984121344545545,    // re
              0.17749698366414141      // im
            }, { 1.9850011054694261,   // re
              0.17254802874564659      // im
            }, { 1.9858559792233188,   // re
              0.16759471420552424      // im
            }, { 1.9866859442078679,   // re
              0.16263716519488358      // im
            }, { 1.9874909794530675,   // re
              0.15767550697182262      // im
            }, { 1.9882710646187887,   // re
              0.15270986489826319      // im
            }, { 1.9890261799952953,   // re
              0.14774036443678365      // im
            }, { 1.9897563065037409,   // re
              0.14276713114744893      // im
            }, { 1.9904614256966511,   // re
              0.13779029068463808      // im
            }, { 1.9911415197583904,   // re
              0.13280996879386942      // im
            }, { 1.9917965715056103,   // re
              0.12782629130862361      // im
            }, { 1.9924265643876859,   // re
              0.1228393841471641       // im
            }, { 1.9930314824871325,   // re
              0.11784937330935585      // im
            }, { 1.9936113105200084,   // re
              0.11285638487348168      // im
            }, { 1.9941660338363008,   // re
              0.10786054499305682      // im
            }, { 1.9946956384202958,   // re
              0.10286197989364146      // im
            }, { 1.9952001108909334,   // re
              0.097860815869651535     // im
            }, { 1.9956794385021441,   // re
              0.092857179281167823     // im
            }, { 1.9961336091431725,   // re
              0.087851196550743166     // im
            }, { 1.9965626113388821,   // re
              0.082842994160208391     // im
            }, { 1.9969664342500459,   // re
              0.077832698647476523     // im
            }, { 1.9973450676736202,   // re
              0.072820436603345709     // im
            }, { 1.997698502043002,    // re
              0.067806334668300758     // im
            }, { 1.9980267284282716,   // re
              0.062790519529313374     // im
            }, { 1.9983297385364165,   // re
              0.057773117916641338     // im
            }, { 1.9986075247115431,   // re
              0.052754256600626472     // im
            }, { 1.9988600799350684,   // re
              0.047734062388491642     // im
            }, { 1.9990873978258987,   // re
              0.042712662121136877     // im
            }, { 1.9992894726405892,   // re
              0.037690182669934541     // im
            }, { 1.9994662992734908,   // re
              0.032666750933523794     // im
            }, { 1.9996178732568781,   // re
              0.027642493834604379     // im
            }, { 1.9997441907610622,   // re
              0.022617538316729753     // im
            }, { 1.9998452485944886,   // re
              0.017592011341099723     // im
            }, { 1.9999210442038162,   // re
              0.012566039883352606     // im
            }, { 1.9999715756739831,   // re
              0.0075397509303570913    // im
            }, { 1.9999968417282541,   // re
              0.0025132714770037265    // im
            }, { 1.9999968417282541,   // re
              -0.0025132714770037265   // im
            }, { 1.9999715756739831,   // re
              -0.0075397509303570913   // im
            }, { 1.9999210442038162,   // re
              -0.012566039883352606    // im
            }, { 1.9998452485944886,   // re
              -0.017592011341099723    // im
            }, { 1.9997441907610622,   // re
              -0.022617538316729753    // im
            }, { 1.9996178732568781,   // re
              -0.027642493834604379    // im
            }, { 1.9994662992734908,   // re
              -0.032666750933523794    // im
            }, { 1.9992894726405892,   // re
              -0.037690182669934541    // im
            }, { 1.9990873978258987,   // re
              -0.042712662121136877    // im
            }, { 1.9988600799350684,   // re
              -0.047734062388491642    // im
            }, { 1.9986075247115431,   // re
              -0.052754256600626472    // im
            }, { 1.9983297385364165,   // re
              -0.057773117916641338    // im
            }, { 1.9980267284282716,   // re
              -0.062790519529313374    // im
            }, { 1.997698502043002,    // re
              -0.067806334668300758    // im
            }, { 1.9973450676736202,   // re
              -0.072820436603345709    // im
            }, { 1.9969664342500459,   // re
              -0.077832698647476523    // im
            }, { 1.9965626113388821,   // re
              -0.082842994160208391    // im
            }, { 1.9961336091431725,   // re
              -0.087851196550743166    // im
            }, { 1.9956794385021441,   // re
              -0.092857179281167823    // im
            }, { 1.9952001108909334,   // re
              -0.097860815869651535    // im
            }, { 1.9946956384202958,   // re
              -0.10286197989364146     // im
            }, { 1.9941660338363008,   // re
              -0.10786054499305682     // im
            }, { 1.9936113105200084,   // re
              -0.11285638487348168     // im
            }, { 1.9930314824871325,   // re
              -0.11784937330935585     // im
            }, { 1.9924265643876859,   // re
              -0.1228393841471641      // im
            }, { 1.9917965715056103,   // re
              -0.12782629130862361     // im
            }, { 1.9911415197583904,   // re
              -0.13280996879386942     // im
            }, { 1.9904614256966511,   // re
              -0.13779029068463808     // im
            }, { 1.9897563065037409,   // re
              -0.14276713114744893     // im
            }, { 1.9890261799952953,   // re
              -0.14774036443678365     // im
            }, { 1.9882710646187887,   // re
              -0.15270986489826319     // im
            }, { 1.9874909794530675,   // re
              -0.15767550697182262     // im
            }, { 1.9866859442078679,   // re
              -0.16263716519488358     // im
            }, { 1.9858559792233188,   // re
              -0.16759471420552424     // im
            }, { 1.9850011054694261,   // re
              -0.17254802874564659     // im
            }, { 1.984121344545545,    // re
              -0.17749698366414141     // im
            }, { 1.9832167186798331,   // re
              -0.18244145392005021     // im
            }, { 1.9822872507286888,   // re
              -0.1873813145857246      // im
            }, { 1.9813329641761737,   // re
              -0.19231644084998278     // im
            }, { 1.9803538831334198,   // re
              -0.19724670802126285     // im
            }, { 1.97935003233802,     // re
              -0.2021719915307735      // im
            }, { 1.9783214371534035,   // re
              -0.20709216693564123     // im
            }, { 1.9772681235681935,   // re
              -0.21200710992205465     // im
            }, { 1.9761901181955528,   // re
              -0.21691669630840529     // im
            }, { 1.9750874482725091,   // re
              -0.2218208020484253      // im
            }, { 1.9739601416592691,   // re
              -0.22671930323432157     // im
            }, { 1.9728082268385125,   // re
              -0.23161207609990644     // im
            }, { 1.971631732914674,    // re
              -0.23649899702372468     // im
            }, { 1.9704306896132062,   // re
              -0.24137994253217704     // im
            }, { 1.9692051272798303,   // re
              -0.24625478930263997     // im
            }, { 1.9679550768797691,   // re
              -0.25112341416658135     // im
            }, { 1.9666805699969629,   // re
              -0.25598569411267269     // im
            }, { 1.9653816388332739,   // re
              -0.26084150628989694     // im
            }, { 1.9640583162076708,   // re
              -0.26569072801065263     // im
            }, { 1.9627106355554007,   // re
              -0.27053323675385371     // im
            }, { 1.9613386309271434,   // re
              -0.27536891016802489     // im
            }, { 1.9599423369881519,   // re
              -0.28019762607439358     // im
            }, { 1.9585217890173758,   // re
              -0.28501926246997611     // im
            }, { 1.9570770229065713,   // re
              -0.289833697530661       // im
            }, { 1.9556080751593918,   // re
              -0.29464080961428657     // im
            }, { 1.9541149828904685,   // re
              -0.29944047726371431     // im
            }, { 1.9525977838244708,   // re
              -0.30423257920989805     // im
            }, { 1.9510565162951536,   // re
              -0.3090169943749474      // im
            }, { 1.949491219244389,    // re
              -0.31379360187518746     // im
            }, { 1.9479019322211821,   // re
              -0.31856228102421275     // im
            }, { 1.946288695380672,    // re
              -0.32332291133593644     // im
            }, { 1.9446515494831167,   // re
              -0.32807537252763497     // im
            }, { 1.9429905358928645,   // re
              -0.33281954452298662     // im
            }, { 1.9413056965773068,   // re
              -0.33755530745510576     // im
            }, { 1.9395970741058202,   // re
              -0.34228254166957117     // im
            }, { 1.9378647116486889,   // re
              -0.34700112772744951     // im
            }, { 1.936108652976015,    // re
              -0.35171094640831274     // im
            }, { 1.9343289424566121,   // re
              -0.3564118787132507      // im
            }, { 1.932525625056885,    // re
              -0.36110380586787744     // im
            }, { 1.9306987463396932,   // re
              -0.36578660932533252     // im
            }, { 1.928848352463199,    // re
              -0.3704601707692759      // im
            }, { 1.9269744901797019,   // re
              -0.3751243721168776      // im
            }, { 1.9250772068344579,   // re
              -0.37977909552180106     // im
            }, { 1.9231565503644825,   // re
              -0.38442422337718063     // im
            }, { 1.9212125692973394,   // re
              -0.38905963831859325     // im
            }, { 1.9192453127499149,   // re
              -0.39368522322702343     // im
            }, { 1.9172548304271766,   // re
              -0.39830086123182279     // im
            }, { 1.9152411726209175,   // re
              -0.40290643571366264     // im
            }, { 1.9132043902084863,   // re
              -0.40750183030748072     // im
            }, { 1.9111445346515,      // re
              -0.41208692890542109     // im
            }, { 1.9090616579945454,   // re
              -0.41666161565976789     // im
            }, { 1.9069558128638635,   // re
              -0.42122577498587221     // im
            }, { 1.9048270524660196,   // re
              -0.42577929156507266     // im
            }, { 1.9026754305865592,   // re
              -0.43032205034760879     // im
            }, { 1.9005010015886494,   // re
              -0.43485393655552829     // im
            }, { 1.8983038204117046,   // re
              -0.4393748356855865      // im
            }, { 1.8960839425699989,   // re
              -0.44388463351214        // im
            }, { 1.8938414241512638,   // re
              -0.44838321609003223     // im
            }, { 1.8915763218152701,   // re
              -0.45287046975747269     // im
            }, { 1.8892886927923971,   // re
              -0.45734628113890857     // im
            }, { 1.8869785948821864,   // re
              -0.4618105371478895      // im
            }, { 1.8846460864518817,   // re
              -0.46626312498992462     // im
            }, { 1.8822912264349534,   // re
              -0.47070393216533252     // im
            }, { 1.8799140743296103,   // re
              -0.47513284647208381     // im
            }, { 1.8775146901972968,   // re
              -0.47954975600863581     // im
            }, { 1.8750931346611737,   // re
              -0.48395454917675995     // im
            }, { 1.8726494689045876,   // re
              -0.48834711468436154     // im
            }, { 1.8701837546695257,   // re
              -0.49272734154829156     // im
            }, { 1.8676960542550538,   // re
              -0.49709511909715082     // im
            }, { 1.8651864305157446,   // re
              -0.50145033697408625     // im
            }, { 1.8626549468600877,   // re
              -0.50579288513957887     // im
            }, { 1.8601016672488886,   // re
              -0.51012265387422473     // im
            }, { 1.8575266561936523,   // re
              -0.51443953378150642     // im
            }, { 1.8549299787549534,   // re
              -0.51874341579055749     // im
            }, { 1.8523117005407919,   // re
              -0.523034191158918       // im
            }, { 1.8496718877049365,   // re
              -0.52731175147528242     // im
            }, { 1.8470106069452519,   // re
              -0.5315759886622381      // im
            }, { 1.8443279255020151,   // re
              -0.53582679497899666     // im
            }, { 1.8416239111562147,   // re
              -0.54006406302411569     // im
            }, { 1.8388986322278398,   // re
              -0.544287685738213       // im
            }, { 1.8361521575741531,   // re
              -0.54849755640667042     // im
            }, { 1.8333845565879514,   // re
              -0.55269356866233155     // im
            }, { 1.8305958991958127,   // re
              -0.556875616488188       // im
            }, { 1.8277862558563278,   // re
              -0.56104359422005878     // im
            }, { 1.8249556975583228,   // re
              -0.56519739654925982     // im
            }, { 1.8221042958190625,   // re
              -0.56933691852526447     // im
            }, { 1.8192321226824455,   // re
              -0.5734620555583555      // im
            }, { 1.8163392507171841,   // re
              -0.57757270342226752     // im
            }, { 1.8134257530149682,   // re
              -0.58166875825682074     // im
            }, { 1.8104917031886223,   // re
              -0.58575011657054432     // im
            }, { 1.8075371753702421,   // re
              -0.589816675243292       // im
            }, { 1.8045622442093237,   // re
              -0.5938683315288471      // im
            }, { 1.8015669848708766,   // re
              -0.59790498305751882     // im
            }, { 1.798551473033525,    // re
              -0.60192652783872846     // im
            }, { 1.7955157848875949,   // re
              -0.60593286426358628     // im
            }, { 1.7924599971331907,   // re
              -0.60992389110745915     // im
            }, { 1.7893841869782547,   // re
              -0.61389950753252764     // im
            }, { 1.7862884321366188,   // re
              -0.61785961309033433     // im
            }, { 1.7831728108260405,   // re
              -0.62180410772432115     // im
            }, { 1.7800374017662248,   // re
              -0.62573289177235791     // im
            }, { 1.7768822841768377,   // re
              -0.62964586596926        // im
            }, { 1.7737075377755032,   // re
              -0.63354293144929685     // im
            }, { 1.7705132427757893,   // re
              -0.63742398974868963     // im
            }, { 1.767299479885182,    // re
              -0.641288942808099       // im
            }, { 1.764066330303045,    // re
              -0.64513769297510271     // im
            }, { 1.7608138757185698,   // re
              -0.648970143006663       // im
            }, { 1.7575421983087094,   // re
              -0.65278619607158372     // im
            }, { 1.754251380736104,    // re
              -0.65658575575295641     // im
            }, { 1.7509415061469915,   // re
              -0.66036872605059682     // im
            }, { 1.7476126581691069,   // re
              -0.66413501138347009     // im
            }, { 1.74426492090957,     // re
              -0.66788451659210635     // im
            }, { 1.740898378952759,    // re
              -0.671617146941004       // im
            }, { 1.7375131173581739,   // re
              -0.67533280812102436     // im
            }, { 1.7341092216582887,   // re
              -0.67903140625177394     // im
            }, { 1.7306867778563879,   // re
              -0.68271284788397646     // im
            }, { 1.7272458724243958,   // re
              -0.686377040001834       // im
            }, { 1.7237865923006903,   // re
              -0.69002389002537734     // im
            }, { 1.7203090248879069,   // re
              -0.69365330581280493     // im
            }, { 1.7168132580507298,   // re
              -0.69726519566281076     // im
            }, { 1.7132993801136729,   // re
              -0.7008594683169016      // im
            }, { 1.7097674798588469,   // re
              -0.70443603296170287     // im
            }, { 1.7062176465237173,   // re
              -0.70799479923125275     // im
            }, { 1.7026499697988491,   // re
              -0.71153567720928534     // im
            }, { 1.699064539825641,    // re
              -0.71505857743150314     // im
            }, { 1.695461447194047,    // re
              -0.71856341088783671     // im
            }, { 1.6918407829402886,   // re
              -0.72205008902469392     // im
            }, { 1.6882026385445545,   // re
              -0.72551852374719794     // im
            }, { 1.6845471059286887,   // re
              -0.72896862742141155     // im
            }, { 1.6808742774538681,   // re
              -0.73240031287655316     // im
            }, { 1.6771842459182698,   // re
              -0.73581349340719771     // im
            }, { 1.673477104554725,    // re
              -0.73920808277546857     // im
            }, { 1.6697529470283645,   // re
              -0.7425839952132155      // im
            }, { 1.6660118674342517,   // re
              -0.74594114542418222     // im
            }, { 1.6622539602950048,   // re
              -0.74927944858616136     // im
            }, { 1.6584793205584099,   // re
              -0.752598820353138       // im
            }, { 1.6546880435950206,   // re
              -0.75589917685741959     // im
            }, { 1.6508802251957486,   // re
              -0.75918043471175656     // im
            }, { 1.6470559615694442,   // re
              -0.76244251101144789     // im
            }, { 1.6432153493404651,   // re
              -0.76568532333643646     // im
            }, { 1.6393584855462349,   // re
              -0.7689087897533915      // im
            }, { 1.6354854676347905,   // re
              -0.7721128288177781      // im
            }, { 1.6315963934623228,   // re
              -0.77529735957591572     // im
            }, { 1.6276913612907005,   // re
              -0.77846230156702345     // im
            }, { 1.6237704697849902,   // re
              -0.78160757482525245     // im
            }, { 1.6198338180109624,   // re
              -0.784733099881707       // im
            }, { 1.6158815054325886,   // re
              -0.787838797766452       // im
            }, { 1.611913631909528,    // re
              -0.7909245900105083      // im
            }, { 1.6079302976946055,   // re
              -0.79399039864783538     // im
            }, { 1.6039316034312769,   // re
              -0.797036146217301       // im
            }, { 1.5999176501510881,   // re
              -0.800061755764639       // im
            }, { 1.5958885392711202,   // re
              -0.80306715084439273     // im
            }, { 1.5918443725914295,   // re
              -0.80605225552184723     // im
            }, { 1.5877852522924731,   // re
              -0.80901699437494745     // im
            }, { 1.5837112809325289,   // re
              -0.81196129249620419     // im
            }, { 1.5796225614451034,   // re
              -0.81488507549458622     // im
            }, { 1.5755191971363312,   // re
              -0.81778826949740047     // im
            }, { 1.5714012916823652,   // re
              -0.820670801152158       // im
            }, { 1.5672689491267566,   // re
              -0.82353259762842745     // im
            }, { 1.5631222738778265,   // re
              -0.82637358661967553     // im
            }, { 1.5589613707060277,   // re
              -0.82919369634509332     // im
            }, { 1.5547863447412973,   // re
              -0.83199285555141056     // im
            }, { 1.5505973014704015,   // re
              -0.83477099351469541     // im
            }, { 1.5463943467342691,   // re
              -0.83752804004214165     // im
            }, { 1.5421775867253178,   // re
              -0.8402639254738421      // im
            }, { 1.5379471279847712,   // re
              -0.84297858068454867     // im
            }, { 1.5337030773999674,   // re
              -0.84567193708541877     // im
            }, { 1.5294455422016573,   // re
              -0.84834392662574842     // im
            }, { 1.5251746299612958,   // re
              -0.85099448179469184     // im
            }, { 1.5208904485883243,   // re
              -0.85362353562296667     // im
            }, { 1.5165931063274438,   // re
              -0.85623102168454646     // im
            }, { 1.51228271175588,     // re
              -0.85881687409833884     // im
            }, { 1.50795937378064,     // re
              -0.86138102752984991     // im
            }, { 1.5036232016357607,   // re
              -0.86392341719283527     // im
            }, { 1.4992743048795492,   // re
              -0.866443978850937       // im
            }, { 1.4949127933918134,   // re
              -0.86894264881930638     // im
            }, { 1.4905387773710874,   // re
              -0.87141936396621267     // im
            }, { 1.4861523673318466,   // re
              -0.87387406171463933     // im
            }, { 1.4817536741017152,   // re
              -0.87630668004386358     // im
            }, { 1.477342808818666,    // re
              -0.87871715749102486     // im
            }, { 1.4729198829282124,   // re
              -0.88110543315267653     // im
            }, { 1.4684850081805934,   // re
              -0.88347144668632582     // im
            }, { 1.4640382966279484,   // re
              -0.88581513831195746     // im
            }, { 1.4595798606214878,   // re
              -0.88813644881354459     // im
            }, { 1.4551098128086537,   // re
              -0.89043531954054478     // im
            }, { 1.4506282661302734,   // re
              -0.89271169240938231     // im
            }, { 1.4461353338177059,   // re
              -0.89496550990491486     // im
            }, { 1.4416311293899813,   // re
              -0.89719671508188747     // im
            }, { 1.4371157666509329,   // re
              -0.89940525156637108     // im
            }, { 1.4325893596863208,   // re
              -0.90159106355718666     // im
            }, { 1.4280520228609503,   // re
              -0.90375409582731547     // im
            }, { 1.4235038708157819,   // re
              -0.90589429372529418     // im
            }, { 1.418945018465035,    // re
              -0.90801160317659568     // im
            }, { 1.4143755809932841,   // re
              -0.91010597068499566     // im
            }, { 1.4097956738525492,   // re
              -0.91217734333392375     // im
            }, { 1.405205412759378,    // re
              -0.914225668787801       // im
            }, { 1.400604913691923,    // re
              -0.91625089529336179     // im
            }, { 1.39599429288701,     // re
              -0.91825297168096165     // im
            }, { 1.3913736668372023,   // re
              -0.92023184736587038     // im
            }, { 1.3867431522878577,   // re
              -0.92218747234954934     // im
            }, { 1.3821028662341774,   // re
              -0.92411979722091575     // im
            }, { 1.3774529259182506,   // re
              -0.92602877315759013     // im
            }, { 1.3727934488260933,   // re
              -0.92791435192713068     // im
            }, { 1.3681245526846779,   // re
              -0.92977648588825146     // im
            }, { 1.3634463554589606,   // re
              -0.931615127992026       // im
            }, { 1.3587589753488996,   // re
              -0.93343023178307638     // im
            }, { 1.3540625307864689,   // re
              -0.935221751400747       // im
            }, { 1.349357140432667,    // re
              -0.936989641580263       // im
            }, { 1.3446429231745172,   // re
              -0.93873385765387407     // im
            }, { 1.3399199981220644,   // re
              -0.94045435555198309     // im
            }, { 1.3351884846053665,   // re
              -0.94215109180425927     // im
            }, { 1.3304485021714787,   // re
              -0.94382402354073736     // im
            }, { 1.325700170581432,    // re
              -0.94547310849289945     // im
            }, { 1.3209436098072094,   // re
              -0.94709830499474434     // im
            }, { 1.3161789400287129,   // re
              -0.94869957198383914     // im
            }, { 1.3114062816307281,   // re
              -0.95027686900235742     // im
            }, { 1.3066257551998819,   // re
              -0.95183015619810141     // im
            }, { 1.3018374815215958,   // re
              -0.95335939432550842     // im
            }, { 1.2970415815770349,   // re
              -0.954864544746643       // im
            }, { 1.29223817654005,     // re
              -0.95634556943217275     // im
            }, { 1.2874273877741165,   // re
              -0.95780243096232942     // im
            }, { 1.2826093368292684,   // re
              -0.95923509252785422     // im
            }, { 1.2777841454390273,   // re
              -0.96064351793092806     // im
            }, { 1.2729519355173253,   // re
              -0.96202767158608593     // im
            }, { 1.2681128291554262,   // re
              -0.96338751852111582     // im
            }, { 1.2632669486188401,   // re
              -0.96472302437794288     // im
            }, { 1.2584144163442348,   // re
              -0.966034155413497       // im
            }, { 1.2535553549363405,   // re
              -0.96732087850056581     // im
            }, { 1.2486898871648549,   // re
              -0.96858316112863108     // im
            }, { 1.2438181359613385,   // re
              -0.96982097140469092     // im
            }, { 1.2389402244161105,   // re
              -0.97103427805406473     // im
            }, { 1.2340562757751383,   // re
              -0.97222305042118418     // im
            }, { 1.2291664134369227,   // re
              -0.97338725847036722     // im
            }, { 1.2242707609493813,   // re
              -0.97452687278657713     // im
            }, { 1.2193694420067258,   // re
              -0.975641864576166       // im
            }, { 1.2144625804463383,   // re
              -0.97673220566760155     // im
            }, { 1.2095503002456405,   // re
              -0.97779786851217976     // im
            }, { 1.2046327255189626,   // re
              -0.97883882618472018     // im
            }, { 1.1997099805144069,   // re
              -0.97985505238424686     // im
            }, { 1.1947821896107089,   // re
              -0.98084652143465234     // im
            }, { 1.189849477314094,    // re
              -0.98181320828534657     // im
            }, { 1.1849119682551321,   // re
              -0.98275508851189008     // im
            }, { 1.1799697871855899,   // re
              -0.98367213831661082     // im
            }, { 1.1750230589752761,   // re
              -0.98456433452920533     // im
            }, { 1.1700719086088891,   // re
              -0.98543165460732474     // im
            }, { 1.1651164611828579,   // re
              -0.98627407663714339     // im
            }, { 1.1601568419021817,   // re
              -0.98709157933391345     // im
            }, { 1.155193176077266,    // re
              -0.98788414204250219     // im
            }, { 1.1502255891207571,   // re
              -0.98865174473791406     // im
            }, { 1.1452542065443727,   // re
              -0.98939436802579617     // im
            }, { 1.140279153955732,    // re
              -0.9901119931429293      // im
            }, { 1.1353005570551802,   // re
              -0.99080460195770081     // im
            }, { 1.1303185416326145,   // re
              -0.99147217697056356     // im
            }, { 1.1253332335643043,   // re
              -0.99211470131447788     // im
            }, { 1.1203447588097115,   // re
              -0.99273215875533738     // im
            }, { 1.1153532434083082,   // re
              -0.99332453369237972     // im
            }, { 1.1103588134763918,   // re
              -0.99389181115858027     // im
            }, { 1.1053615952038984,   // re
              -0.99443397682103052     // im
            }, { 1.1003617148512148,   // re
              -0.99495101698130017     // im
            }, { 1.0953592987459886,   // re
              -0.99544291857578315     // im
            }, { 1.0903544732799355,   // re
              -0.995909669176028       // im
            }, { 1.0853473649056469,   // re
              -0.99635125698905125     // im
            }, { 1.0803381001333943,   // re
              -0.99676767085763607     // im
            }, { 1.0753268055279328,   // re
              -0.99715890026061393     // im
            }, { 1.0703136077053037,   // re
              -0.99752493531313025     // im
            }, { 1.0652986333296357,   // re
              -0.9978657667668942      // im
            }, { 1.0602820091099434,   // re
              -0.99818138601041273     // im
            }, { 1.0552638617969272,   // re
              -0.99847178506920775     // im
            }, { 1.0502443181797696,   // re
              -0.99873695660601747     // im
            }, { 1.0452235050829326,   // re
              -0.99897689392098254     // im
            }, { 1.0402015493629533,   // re
              -0.99919159095181442     // im
            }, { 1.0351785779052378,   // re
              -0.99938104227394919     // im
            }, { 1.0301547176208568,   // re
              -0.99954524310068449     // im
            }, { 1.0251300954433376,   // re
              -0.99968418928329994     // im
            }, { 1.0201048383254576,   // re
              -0.999797877311163       // im
            }, { 1.0150790732360371,   // re
              -0.99988630431181635     // im
            }, { 1.0100529271567307,   // re
              -0.99994946805105178     // im
            }, { 1.0050265270788188,   // re
              -0.99998736693296575     // im
            } };

          static creal_T fv[2048];
          static creal_T fy[2048];
          static creal_T ytmp[625];
          static const double b_dv[2049]{ 0.0, -0.0015339801862847655,
            -0.0030679567629659761, -0.0046019261204485705,
            -0.0061358846491544753, -0.007669828739531097, -0.00920375478205982,
            -0.010737659167264491, -0.012271538285719925, -0.013805388528060391,
            -0.0153392062849881, -0.01687298794728171, -0.01840672990580482,
            -0.019940428551514441, -0.021474080275469508, -0.023007681468839369,
            -0.024541228522912288, -0.0260747178291039, -0.02760814577896574,
            -0.029141508764193722, -0.030674803176636626, -0.032208025408304586,
            -0.03374117185137758, -0.035274238898213947, -0.036807222941358832,
            -0.038340120373552694, -0.039872927587739811, -0.041405640977076739,
            -0.04293825693494082, -0.044470771854938668, -0.046003182130914623,
            -0.0475354841569593, -0.049067674327418015, -0.050599749036899282,
            -0.052131704680283324, -0.05366353765273052, -0.055195244349689941,
            -0.056726821166907748, -0.058258264500435752, -0.059789570746639868,
            -0.061320736302208578, -0.0628517575641614, -0.064382630929857465,
            -0.0659133527970038, -0.067443919563664051, -0.068974327628266746,
            -0.070504573389613856, -0.072034653246889332, -0.073564563599667426,
            -0.0750943008479213, -0.076623861392031492, -0.078153241632794232,
            -0.079682437971430126, -0.081211446809592441, -0.082740264549375692,
            -0.084268887593324071, -0.0857973123444399, -0.087325535206192059,
            -0.0888535525825246, -0.090381360877864983, -0.091908956497132724,
            -0.093436335845747787, -0.094963495329638992, -0.096490431355252593,
            -0.0980171403295606, -0.099543618660069319, -0.10106986275482782,
            -0.10259586902243628, -0.10412163387205459, -0.10564715371341062,
            -0.10717242495680884, -0.10869744401313872, -0.11022220729388306,
            -0.11174671121112659, -0.11327095217756435, -0.11479492660651008,
            -0.11631863091190475, -0.11784206150832498, -0.11936521481099135,
            -0.12088808723577708, -0.1224106751992162, -0.12393297511851216,
            -0.12545498341154623, -0.12697669649688587, -0.12849811079379317,
            -0.13001922272223335, -0.13154002870288312, -0.13306052515713906,
            -0.13458070850712617, -0.1361005751757062, -0.13762012158648604,
            -0.1391393441638262, -0.14065823933284921, -0.14217680351944803,
            -0.14369503315029447, -0.14521292465284746, -0.14673047445536175,
            -0.14824767898689603, -0.14976453467732151, -0.15128103795733022,
            -0.15279718525844344, -0.1543129730130201, -0.15582839765426523,
            -0.15734345561623825, -0.15885814333386145, -0.16037245724292828,
            -0.16188639378011183, -0.16339994938297323, -0.16491312048996992,
            -0.1664259035404641, -0.16793829497473117, -0.16945029123396796,
            -0.17096188876030122, -0.17247308399679595, -0.17398387338746382,
            -0.17549425337727143, -0.17700422041214875, -0.17851377093899751,
            -0.18002290140569951, -0.18153160826112497, -0.18303988795514095,
            -0.18454773693861962, -0.18605515166344663, -0.1875621285825296,
            -0.18906866414980619, -0.19057475482025274, -0.19208039704989244,
            -0.19358558729580361, -0.19509032201612825, -0.19659459767008022,
            -0.19809841071795356, -0.19960175762113097, -0.2011046348420919,
            -0.20260703884442113, -0.20410896609281687, -0.20561041305309924,
            -0.20711137619221856, -0.20861185197826349, -0.21011183688046961,
            -0.21161132736922755, -0.21311031991609136, -0.21460881099378676,
            -0.21610679707621952, -0.21760427463848364, -0.2191012401568698,
            -0.22059769010887351, -0.22209362097320351, -0.22358902922979,
            -0.22508391135979283, -0.22657826384561, -0.22807208317088573,
            -0.22956536582051887, -0.23105810828067111, -0.23255030703877524,
            -0.23404195858354343, -0.23553305940497549, -0.2370236059943672,
            -0.23851359484431842, -0.2400030224487415, -0.24149188530286933,
            -0.24298017990326387, -0.24446790274782415, -0.24595505033579459,
            -0.24744161916777327, -0.24892760574572015, -0.25041300657296522,
            -0.25189781815421697, -0.25338203699557016, -0.25486565960451457,
            -0.25634868248994291, -0.257831102162159, -0.25931291513288623,
            -0.26079411791527551, -0.26227470702391359, -0.26375467897483135,
            -0.26523403028551179, -0.26671275747489837, -0.26819085706340318,
            -0.26966832557291509, -0.271145159526808, -0.272621355449949,
            -0.27409690986870638, -0.27557181931095814, -0.2770460803060999,
            -0.27851968938505306, -0.27999264308027322, -0.28146493792575794,
            -0.28293657045705539, -0.28440753721127188, -0.28587783472708062,
            -0.28734745954472951, -0.28881640820604948, -0.29028467725446233,
            -0.29175226323498926, -0.29321916269425863, -0.29468537218051433,
            -0.29615088824362379, -0.2976157074350862, -0.29907982630804048,
            -0.30054324141727345, -0.30200594931922808, -0.30346794657201132,
            -0.30492922973540237, -0.30638979537086092, -0.30784964004153487,
            -0.30930876031226873, -0.31076715274961147, -0.31222481392182488,
            -0.31368174039889152, -0.31513792875252244, -0.31659337555616585,
            -0.31804807738501495, -0.31950203081601569, -0.32095523242787521,
            -0.32240767880106985, -0.32385936651785285, -0.32531029216226293,
            -0.32676045232013173, -0.3282098435790925, -0.32965846252858749,
            -0.33110630575987643, -0.33255336986604422, -0.33399965144200938,
            -0.3354451470845316, -0.33688985339222005, -0.33833376696554113,
            -0.33977688440682685, -0.34121920232028236, -0.34266071731199438,
            -0.34410142598993881, -0.34554132496398909, -0.34698041084592368,
            -0.34841868024943456, -0.34985612979013492, -0.35129275608556709,
            -0.35272855575521073, -0.35416352542049034, -0.35559766170478385,
            -0.35703096123343, -0.35846342063373654, -0.35989503653498811,
            -0.36132580556845428, -0.36275572436739723, -0.36418478956707989,
            -0.36561299780477385, -0.36704034571976718, -0.36846682995337232,
            -0.3698924471489341, -0.37131719395183749, -0.37274106700951576,
            -0.37416406297145793, -0.37558617848921722, -0.37700741021641826,
            -0.37842775480876556, -0.37984720892405116, -0.38126576922216238,
            -0.38268343236508978, -0.38410019501693504, -0.38551605384391885,
            -0.38693100551438858, -0.38834504669882625, -0.38975817406985641,
            -0.39117038430225387, -0.39258167407295147, -0.3939920400610481,
            -0.39540147894781635, -0.39680998741671031, -0.39821756215337356,
            -0.39962419984564679, -0.40102989718357562, -0.40243465085941843,
            -0.40383845756765407, -0.40524131400498986, -0.40664321687036903,
            -0.40804416286497869, -0.40944414869225759, -0.41084317105790391,
            -0.41224122666988289, -0.4136383122384345, -0.41503442447608163,
            -0.41642956009763715, -0.41782371582021227, -0.41921688836322391,
            -0.42060907444840251, -0.42200027079979968, -0.42339047414379605,
            -0.42477968120910881, -0.42616788872679962, -0.42755509343028208,
            -0.42894129205532949, -0.43032648134008261, -0.43171065802505726,
            -0.43309381885315196, -0.43447596056965565, -0.43585707992225547,
            -0.43723717366104409, -0.43861623853852766, -0.43999427130963326,
            -0.44137126873171667, -0.44274722756457, -0.4441221445704292,
            -0.44549601651398174, -0.44686884016237416, -0.44824061228521989,
            -0.44961132965460654, -0.45098098904510386, -0.45234958723377089,
            -0.45371712100016387, -0.45508358712634384, -0.45644898239688392,
            -0.45781330359887717, -0.45917654752194409, -0.46053871095824,
            -0.46189979070246273, -0.46325978355186015, -0.46461868630623782,
            -0.46597649576796618, -0.46733320874198842, -0.46868882203582796,
            -0.47004333245959562, -0.47139673682599764, -0.47274903195034279,
            -0.47410021465054997, -0.47545028174715587, -0.47679923006332209,
            -0.478147056424843, -0.47949375766015295, -0.48083933060033396,
            -0.48218377207912272, -0.48352707893291874, -0.48486924800079106,
            -0.48621027612448642, -0.487550160148436, -0.48888889691976317,
            -0.49022648328829116, -0.4915629161065499, -0.49289819222978404,
            -0.49423230851595967, -0.49556526182577254, -0.49689704902265447,
            -0.49822766697278181, -0.49955711254508184, -0.50088538261124071,
            -0.50221247404571079, -0.50353838372571758, -0.50486310853126759,
            -0.50618664534515523, -0.50750899105297087, -0.508830142543107,
            -0.51015009670676681, -0.5114688504379703, -0.512786400633563,
            -0.51410274419322166, -0.51541787801946293, -0.51673179901764987,
            -0.51804450409599934, -0.51935599016558964, -0.52066625414036716,
            -0.52197529293715439, -0.52328310347565643, -0.524589682678469,
            -0.52589502747108463, -0.52719913478190128, -0.52850200154222848,
            -0.52980362468629461, -0.531104001151255, -0.5324031278771979,
            -0.533701001807153, -0.53499761988709715, -0.53629297906596318,
            -0.53758707629564539, -0.53887990853100842, -0.54017147272989285,
            -0.54146176585312344, -0.54275078486451589, -0.54403852673088382,
            -0.54532498842204646, -0.54661016691083486, -0.54789405917310019,
            -0.54917666218771966, -0.55045797293660481, -0.55173798840470734,
            -0.55301670558002747, -0.55429412145362, -0.55557023301960218,
            -0.5568450372751601, -0.5581185312205561, -0.55939071185913614,
            -0.560661576197336, -0.56193112124468936, -0.56319934401383409,
            -0.5644662415205195, -0.56573181078361312, -0.56699604882510868,
            -0.56825895267013149, -0.56952051934694714, -0.57078074588696726,
            -0.572039629324757, -0.5732971666980422, -0.57455335504771576,
            -0.57580819141784534, -0.57706167285567944, -0.57831379641165559,
            -0.57956455913940563, -0.58081395809576453, -0.58206199034077544,
            -0.58330865293769829, -0.58455394295301533, -0.58579785745643886,
            -0.587040393520918, -0.58828154822264522, -0.58952131864106394,
            -0.59075970185887416, -0.591996694962041, -0.5932322950397998,
            -0.59446649918466443, -0.59569930449243336, -0.59693070806219639,
            -0.59816070699634238, -0.59938929840056454, -0.600616479383869,
            -0.60184224705858, -0.60306659854034816, -0.604289530948156,
            -0.60551104140432555, -0.60673112703452448, -0.60794978496777363,
            -0.60916701233645321, -0.61038280627630948, -0.61159716392646191,
            -0.61281008242940971, -0.61402155893103849, -0.61523159058062682,
            -0.61644017453085365, -0.61764730793780387, -0.61885298796097632,
            -0.6200572117632891, -0.62125997651108755, -0.62246127937415,
            -0.62366111752569453, -0.62485948814238634, -0.62605638840434352,
            -0.62725181549514408, -0.6284457666018326, -0.629638238914927,
            -0.63082922962842447, -0.63201873593980906, -0.63320675505005719,
            -0.63439328416364549, -0.63557832048855611, -0.6367618612362842,
            -0.637943903621844, -0.63912444486377573, -0.64030348218415167,
            -0.641481012808583, -0.64265703396622686, -0.64383154288979139,
            -0.64500453681554393, -0.64617601298331628, -0.64734596863651206,
            -0.64851440102211244, -0.64968130739068319, -0.650846684996381,
            -0.6520105310969595, -0.65317284295377676, -0.65433361783180044,
            -0.65549285299961535, -0.65665054572942894, -0.65780669329707864,
            -0.65896129298203732, -0.66011434206742048, -0.66126583783999227,
            -0.66241577759017178, -0.66356415861203977, -0.66471097820334479,
            -0.66585623366550972, -0.66699992230363747, -0.66814204142651845,
            -0.669282588346636, -0.67042156038017309, -0.67155895484701833,
            -0.67269476907077286, -0.673829000378756, -0.674961646102012,
            -0.67609270357531592, -0.67722217013718033, -0.67835004312986147,
            -0.679476319899365, -0.680600997795453, -0.68172407417164971,
            -0.68284554638524808, -0.6839654117973154, -0.68508366777270036,
            -0.68620031168003859, -0.687315340891759, -0.68842875278409044,
            -0.68954054473706683, -0.6906507141345346, -0.69175925836415775,
            -0.69286617481742463, -0.69397146088965389, -0.69507511398000088,
            -0.696177131491463, -0.69727751083088652, -0.69837624940897292,
            -0.69947334464028377, -0.70056879394324834, -0.70166259474016845,
            -0.7027547444572253, -0.70384524052448494, -0.70493408037590488,
            -0.70602126144933974, -0.70710678118654757, -0.7081906370331954,
            -0.70927282643886569, -0.71035334685706242, -0.71143219574521643,
            -0.71250937056469243, -0.71358486878079352, -0.71465868786276909,
            -0.71573082528381859, -0.71680127852109954, -0.71787004505573171,
            -0.71893712237280449, -0.72000250796138165, -0.72106619931450811,
            -0.72212819392921535, -0.72318848930652746, -0.724247082951467,
            -0.72530397237306077, -0.726359155084346, -0.72741262860237577,
            -0.7284643904482252, -0.729514438146997, -0.73056276922782759,
            -0.73160938122389263, -0.73265427167241282, -0.73369743811466037,
            -0.7347388780959635, -0.73577858916571359, -0.73681656887736979,
            -0.737852814788466, -0.73888732446061511, -0.7399200954595162,
            -0.74095112535495922, -0.74198041172083107, -0.74300795213512172,
            -0.74403374417992929, -0.745057785441466, -0.74608007351006378,
            -0.74710060598018013, -0.7481193804504036, -0.74913639452345937,
            -0.75015164580621507, -0.75116513190968637, -0.7521768504490427,
            -0.75318679904361252, -0.75419497531688917, -0.75520137689653655,
            -0.75620600141439454, -0.75720884650648457, -0.75820990981301528,
            -0.759209188978388, -0.76020668165120242, -0.76120238548426178,
            -0.7621962981345789, -0.76318841726338127, -0.76417874053611679,
            -0.765167265622459, -0.76615399019631292, -0.7671389119358204,
            -0.76812202852336542, -0.7691033376455797, -0.7700828369933479,
            -0.77106052426181382, -0.77203639715038452, -0.773010453362737,
            -0.7739826906068229, -0.77495310659487393, -0.77592169904340769,
            -0.77688846567323244, -0.77785340420945315, -0.778816512381476,
            -0.77977778792301455, -0.78073722857209449, -0.78169483207105939,
            -0.78265059616657573, -0.78360451860963831, -0.78455659715557524,
            -0.78550682956405393, -0.78645521359908577, -0.78740174702903143,
            -0.78834642762660634, -0.78928925316888565, -0.79023022143731,
            -0.7911693302176902, -0.79210657730021239, -0.79304196047944364,
            -0.79397547755433717, -0.794907126328237, -0.79583690460888357,
            -0.79676481020841883, -0.79769084094339116, -0.79861499463476093,
            -0.799537269107905, -0.80045766219262282, -0.80137617172314024,
            -0.80229279553811572, -0.80320753148064494, -0.8041203773982657,
            -0.80503133114296366, -0.80594039057117628, -0.80684755354379933,
            -0.80775281792619036, -0.808656181588175, -0.80955764240405126,
            -0.81045719825259477, -0.81135484701706373, -0.81225058658520388,
            -0.81314441484925359, -0.81403632970594841, -0.81492632905652662,
            -0.81581441080673378, -0.81670057286682785, -0.81758481315158371,
            -0.81846712958029866, -0.819347520076797, -0.82022598256943469,
            -0.82110251499110465, -0.82197711527924155, -0.82284978137582643,
            -0.82372051122739143, -0.82458930278502529, -0.82545615400437755,
            -0.82632106284566353, -0.82718402727366913, -0.8280450452577558,
            -0.82890411477186487, -0.829761233794523, -0.83061640030884631,
            -0.83146961230254524, -0.83232086776792968, -0.83317016470191319,
            -0.83401750110601813, -0.83486287498638, -0.8357062843537526,
            -0.836547727223512, -0.83738720161566194, -0.83822470555483808,
            -0.83906023707031274, -0.83989379419599952, -0.84072537497045807,
            -0.84155497743689844, -0.84238259964318585, -0.84320823964184544,
            -0.84403189549006641, -0.84485356524970712, -0.84567324698729907,
            -0.84649093877405213, -0.84730663868585832, -0.84812034480329723,
            -0.84893205521163961, -0.84974176800085255, -0.85054948126560348,
            -0.8513551931052652, -0.85215890162391983, -0.85296060493036363,
            -0.85376030113811141, -0.85455798836540053, -0.855353664735196,
            -0.85614732837519447, -0.85693897741782876, -0.85772861000027212,
            -0.85851622426444274, -0.85930181835700847, -0.86008539042939014,
            -0.86086693863776731, -0.8616464611430813, -0.8624239561110405,
            -0.86319942171212416, -0.8639728561215867, -0.86474425751946238,
            -0.86551362409056909, -0.866280954024513, -0.86704624551569265,
            -0.86780949676330332, -0.8685707059713409, -0.86932987134860684,
            -0.87008699110871146, -0.870842063470079, -0.87159508665595109,
            -0.87234605889439154, -0.87309497841829009, -0.87384184346536686,
            -0.87458665227817611, -0.87532940310411089, -0.8760700941954066,
            -0.87680872380914565, -0.87754529020726135, -0.87827979165654158,
            -0.87901222642863353, -0.87974259280004741, -0.88047088905216075,
            -0.88119711347122209, -0.881921264348355, -0.88264333997956279,
            -0.88336333866573158, -0.884081258712635, -0.88479709843093779,
            -0.8855108561362, -0.88622253014888064, -0.88693211879434219,
            -0.88763962040285393, -0.88834503330959635, -0.88904835585466457,
            -0.88974958638307278, -0.89044872324475788, -0.89114576479458318,
            -0.89184070939234272, -0.89253355540276458, -0.89322430119551532,
            -0.89391294514520325, -0.8945994856313827, -0.89528392103855758,
            -0.89596624975618522, -0.89664647017868015, -0.89732458070541832,
            -0.89800057974073988, -0.89867446569395382, -0.89934623697934157,
            -0.90001589201616017, -0.900683429228647, -0.901348847046022,
            -0.90201214390249318, -0.90267331823725883, -0.90333236849451182,
            -0.90398929312344334, -0.90464409057824624, -0.90529675931811882,
            -0.90594729780726846, -0.90659570451491533, -0.90724197791529582,
            -0.90788611648766626, -0.90852811871630612, -0.90916798309052238,
            -0.90980570810465222, -0.91044129225806725, -0.91107473405517636,
            -0.91170603200542988, -0.91233518462332275, -0.91296219042839821,
            -0.91358704794525081, -0.91420975570353069, -0.9148303122379462,
            -0.91544871608826783, -0.91606496579933172, -0.9166790599210427,
            -0.91729099700837791, -0.9179007756213905, -0.91850839432521225,
            -0.91911385169005777, -0.91971714629122736, -0.92031827670911059,
            -0.92091724152918952, -0.9215140393420419, -0.92210866874334518,
            -0.92270112833387863, -0.92329141671952764, -0.92387953251128674,
            -0.9244654743252626, -0.92504924078267758, -0.92563083050987272,
            -0.92621024213831138, -0.92678747430458175, -0.92736252565040111,
            -0.92793539482261789, -0.92850608047321559, -0.92907458125931586,
            -0.92964089584318121, -0.93020502289221907, -0.93076696107898371,
            -0.93132670908118043, -0.93188426558166815, -0.93243962926846236,
            -0.932992798834739, -0.93354377297883617, -0.93409255040425887,
            -0.93463912981968078, -0.93518350993894761, -0.93572568948108037,
            -0.93626566717027826, -0.93680344173592156, -0.937339011912575,
            -0.93787237643998989, -0.93840353406310806, -0.9389324835320646,
            -0.93945922360218992, -0.93998375303401394, -0.9405060705932683,
            -0.94102617505088926, -0.94154406518302081, -0.94205973977101731,
            -0.94257319760144687, -0.94308443746609349, -0.94359345816196039,
            -0.94410025849127266, -0.94460483726148026, -0.94510719328526061,
            -0.94560732538052128, -0.94610523237040345, -0.94660091308328353,
            -0.94709436635277722, -0.94758559101774109, -0.94807458592227623,
            -0.94856134991573027, -0.94904588185270056, -0.94952818059303667,
            -0.950008245001843, -0.9504860739494817, -0.95096166631157508,
            -0.95143502096900834, -0.95190613680793235, -0.95237501271976588,
            -0.95284164760119872, -0.95330604035419386, -0.95376818988599033,
            -0.95422809510910567, -0.95468575494133834, -0.95514116830577078,
            -0.95559433413077111, -0.95604525134999641, -0.9564939189023951,
            -0.95694033573220882, -0.95738450078897586, -0.95782641302753291,
            -0.95826607140801767, -0.9587034748958716, -0.95913862246184189,
            -0.95957151308198452, -0.960002145737666, -0.96043051941556579,
            -0.96085663310767966, -0.96128048581132064, -0.96170207652912254,
            -0.96212140426904158, -0.96253846804435916, -0.96295326687368388,
            -0.963365799780954, -0.96377606579543984, -0.96418406395174583,
            -0.96458979328981276, -0.96499325285492032, -0.9653944416976894,
            -0.96579335887408368, -0.9661900034454125, -0.96658437447833312,
            -0.96697647104485207, -0.96736629222232851, -0.96775383709347551,
            -0.96813910474636244, -0.96852209427441727, -0.96890280477642887,
            -0.96928123535654853, -0.96965738512429245, -0.970031253194544,
            -0.9704028386875555, -0.97077214072895035, -0.97113915844972509,
            -0.97150389098625178, -0.9718663374802794, -0.97222649707893627,
            -0.97258436893473221, -0.97293995220556018, -0.97329324605469825,
            -0.973644249650812, -0.97399296216795583, -0.97433938278557586,
            -0.97468351068851067, -0.97502534506699412, -0.975364885116657,
            -0.97570213003852857, -0.976037079039039, -0.97636973133002114,
            -0.97670008612871184, -0.97702814265775439, -0.97735390014520007,
            -0.97767735782450993, -0.97799851493455714, -0.97831737071962765,
            -0.97863392442942321, -0.9789481753190622, -0.979260122649082,
            -0.97956976568544052, -0.97987710369951764, -0.98018213596811743,
            -0.98048486177346938, -0.98078528040323043, -0.98108339115048671,
            -0.98137919331375456, -0.98167268619698311, -0.98196386910955524,
            -0.98225274136628937, -0.98253930228744124, -0.98282355119870524,
            -0.98310548743121629, -0.98338511032155118, -0.98366241921173025,
            -0.98393741344921892, -0.984210092386929, -0.98448045538322093,
            -0.98474850180190421, -0.98501423101223984, -0.98527764238894122,
            -0.98553873531217606, -0.98579750916756748, -0.98605396334619544,
            -0.98630809724459867, -0.98655991026477541, -0.98680940181418553,
            -0.987056571305751, -0.98730141815785843, -0.98754394179435923,
            -0.98778414164457218, -0.98802201714328353, -0.98825756773074946,
            -0.98849079285269659, -0.98872169196032378, -0.988950264510303,
            -0.989176509964781, -0.98940042779138038, -0.98962201746320089,
            -0.98984127845882053, -0.99005821026229712, -0.99027281236316911,
            -0.99048508425645709, -0.99069502544266463, -0.99090263542778,
            -0.99110791372327689, -0.99131085984611544, -0.9915114733187439,
            -0.99170975366909953, -0.99190570043060933, -0.9920993131421918,
            -0.99229059134825737, -0.99247953459871, -0.992666142448948,
            -0.9928504144598651, -0.99303235019785141, -0.9932119492347945,
            -0.99338921114808065, -0.9935641355205953, -0.9937367219407246,
            -0.99390697000235606, -0.99407487930487937, -0.9942404494531879,
            -0.9944036800576791, -0.99456457073425542, -0.9947231211043257,
            -0.99487933079480562, -0.99503319943811863, -0.99518472667219693,
            -0.99533391214048228, -0.99548075549192694, -0.99562525638099431,
            -0.99576741446765982, -0.99590722941741172, -0.996044700901252,
            -0.996179828595697, -0.996312612182778, -0.99644305135004263,
            -0.99657114579055484, -0.99669689520289606, -0.99682029929116567,
            -0.99694135776498216, -0.997060070339483, -0.99717643673532619,
            -0.99729045667869021, -0.9974021299012753, -0.99751145614030345,
            -0.99761843513851955, -0.99772306664419164, -0.99782535041111164,
            -0.997925286198596, -0.99802287377148624, -0.99811811290014918,
            -0.99821100336047819, -0.99830154493389289, -0.99838973740734016,
            -0.99847558057329477, -0.99855907422975931, -0.99864021818026527,
            -0.99871901223387294, -0.99879545620517241, -0.99886954991428356,
            -0.99894129318685687, -0.99901068585407338, -0.99907772775264536,
            -0.99914241872481691, -0.99920475861836389, -0.99926474728659442,
            -0.99932238458834954, -0.99937767038800285, -0.99943060455546173,
            -0.999481186966167, -0.99952941750109314, -0.99957529604674922,
            -0.99961882249517864, -0.99965999674395922, -0.99969881869620425,
            -0.99973528826056168, -0.99976940535121528, -0.99980116988788426,
            -0.9998305817958234, -0.99985764100582386, -0.99988234745421256,
            -0.9999047010828529, -0.9999247018391445, -0.99994234967602391,
            -0.9999576445519639, -0.99997058643097414, -0.99998117528260111,
            -0.9999894110819284, -0.99999529380957619, -0.99999882345170188,
            -1.0, -0.99999882345170188, -0.99999529380957619,
            -0.9999894110819284, -0.99998117528260111, -0.99997058643097414,
            -0.9999576445519639, -0.99994234967602391, -0.9999247018391445,
            -0.9999047010828529, -0.99988234745421256, -0.99985764100582386,
            -0.9998305817958234, -0.99980116988788426, -0.99976940535121528,
            -0.99973528826056168, -0.99969881869620425, -0.99965999674395922,
            -0.99961882249517864, -0.99957529604674922, -0.99952941750109314,
            -0.999481186966167, -0.99943060455546173, -0.99937767038800285,
            -0.99932238458834954, -0.99926474728659442, -0.99920475861836389,
            -0.99914241872481691, -0.99907772775264536, -0.99901068585407338,
            -0.99894129318685687, -0.99886954991428356, -0.99879545620517241,
            -0.99871901223387294, -0.99864021818026527, -0.99855907422975931,
            -0.99847558057329477, -0.99838973740734016, -0.99830154493389289,
            -0.99821100336047819, -0.99811811290014918, -0.99802287377148624,
            -0.997925286198596, -0.99782535041111164, -0.99772306664419164,
            -0.99761843513851955, -0.99751145614030345, -0.9974021299012753,
            -0.99729045667869021, -0.99717643673532619, -0.997060070339483,
            -0.99694135776498216, -0.99682029929116567, -0.99669689520289606,
            -0.99657114579055484, -0.99644305135004263, -0.996312612182778,
            -0.996179828595697, -0.996044700901252, -0.99590722941741172,
            -0.99576741446765982, -0.99562525638099431, -0.99548075549192694,
            -0.99533391214048228, -0.99518472667219693, -0.99503319943811863,
            -0.99487933079480562, -0.9947231211043257, -0.99456457073425542,
            -0.9944036800576791, -0.9942404494531879, -0.99407487930487937,
            -0.99390697000235606, -0.9937367219407246, -0.9935641355205953,
            -0.99338921114808065, -0.9932119492347945, -0.99303235019785141,
            -0.9928504144598651, -0.992666142448948, -0.99247953459871,
            -0.99229059134825737, -0.9920993131421918, -0.99190570043060933,
            -0.99170975366909953, -0.9915114733187439, -0.99131085984611544,
            -0.99110791372327689, -0.99090263542778, -0.99069502544266463,
            -0.99048508425645709, -0.99027281236316911, -0.99005821026229712,
            -0.98984127845882053, -0.98962201746320089, -0.98940042779138038,
            -0.989176509964781, -0.988950264510303, -0.98872169196032378,
            -0.98849079285269659, -0.98825756773074946, -0.98802201714328353,
            -0.98778414164457218, -0.98754394179435923, -0.98730141815785843,
            -0.987056571305751, -0.98680940181418553, -0.98655991026477541,
            -0.98630809724459867, -0.98605396334619544, -0.98579750916756748,
            -0.98553873531217606, -0.98527764238894122, -0.98501423101223984,
            -0.98474850180190421, -0.98448045538322093, -0.984210092386929,
            -0.98393741344921892, -0.98366241921173025, -0.98338511032155118,
            -0.98310548743121629, -0.98282355119870524, -0.98253930228744124,
            -0.98225274136628937, -0.98196386910955524, -0.98167268619698311,
            -0.98137919331375456, -0.98108339115048671, -0.98078528040323043,
            -0.98048486177346938, -0.98018213596811743, -0.97987710369951764,
            -0.97956976568544052, -0.979260122649082, -0.9789481753190622,
            -0.97863392442942321, -0.97831737071962765, -0.97799851493455714,
            -0.97767735782450993, -0.97735390014520007, -0.97702814265775439,
            -0.97670008612871184, -0.97636973133002114, -0.976037079039039,
            -0.97570213003852857, -0.975364885116657, -0.97502534506699412,
            -0.97468351068851067, -0.97433938278557586, -0.97399296216795583,
            -0.973644249650812, -0.97329324605469825, -0.97293995220556018,
            -0.97258436893473221, -0.97222649707893627, -0.9718663374802794,
            -0.97150389098625178, -0.97113915844972509, -0.97077214072895035,
            -0.9704028386875555, -0.970031253194544, -0.96965738512429245,
            -0.96928123535654853, -0.96890280477642887, -0.96852209427441727,
            -0.96813910474636244, -0.96775383709347551, -0.96736629222232851,
            -0.96697647104485207, -0.96658437447833312, -0.9661900034454125,
            -0.96579335887408368, -0.9653944416976894, -0.96499325285492032,
            -0.96458979328981276, -0.96418406395174583, -0.96377606579543984,
            -0.963365799780954, -0.96295326687368388, -0.96253846804435916,
            -0.96212140426904158, -0.96170207652912254, -0.96128048581132064,
            -0.96085663310767966, -0.96043051941556579, -0.960002145737666,
            -0.95957151308198452, -0.95913862246184189, -0.9587034748958716,
            -0.95826607140801767, -0.95782641302753291, -0.95738450078897586,
            -0.95694033573220882, -0.9564939189023951, -0.95604525134999641,
            -0.95559433413077111, -0.95514116830577078, -0.95468575494133834,
            -0.95422809510910567, -0.95376818988599033, -0.95330604035419386,
            -0.95284164760119872, -0.95237501271976588, -0.95190613680793235,
            -0.95143502096900834, -0.95096166631157508, -0.9504860739494817,
            -0.950008245001843, -0.94952818059303667, -0.94904588185270056,
            -0.94856134991573027, -0.94807458592227623, -0.94758559101774109,
            -0.94709436635277722, -0.94660091308328353, -0.94610523237040345,
            -0.94560732538052128, -0.94510719328526061, -0.94460483726148026,
            -0.94410025849127266, -0.94359345816196039, -0.94308443746609349,
            -0.94257319760144687, -0.94205973977101731, -0.94154406518302081,
            -0.94102617505088926, -0.9405060705932683, -0.93998375303401394,
            -0.93945922360218992, -0.9389324835320646, -0.93840353406310806,
            -0.93787237643998989, -0.937339011912575, -0.93680344173592156,
            -0.93626566717027826, -0.93572568948108037, -0.93518350993894761,
            -0.93463912981968078, -0.93409255040425887, -0.93354377297883617,
            -0.932992798834739, -0.93243962926846236, -0.93188426558166815,
            -0.93132670908118043, -0.93076696107898371, -0.93020502289221907,
            -0.92964089584318121, -0.92907458125931586, -0.92850608047321559,
            -0.92793539482261789, -0.92736252565040111, -0.92678747430458175,
            -0.92621024213831138, -0.92563083050987272, -0.92504924078267758,
            -0.9244654743252626, -0.92387953251128674, -0.92329141671952764,
            -0.92270112833387863, -0.92210866874334518, -0.9215140393420419,
            -0.92091724152918952, -0.92031827670911059, -0.91971714629122736,
            -0.91911385169005777, -0.91850839432521225, -0.9179007756213905,
            -0.91729099700837791, -0.9166790599210427, -0.91606496579933172,
            -0.91544871608826783, -0.9148303122379462, -0.91420975570353069,
            -0.91358704794525081, -0.91296219042839821, -0.91233518462332275,
            -0.91170603200542988, -0.91107473405517636, -0.91044129225806725,
            -0.90980570810465222, -0.90916798309052238, -0.90852811871630612,
            -0.90788611648766626, -0.90724197791529582, -0.90659570451491533,
            -0.90594729780726846, -0.90529675931811882, -0.90464409057824624,
            -0.90398929312344334, -0.90333236849451182, -0.90267331823725883,
            -0.90201214390249318, -0.901348847046022, -0.900683429228647,
            -0.90001589201616017, -0.89934623697934157, -0.89867446569395382,
            -0.89800057974073988, -0.89732458070541832, -0.89664647017868015,
            -0.89596624975618522, -0.89528392103855758, -0.8945994856313827,
            -0.89391294514520325, -0.89322430119551532, -0.89253355540276458,
            -0.89184070939234272, -0.89114576479458318, -0.89044872324475788,
            -0.88974958638307278, -0.88904835585466457, -0.88834503330959635,
            -0.88763962040285393, -0.88693211879434219, -0.88622253014888064,
            -0.8855108561362, -0.88479709843093779, -0.884081258712635,
            -0.88336333866573158, -0.88264333997956279, -0.881921264348355,
            -0.88119711347122209, -0.88047088905216075, -0.87974259280004741,
            -0.87901222642863353, -0.87827979165654158, -0.87754529020726135,
            -0.87680872380914565, -0.8760700941954066, -0.87532940310411089,
            -0.87458665227817611, -0.87384184346536686, -0.87309497841829009,
            -0.87234605889439154, -0.87159508665595109, -0.870842063470079,
            -0.87008699110871146, -0.86932987134860684, -0.8685707059713409,
            -0.86780949676330332, -0.86704624551569265, -0.866280954024513,
            -0.86551362409056909, -0.86474425751946238, -0.8639728561215867,
            -0.86319942171212416, -0.8624239561110405, -0.8616464611430813,
            -0.86086693863776731, -0.86008539042939014, -0.85930181835700847,
            -0.85851622426444274, -0.85772861000027212, -0.85693897741782876,
            -0.85614732837519447, -0.855353664735196, -0.85455798836540053,
            -0.85376030113811141, -0.85296060493036363, -0.85215890162391983,
            -0.8513551931052652, -0.85054948126560348, -0.84974176800085255,
            -0.84893205521163961, -0.84812034480329723, -0.84730663868585832,
            -0.84649093877405213, -0.84567324698729907, -0.84485356524970712,
            -0.84403189549006641, -0.84320823964184544, -0.84238259964318585,
            -0.84155497743689844, -0.84072537497045807, -0.83989379419599952,
            -0.83906023707031274, -0.83822470555483808, -0.83738720161566194,
            -0.836547727223512, -0.8357062843537526, -0.83486287498638,
            -0.83401750110601813, -0.83317016470191319, -0.83232086776792968,
            -0.83146961230254524, -0.83061640030884631, -0.829761233794523,
            -0.82890411477186487, -0.8280450452577558, -0.82718402727366913,
            -0.82632106284566353, -0.82545615400437755, -0.82458930278502529,
            -0.82372051122739143, -0.82284978137582643, -0.82197711527924155,
            -0.82110251499110465, -0.82022598256943469, -0.819347520076797,
            -0.81846712958029866, -0.81758481315158371, -0.81670057286682785,
            -0.81581441080673378, -0.81492632905652662, -0.81403632970594841,
            -0.81314441484925359, -0.81225058658520388, -0.81135484701706373,
            -0.81045719825259477, -0.80955764240405126, -0.808656181588175,
            -0.80775281792619036, -0.80684755354379933, -0.80594039057117628,
            -0.80503133114296366, -0.8041203773982657, -0.80320753148064494,
            -0.80229279553811572, -0.80137617172314024, -0.80045766219262282,
            -0.799537269107905, -0.79861499463476093, -0.79769084094339116,
            -0.79676481020841883, -0.79583690460888357, -0.794907126328237,
            -0.79397547755433717, -0.79304196047944364, -0.79210657730021239,
            -0.7911693302176902, -0.79023022143731, -0.78928925316888565,
            -0.78834642762660634, -0.78740174702903143, -0.78645521359908577,
            -0.78550682956405393, -0.78455659715557524, -0.78360451860963831,
            -0.78265059616657573, -0.78169483207105939, -0.78073722857209449,
            -0.77977778792301455, -0.778816512381476, -0.77785340420945315,
            -0.77688846567323244, -0.77592169904340769, -0.77495310659487393,
            -0.7739826906068229, -0.773010453362737, -0.77203639715038452,
            -0.77106052426181382, -0.7700828369933479, -0.7691033376455797,
            -0.76812202852336542, -0.7671389119358204, -0.76615399019631292,
            -0.765167265622459, -0.76417874053611679, -0.76318841726338127,
            -0.7621962981345789, -0.76120238548426178, -0.76020668165120242,
            -0.759209188978388, -0.75820990981301528, -0.75720884650648457,
            -0.75620600141439454, -0.75520137689653655, -0.75419497531688917,
            -0.75318679904361252, -0.7521768504490427, -0.75116513190968637,
            -0.75015164580621507, -0.74913639452345937, -0.7481193804504036,
            -0.74710060598018013, -0.74608007351006378, -0.745057785441466,
            -0.74403374417992929, -0.74300795213512172, -0.74198041172083107,
            -0.74095112535495922, -0.7399200954595162, -0.73888732446061511,
            -0.737852814788466, -0.73681656887736979, -0.73577858916571359,
            -0.7347388780959635, -0.73369743811466037, -0.73265427167241282,
            -0.73160938122389263, -0.73056276922782759, -0.729514438146997,
            -0.7284643904482252, -0.72741262860237577, -0.726359155084346,
            -0.72530397237306077, -0.724247082951467, -0.72318848930652746,
            -0.72212819392921535, -0.72106619931450811, -0.72000250796138165,
            -0.71893712237280449, -0.71787004505573171, -0.71680127852109954,
            -0.71573082528381859, -0.71465868786276909, -0.71358486878079352,
            -0.71250937056469243, -0.71143219574521643, -0.71035334685706242,
            -0.70927282643886569, -0.7081906370331954, -0.70710678118654757,
            -0.70602126144933974, -0.70493408037590488, -0.70384524052448494,
            -0.7027547444572253, -0.70166259474016845, -0.70056879394324834,
            -0.69947334464028377, -0.69837624940897292, -0.69727751083088652,
            -0.696177131491463, -0.69507511398000088, -0.69397146088965389,
            -0.69286617481742463, -0.69175925836415775, -0.6906507141345346,
            -0.68954054473706683, -0.68842875278409044, -0.687315340891759,
            -0.68620031168003859, -0.68508366777270036, -0.6839654117973154,
            -0.68284554638524808, -0.68172407417164971, -0.680600997795453,
            -0.679476319899365, -0.67835004312986147, -0.67722217013718033,
            -0.67609270357531592, -0.674961646102012, -0.673829000378756,
            -0.67269476907077286, -0.67155895484701833, -0.67042156038017309,
            -0.669282588346636, -0.66814204142651845, -0.66699992230363747,
            -0.66585623366550972, -0.66471097820334479, -0.66356415861203977,
            -0.66241577759017178, -0.66126583783999227, -0.66011434206742048,
            -0.65896129298203732, -0.65780669329707864, -0.65665054572942894,
            -0.65549285299961535, -0.65433361783180044, -0.65317284295377676,
            -0.6520105310969595, -0.650846684996381, -0.64968130739068319,
            -0.64851440102211244, -0.64734596863651206, -0.64617601298331628,
            -0.64500453681554393, -0.64383154288979139, -0.64265703396622686,
            -0.641481012808583, -0.64030348218415167, -0.63912444486377573,
            -0.637943903621844, -0.6367618612362842, -0.63557832048855611,
            -0.63439328416364549, -0.63320675505005719, -0.63201873593980906,
            -0.63082922962842447, -0.629638238914927, -0.6284457666018326,
            -0.62725181549514408, -0.62605638840434352, -0.62485948814238634,
            -0.62366111752569453, -0.62246127937415, -0.62125997651108755,
            -0.6200572117632891, -0.61885298796097632, -0.61764730793780387,
            -0.61644017453085365, -0.61523159058062682, -0.61402155893103849,
            -0.61281008242940971, -0.61159716392646191, -0.61038280627630948,
            -0.60916701233645321, -0.60794978496777363, -0.60673112703452448,
            -0.60551104140432555, -0.604289530948156, -0.60306659854034816,
            -0.60184224705858, -0.600616479383869, -0.59938929840056454,
            -0.59816070699634238, -0.59693070806219639, -0.59569930449243336,
            -0.59446649918466443, -0.5932322950397998, -0.591996694962041,
            -0.59075970185887416, -0.58952131864106394, -0.58828154822264522,
            -0.587040393520918, -0.58579785745643886, -0.58455394295301533,
            -0.58330865293769829, -0.58206199034077544, -0.58081395809576453,
            -0.57956455913940563, -0.57831379641165559, -0.57706167285567944,
            -0.57580819141784534, -0.57455335504771576, -0.5732971666980422,
            -0.572039629324757, -0.57078074588696726, -0.56952051934694714,
            -0.56825895267013149, -0.56699604882510868, -0.56573181078361312,
            -0.5644662415205195, -0.56319934401383409, -0.56193112124468936,
            -0.560661576197336, -0.55939071185913614, -0.5581185312205561,
            -0.5568450372751601, -0.55557023301960218, -0.55429412145362,
            -0.55301670558002747, -0.55173798840470734, -0.55045797293660481,
            -0.54917666218771966, -0.54789405917310019, -0.54661016691083486,
            -0.54532498842204646, -0.54403852673088382, -0.54275078486451589,
            -0.54146176585312344, -0.54017147272989285, -0.53887990853100842,
            -0.53758707629564539, -0.53629297906596318, -0.53499761988709715,
            -0.533701001807153, -0.5324031278771979, -0.531104001151255,
            -0.52980362468629461, -0.52850200154222848, -0.52719913478190128,
            -0.52589502747108463, -0.524589682678469, -0.52328310347565643,
            -0.52197529293715439, -0.52066625414036716, -0.51935599016558964,
            -0.51804450409599934, -0.51673179901764987, -0.51541787801946293,
            -0.51410274419322166, -0.512786400633563, -0.5114688504379703,
            -0.51015009670676681, -0.508830142543107, -0.50750899105297087,
            -0.50618664534515523, -0.50486310853126759, -0.50353838372571758,
            -0.50221247404571079, -0.50088538261124071, -0.49955711254508184,
            -0.49822766697278181, -0.49689704902265447, -0.49556526182577254,
            -0.49423230851595967, -0.49289819222978404, -0.4915629161065499,
            -0.49022648328829116, -0.48888889691976317, -0.487550160148436,
            -0.48621027612448642, -0.48486924800079106, -0.48352707893291874,
            -0.48218377207912272, -0.48083933060033396, -0.47949375766015295,
            -0.478147056424843, -0.47679923006332209, -0.47545028174715587,
            -0.47410021465054997, -0.47274903195034279, -0.47139673682599764,
            -0.47004333245959562, -0.46868882203582796, -0.46733320874198842,
            -0.46597649576796618, -0.46461868630623782, -0.46325978355186015,
            -0.46189979070246273, -0.46053871095824, -0.45917654752194409,
            -0.45781330359887717, -0.45644898239688392, -0.45508358712634384,
            -0.45371712100016387, -0.45234958723377089, -0.45098098904510386,
            -0.44961132965460654, -0.44824061228521989, -0.44686884016237416,
            -0.44549601651398174, -0.4441221445704292, -0.44274722756457,
            -0.44137126873171667, -0.43999427130963326, -0.43861623853852766,
            -0.43723717366104409, -0.43585707992225547, -0.43447596056965565,
            -0.43309381885315196, -0.43171065802505726, -0.43032648134008261,
            -0.42894129205532949, -0.42755509343028208, -0.42616788872679962,
            -0.42477968120910881, -0.42339047414379605, -0.42200027079979968,
            -0.42060907444840251, -0.41921688836322391, -0.41782371582021227,
            -0.41642956009763715, -0.41503442447608163, -0.4136383122384345,
            -0.41224122666988289, -0.41084317105790391, -0.40944414869225759,
            -0.40804416286497869, -0.40664321687036903, -0.40524131400498986,
            -0.40383845756765407, -0.40243465085941843, -0.40102989718357562,
            -0.39962419984564679, -0.39821756215337356, -0.39680998741671031,
            -0.39540147894781635, -0.3939920400610481, -0.39258167407295147,
            -0.39117038430225387, -0.38975817406985641, -0.38834504669882625,
            -0.38693100551438858, -0.38551605384391885, -0.38410019501693504,
            -0.38268343236508978, -0.38126576922216238, -0.37984720892405116,
            -0.37842775480876556, -0.37700741021641826, -0.37558617848921722,
            -0.37416406297145793, -0.37274106700951576, -0.37131719395183749,
            -0.3698924471489341, -0.36846682995337232, -0.36704034571976718,
            -0.36561299780477385, -0.36418478956707989, -0.36275572436739723,
            -0.36132580556845428, -0.35989503653498811, -0.35846342063373654,
            -0.35703096123343, -0.35559766170478385, -0.35416352542049034,
            -0.35272855575521073, -0.35129275608556709, -0.34985612979013492,
            -0.34841868024943456, -0.34698041084592368, -0.34554132496398909,
            -0.34410142598993881, -0.34266071731199438, -0.34121920232028236,
            -0.33977688440682685, -0.33833376696554113, -0.33688985339222005,
            -0.3354451470845316, -0.33399965144200938, -0.33255336986604422,
            -0.33110630575987643, -0.32965846252858749, -0.3282098435790925,
            -0.32676045232013173, -0.32531029216226293, -0.32385936651785285,
            -0.32240767880106985, -0.32095523242787521, -0.31950203081601569,
            -0.31804807738501495, -0.31659337555616585, -0.31513792875252244,
            -0.31368174039889152, -0.31222481392182488, -0.31076715274961147,
            -0.30930876031226873, -0.30784964004153487, -0.30638979537086092,
            -0.30492922973540237, -0.30346794657201132, -0.30200594931922808,
            -0.30054324141727345, -0.29907982630804048, -0.2976157074350862,
            -0.29615088824362379, -0.29468537218051433, -0.29321916269425863,
            -0.29175226323498926, -0.29028467725446233, -0.28881640820604948,
            -0.28734745954472951, -0.28587783472708062, -0.28440753721127188,
            -0.28293657045705539, -0.28146493792575794, -0.27999264308027322,
            -0.27851968938505306, -0.2770460803060999, -0.27557181931095814,
            -0.27409690986870638, -0.272621355449949, -0.271145159526808,
            -0.26966832557291509, -0.26819085706340318, -0.26671275747489837,
            -0.26523403028551179, -0.26375467897483135, -0.26227470702391359,
            -0.26079411791527551, -0.25931291513288623, -0.257831102162159,
            -0.25634868248994291, -0.25486565960451457, -0.25338203699557016,
            -0.25189781815421697, -0.25041300657296522, -0.24892760574572015,
            -0.24744161916777327, -0.24595505033579459, -0.24446790274782415,
            -0.24298017990326387, -0.24149188530286933, -0.2400030224487415,
            -0.23851359484431842, -0.2370236059943672, -0.23553305940497549,
            -0.23404195858354343, -0.23255030703877524, -0.23105810828067111,
            -0.22956536582051887, -0.22807208317088573, -0.22657826384561,
            -0.22508391135979283, -0.22358902922979, -0.22209362097320351,
            -0.22059769010887351, -0.2191012401568698, -0.21760427463848364,
            -0.21610679707621952, -0.21460881099378676, -0.21311031991609136,
            -0.21161132736922755, -0.21011183688046961, -0.20861185197826349,
            -0.20711137619221856, -0.20561041305309924, -0.20410896609281687,
            -0.20260703884442113, -0.2011046348420919, -0.19960175762113097,
            -0.19809841071795356, -0.19659459767008022, -0.19509032201612825,
            -0.19358558729580361, -0.19208039704989244, -0.19057475482025274,
            -0.18906866414980619, -0.1875621285825296, -0.18605515166344663,
            -0.18454773693861962, -0.18303988795514095, -0.18153160826112497,
            -0.18002290140569951, -0.17851377093899751, -0.17700422041214875,
            -0.17549425337727143, -0.17398387338746382, -0.17247308399679595,
            -0.17096188876030122, -0.16945029123396796, -0.16793829497473117,
            -0.1664259035404641, -0.16491312048996992, -0.16339994938297323,
            -0.16188639378011183, -0.16037245724292828, -0.15885814333386145,
            -0.15734345561623825, -0.15582839765426523, -0.1543129730130201,
            -0.15279718525844344, -0.15128103795733022, -0.14976453467732151,
            -0.14824767898689603, -0.14673047445536175, -0.14521292465284746,
            -0.14369503315029447, -0.14217680351944803, -0.14065823933284921,
            -0.1391393441638262, -0.13762012158648604, -0.1361005751757062,
            -0.13458070850712617, -0.13306052515713906, -0.13154002870288312,
            -0.13001922272223335, -0.12849811079379317, -0.12697669649688587,
            -0.12545498341154623, -0.12393297511851216, -0.1224106751992162,
            -0.12088808723577708, -0.11936521481099135, -0.11784206150832498,
            -0.11631863091190475, -0.11479492660651008, -0.11327095217756435,
            -0.11174671121112659, -0.11022220729388306, -0.10869744401313872,
            -0.10717242495680884, -0.10564715371341062, -0.10412163387205459,
            -0.10259586902243628, -0.10106986275482782, -0.099543618660069319,
            -0.0980171403295606, -0.096490431355252593, -0.094963495329638992,
            -0.093436335845747787, -0.091908956497132724, -0.090381360877864983,
            -0.0888535525825246, -0.087325535206192059, -0.0857973123444399,
            -0.084268887593324071, -0.082740264549375692, -0.081211446809592441,
            -0.079682437971430126, -0.078153241632794232, -0.076623861392031492,
            -0.0750943008479213, -0.073564563599667426, -0.072034653246889332,
            -0.070504573389613856, -0.068974327628266746, -0.067443919563664051,
            -0.0659133527970038, -0.064382630929857465, -0.0628517575641614,
            -0.061320736302208578, -0.059789570746639868, -0.058258264500435752,
            -0.056726821166907748, -0.055195244349689941, -0.05366353765273052,
            -0.052131704680283324, -0.050599749036899282, -0.049067674327418015,
            -0.0475354841569593, -0.046003182130914623, -0.044470771854938668,
            -0.04293825693494082, -0.041405640977076739, -0.039872927587739811,
            -0.038340120373552694, -0.036807222941358832, -0.035274238898213947,
            -0.03374117185137758, -0.032208025408304586, -0.030674803176636626,
            -0.029141508764193722, -0.02760814577896574, -0.0260747178291039,
            -0.024541228522912288, -0.023007681468839369, -0.021474080275469508,
            -0.019940428551514441, -0.01840672990580482, -0.01687298794728171,
            -0.0153392062849881, -0.013805388528060391, -0.012271538285719925,
            -0.010737659167264491, -0.00920375478205982, -0.007669828739531097,
            -0.0061358846491544753, -0.0046019261204485705,
            -0.0030679567629659761, -0.0015339801862847655, -0.0 };

          static double hcostab[1024];
          static double hcostabinv[1024];
          static double hsintab[1024];
          static double hsintabinv[1024];
          static const short iv[625]{ 1, 625, 624, 623, 622, 621, 620, 619, 618,
            617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604,
            603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590,
            589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576,
            575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562,
            561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548,
            547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534,
            533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520,
            519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506,
            505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492,
            491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478,
            477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464,
            463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450,
            449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436,
            435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422,
            421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408,
            407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394,
            393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380,
            379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366,
            365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352,
            351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338,
            337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324,
            323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310,
            309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296,
            295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282,
            281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268,
            267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254,
            253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240,
            239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226,
            225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212,
            211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198,
            197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184,
            183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170,
            169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156,
            155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142,
            141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128,
            127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114,
            113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100,
            99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83,
            82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66,
            65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,
            48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32,
            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15,
            14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 };

          double re_tmp;
          double temp_im;
          double temp_re;
          double temp_re_tmp;
          double twid_im;
          double twid_re;
          int i;
          int iDelta;
          int iDelta2;
          int iheight;
          int ihi;
          int iy;
          int ju;
          int k;
          int temp_re_tmp_tmp;
          boolean_T tst;
          for (i = 0; i < 1024; i++) {
            iy = ((i + 1) << 1) - 2;
            hcostab[i] = dv4[iy];
            hsintab[i] = b_dv[iy];
            hcostabinv[i] = costabinv[iy];
            hsintabinv[i] = sintabinv[iy];
          }

          for (iy = 0; iy < 625; iy++) {
            ju = iy << 1;
            temp_re = x[ju];
            temp_im = x[ju + 1];
            twid_im = wwc[iy + 624].re;
            re_tmp = wwc[iy + 624].im;
            ytmp[iy].re = twid_im * temp_re + re_tmp * temp_im;
            ytmp[iy].im = twid_im * temp_im - re_tmp * temp_re;
          }

          std::memset(&fy[0], 0, 2048U * sizeof(creal_T));
          iy = 0;
          ju = 0;
          for (i = 0; i < 624; i++) {
            fy[iy] = ytmp[i];
            iy = 2048;
            tst = true;
            while (tst) {
              iy >>= 1;
              ju ^= iy;
              tst = ((ju & iy) == 0);
            }

            iy = ju;
          }

          fy[iy] = ytmp[624];
          for (i = 0; i <= 2046; i += 2) {
            temp_re_tmp = fy[i + 1].re;
            temp_im = fy[i + 1].im;
            re_tmp = fy[i].re;
            twid_re = fy[i].im;
            fy[i + 1].re = re_tmp - temp_re_tmp;
            fy[i + 1].im = twid_re - temp_im;
            fy[i].re = re_tmp + temp_re_tmp;
            fy[i].im = twid_re + temp_im;
          }

          iDelta = 2;
          iDelta2 = 4;
          k = 512;
          iheight = 2045;
          while (k > 0) {
            for (i = 0; i < iheight; i += iDelta2) {
              ju = i + iDelta;
              temp_re = fy[ju].re;
              temp_im = fy[ju].im;
              fy[ju].re = fy[i].re - temp_re;
              fy[ju].im = fy[i].im - temp_im;
              fy[i].re += temp_re;
              fy[i].im += temp_im;
            }

            iy = 1;
            for (ju = k; ju < 1024; ju += k) {
              twid_re = hcostab[ju];
              twid_im = hsintab[ju];
              i = iy;
              ihi = iy + iheight;
              while (i < ihi) {
                temp_re_tmp_tmp = i + iDelta;
                temp_re_tmp = fy[temp_re_tmp_tmp].im;
                temp_im = fy[temp_re_tmp_tmp].re;
                temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
                temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
                fy[temp_re_tmp_tmp].re = fy[i].re - temp_re;
                fy[temp_re_tmp_tmp].im = fy[i].im - temp_im;
                fy[i].re += temp_re;
                fy[i].im += temp_im;
                i += iDelta2;
              }

              iy++;
            }

            k /= 2;
            iDelta = iDelta2;
            iDelta2 += iDelta2;
            iheight -= iDelta;
          }

          std::memset(&fv[0], 0, 2048U * sizeof(creal_T));
          iy = 0;
          ju = 0;
          for (i = 0; i < 1248; i++) {
            fv[iy] = wwc[i];
            iy = 2048;
            tst = true;
            while (tst) {
              iy >>= 1;
              ju ^= iy;
              tst = ((ju & iy) == 0);
            }

            iy = ju;
          }

          fv[iy] = wwc[1248];
          for (i = 0; i <= 2046; i += 2) {
            temp_re_tmp = fv[i + 1].re;
            temp_im = fv[i + 1].im;
            re_tmp = fv[i].re;
            twid_re = fv[i].im;
            fv[i + 1].re = re_tmp - temp_re_tmp;
            fv[i + 1].im = twid_re - temp_im;
            fv[i].re = re_tmp + temp_re_tmp;
            fv[i].im = twid_re + temp_im;
          }

          iDelta = 2;
          iDelta2 = 4;
          k = 512;
          iheight = 2045;
          while (k > 0) {
            for (i = 0; i < iheight; i += iDelta2) {
              ju = i + iDelta;
              temp_re = fv[ju].re;
              temp_im = fv[ju].im;
              fv[ju].re = fv[i].re - temp_re;
              fv[ju].im = fv[i].im - temp_im;
              fv[i].re += temp_re;
              fv[i].im += temp_im;
            }

            iy = 1;
            for (ju = k; ju < 1024; ju += k) {
              twid_re = hcostab[ju];
              twid_im = hsintab[ju];
              i = iy;
              ihi = iy + iheight;
              while (i < ihi) {
                temp_re_tmp_tmp = i + iDelta;
                temp_re_tmp = fv[temp_re_tmp_tmp].im;
                temp_im = fv[temp_re_tmp_tmp].re;
                temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
                temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
                fv[temp_re_tmp_tmp].re = fv[i].re - temp_re;
                fv[temp_re_tmp_tmp].im = fv[i].im - temp_im;
                fv[i].re += temp_re;
                fv[i].im += temp_im;
                i += iDelta2;
              }

              iy++;
            }

            k /= 2;
            iDelta = iDelta2;
            iDelta2 += iDelta2;
            iheight -= iDelta;
          }

          for (iy = 0; iy < 2048; iy++) {
            re_tmp = fy[iy].re;
            temp_im = fv[iy].im;
            twid_re = fy[iy].im;
            twid_im = fv[iy].re;
            fy[iy].re = re_tmp * twid_im - twid_re * temp_im;
            fy[iy].im = re_tmp * temp_im + twid_re * twid_im;
          }

          iy = 0;
          ju = 0;
          for (i = 0; i < 2047; i++) {
            fv[iy] = fy[i];
            iy = 2048;
            tst = true;
            while (tst) {
              iy >>= 1;
              ju ^= iy;
              tst = ((ju & iy) == 0);
            }

            iy = ju;
          }

          fv[iy] = fy[2047];
          for (i = 0; i <= 2046; i += 2) {
            temp_re_tmp = fv[i + 1].re;
            temp_im = fv[i + 1].im;
            re_tmp = fv[i].re;
            twid_re = fv[i].im;
            fv[i + 1].re = re_tmp - temp_re_tmp;
            fv[i + 1].im = twid_re - temp_im;
            fv[i].re = re_tmp + temp_re_tmp;
            fv[i].im = twid_re + temp_im;
          }

          iDelta = 2;
          iDelta2 = 4;
          k = 512;
          iheight = 2045;
          while (k > 0) {
            for (i = 0; i < iheight; i += iDelta2) {
              ju = i + iDelta;
              temp_re = fv[ju].re;
              temp_im = fv[ju].im;
              fv[ju].re = fv[i].re - temp_re;
              fv[ju].im = fv[i].im - temp_im;
              fv[i].re += temp_re;
              fv[i].im += temp_im;
            }

            iy = 1;
            for (ju = k; ju < 1024; ju += k) {
              twid_re = hcostabinv[ju];
              twid_im = hsintabinv[ju];
              i = iy;
              ihi = iy + iheight;
              while (i < ihi) {
                temp_re_tmp_tmp = i + iDelta;
                temp_re_tmp = fv[temp_re_tmp_tmp].im;
                temp_im = fv[temp_re_tmp_tmp].re;
                temp_re = twid_re * temp_im - twid_im * temp_re_tmp;
                temp_im = twid_re * temp_re_tmp + twid_im * temp_im;
                fv[temp_re_tmp_tmp].re = fv[i].re - temp_re;
                fv[temp_re_tmp_tmp].im = fv[i].im - temp_im;
                fv[i].re += temp_re;
                fv[i].im += temp_im;
                i += iDelta2;
              }

              iy++;
            }

            k /= 2;
            iDelta = iDelta2;
            iDelta2 += iDelta2;
            iheight -= iDelta;
          }

          for (iy = 0; iy < 2048; iy++) {
            fv[iy].re *= 0.00048828125;
            fv[iy].im *= 0.00048828125;
          }

          for (k = 0; k < 625; k++) {
            twid_im = wwc[k + 624].re;
            re_tmp = fv[k + 624].im;
            temp_im = wwc[k + 624].im;
            twid_re = fv[k + 624].re;
            ytmp[k].re = twid_im * twid_re + temp_im * re_tmp;
            ytmp[k].im = twid_im * re_tmp - temp_im * twid_re;
          }

          for (i = 0; i < 625; i++) {
            double b_ytmp_re_tmp;
            double ytmp_re_tmp;
            temp_im = ytmp[i].re;
            twid_re = reconVar1[i].im;
            twid_im = ytmp[i].im;
            re_tmp = reconVar1[i].re;
            iy = iv[i] - 1;
            temp_re = ytmp[iy].re;
            temp_re_tmp = -ytmp[iy].im;
            ytmp_re_tmp = reconVar2[i].im;
            b_ytmp_re_tmp = reconVar2[i].re;
            y[i].re = 0.5 * ((temp_im * re_tmp - twid_im * twid_re) + (temp_re *
              b_ytmp_re_tmp - temp_re_tmp * ytmp_re_tmp));
            y[i].im = 0.5 * ((temp_im * twid_re + twid_im * re_tmp) + (temp_re *
              ytmp_re_tmp + temp_re_tmp * b_ytmp_re_tmp));
            y[i + 625].re = 0.5 * ((temp_im * b_ytmp_re_tmp - twid_im *
              ytmp_re_tmp) + (temp_re * re_tmp - temp_re_tmp * twid_re));
            y[i + 625].im = 0.5 * ((temp_im * ytmp_re_tmp + twid_im *
              b_ytmp_re_tmp) + (temp_re * twid_re + temp_re_tmp * re_tmp));
          }
        }

        //
        // Arguments    : ::coder::array<double, 2U> &in1
        //                int in2
        //                const double in3[100]
        //                const double in4_data[]
        //                const int &in4_size
        //                const double in5[2]
        // Return Type  : void
        //
      }
    }
  }

  static void binary_expand_op(::coder::array<double, 2U> &in1, int in2, const
    double in3[100], const double in4_data[], const int &in4_size, const double
    in5[2])
  {
    double b_in5;
    int loop_ub;
    int stride_0_0;
    b_in5 = in5[in2];
    stride_0_0 = (in4_size != 1);
    loop_ub = in1.size(0);
    for (int i{0}; i < loop_ub; i++) {
      in1[i + in1.size(0) * in2] = (100.0 / (in3[i] + 1.0) - in4_data[i *
        stride_0_0]) / b_in5;
    }
  }

  //
  // Arguments    : ::coder::array<double, 2U> &in1
  //                int in2
  // Return Type  : void
  //
  static void binary_expand_op_1(::coder::array<double, 2U> &in1, int in2)
  {
    ::coder::array<double, 2U> r;
    int loop_ub;
    int stride_1_0;
    if (in1.size(0) == 1) {
      loop_ub = static_cast<signed char>(in2);
    } else {
      loop_ub = in1.size(0);
    }

    r.set_size(loop_ub, 2);
    stride_1_0 = (in1.size(0) != 1);
    for (int i{0}; i < 2; i++) {
      for (int i1{0}; i1 < loop_ub; i1++) {
        r[i1 + r.size(0) * i] = in1[i1 * stride_1_0 + in1.size(0) * i];
      }
    }

    in1.set_size(r.size(0), 2);
    loop_ub = r.size(0);
    for (int i{0}; i < 2; i++) {
      for (int i1{0}; i1 < loop_ub; i1++) {
        in1[i1 + in1.size(0) * i] = r[i1 + r.size(0) * i];
      }
    }
  }

  //
  // Arguments    : const double x[2]
  // Return Type  : double
  //
  namespace coder
  {
    static double b_norm(const double x[2])
    {
      double absxk;
      double scale;
      double t;
      double y;
      scale = 3.3121686421112381E-170;
      absxk = std::abs(x[0]);
      if (absxk > 3.3121686421112381E-170) {
        y = 1.0;
        scale = absxk;
      } else {
        t = absxk / 3.3121686421112381E-170;
        y = t * t;
      }

      absxk = std::abs(x[1]);
      if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
      } else {
        t = absxk / scale;
        y += t * t;
      }

      return scale * std::sqrt(y);
    }

    //
    // Arguments    : const double x_data[]
    //                const int x_size[2]
    // Return Type  : double
    //
    static double b_std(const double x_data[], const int x_size[2])
    {
      double y;
      int n;
      n = x_size[1];
      if (x_size[1] == 0) {
        y = rtNaN;
      } else if (x_size[1] == 1) {
        if ((!std::isinf(x_data[0])) && (!std::isnan(x_data[0]))) {
          y = 0.0;
        } else {
          y = rtNaN;
        }
      } else {
        double absdiff_data[76];
        double xbar;
        xbar = x_data[0];
        for (int k{2}; k <= n; k++) {
          xbar += x_data[k - 1];
        }

        xbar /= static_cast<double>(x_size[1]);
        for (int k{0}; k < n; k++) {
          absdiff_data[k] = std::abs(x_data[k] - xbar);
        }

        y = internal::blas::xnrm2(x_size[1], absdiff_data) / std::sqrt(
          static_cast<double>(x_size[1]) - 1.0);
      }

      return y;
    }

    //
    // Arguments    : const double b[9]
    //                const double a[9]
    //                const double x[120000]
    //                double y[120000]
    // Return Type  : void
    //
    static void filter(const double b[9], const double a[9], const double x
                       [120000], double y[120000])
    {
      std::memset(&y[0], 0, 120000U * sizeof(double));
      for (int c{0}; c < 8; c++) {
        int offset;
        offset = c * 15000 - 1;
        for (int k{0}; k < 15000; k++) {
          double as;
          int i;
          int jp;
          int y_tmp;
          jp = (offset + k) + 1;
          if (15000 - k < 9) {
            i = 14999 - k;
          } else {
            i = 8;
          }

          for (int j{0}; j <= i; j++) {
            y_tmp = jp + j;
            y[y_tmp] += x[jp] * b[j];
          }

          if (14999 - k < 8) {
            i = 14998 - k;
          } else {
            i = 7;
          }

          as = -y[jp];
          for (int j{0}; j <= i; j++) {
            y_tmp = (jp + j) + 1;
            y[y_tmp] += as * a[j + 1];
          }
        }
      }
    }

    //
    // Arguments    : int n
    //                const ::coder::array<double, 2U> &x
    //                int ix0
    // Return Type  : double
    //
    namespace internal
    {
      namespace blas
      {
        static double xnrm2(int n, const ::coder::array<double, 2U> &x, int ix0)
        {
          double y;
          y = 0.0;
          if (n >= 1) {
            if (n == 1) {
              y = std::abs(x[ix0 - 1]);
            } else {
              double scale;
              int kend;
              scale = 3.3121686421112381E-170;
              kend = (ix0 + n) - 1;
              for (int k{ix0}; k <= kend; k++) {
                double absxk;
                absxk = std::abs(x[k - 1]);
                if (absxk > scale) {
                  double t;
                  t = scale / absxk;
                  y = y * t * t + 1.0;
                  scale = absxk;
                } else {
                  double t;
                  t = absxk / scale;
                  y += t * t;
                }
              }

              y = scale * std::sqrt(y);
            }
          }

          return y;
        }

        //
        // Arguments    : int n
        //                const double x_data[]
        // Return Type  : double
        //
        static double xnrm2(int n, const double x_data[])
        {
          double y;
          y = 0.0;
          if (n == 1) {
            y = std::abs(x_data[0]);
          } else {
            double scale;
            int i;
            scale = 3.3121686421112381E-170;
            i = static_cast<unsigned char>(n);
            for (int k{0}; k < i; k++) {
              double absxk;
              absxk = std::abs(x_data[k]);
              if (absxk > scale) {
                double t;
                t = scale / absxk;
                y = y * t * t + 1.0;
                scale = absxk;
              } else {
                double t;
                t = absxk / scale;
                y += t * t;
              }
            }

            y = scale * std::sqrt(y);
          }

          return y;
        }

        //
        // Arguments    : ::coder::array<double, 2U> &A
        //                double tau_data[]
        //                int jpvt_data[]
        //                int jpvt_size[2]
        // Return Type  : int
        //
      }

      namespace lapack
      {
        static int xgeqp3(::coder::array<double, 2U> &A, double tau_data[], int
                          jpvt_data[], int jpvt_size[2])
        {
          ::coder::array<double, 2U> x;
          int itemp;
          int m;
          int n;
          int tau_size;
          m = A.size(0);
          n = A.size(1);
          itemp = A.size(0);
          tau_size = A.size(1);
          if (itemp <= tau_size) {
            tau_size = itemp;
          }

          if (tau_size - 1 >= 0) {
            std::memset(&tau_data[0], 0, static_cast<unsigned int>(tau_size) *
                        sizeof(double));
          }

          if ((A.size(0) == 0) || (tau_size < 1)) {
            int jA;
            jpvt_size[0] = 1;
            jpvt_size[1] = A.size(1);
            jA = A.size(1);
            for (int ix{0}; ix < jA; ix++) {
              jpvt_data[ix] = ix + 1;
            }
          } else {
            double vn1_data[2];
            double vn2_data[2];
            double work_data[2];
            double temp;
            int jA;
            int lastc;
            int ma;
            jpvt_size[0] = 1;
            jpvt_size[1] = A.size(1);
            jA = A.size(1);
            ma = A.size(0);
            for (lastc = 0; lastc < jA; lastc++) {
              jpvt_data[lastc] = lastc + 1;
              work_data[lastc] = 0.0;
              temp = blas::xnrm2(m, A, lastc * ma + 1);
              vn1_data[lastc] = temp;
              vn2_data[lastc] = temp;
            }

            for (int i{0}; i < tau_size; i++) {
              double atmp;
              double beta1;
              int b_i;
              int i1;
              int ii;
              int ip1;
              int ix;
              int knt;
              int mmi;
              int nmi;
              int pvt;
              ip1 = i + 2;
              knt = i * ma;
              ii = knt + i;
              nmi = n - i;
              mmi = m - i;
              if (nmi < 1) {
                itemp = -1;
              } else {
                itemp = 0;
                if ((nmi > 1) && (std::abs(vn1_data[i + 1]) > std::abs
                                  (vn1_data[i]))) {
                  itemp = 1;
                }
              }

              pvt = i + itemp;
              if (pvt != i) {
                ix = pvt * ma;
                x.set_size(A.size(0), A.size(1));
                jA = A.size(0) * A.size(1);
                for (b_i = 0; b_i < jA; b_i++) {
                  x[b_i] = A[b_i];
                }

                for (lastc = 0; lastc < m; lastc++) {
                  itemp = ix + lastc;
                  temp = x[itemp];
                  b_i = knt + lastc;
                  x[itemp] = x[b_i];
                  x[b_i] = temp;
                }

                A.set_size(x.size(0), x.size(1));
                jA = x.size(1);
                for (b_i = 0; b_i < jA; b_i++) {
                  itemp = x.size(0);
                  for (i1 = 0; i1 < itemp; i1++) {
                    A[i1 + A.size(0) * b_i] = x[i1 + x.size(0) * b_i];
                  }
                }

                itemp = jpvt_data[pvt];
                jpvt_data[pvt] = jpvt_data[i];
                jpvt_data[i] = itemp;
                vn1_data[pvt] = vn1_data[i];
                vn2_data[pvt] = vn2_data[i];
              }

              if (i + 1 < m) {
                ix = ii + 2;
                atmp = A[ii];
                tau_data[i] = 0.0;
                if (mmi > 0) {
                  temp = blas::xnrm2(mmi - 1, A, ii + 2);
                  if (temp != 0.0) {
                    beta1 = rt_hypotd_snf(A[ii], temp);
                    if (A[ii] >= 0.0) {
                      beta1 = -beta1;
                    }

                    if (std::abs(beta1) < 1.0020841800044864E-292) {
                      knt = 0;
                      b_i = ii + mmi;
                      do {
                        knt++;
                        x.set_size(A.size(0), A.size(1));
                        jA = A.size(0) * A.size(1);
                        for (i1 = 0; i1 < jA; i1++) {
                          x[i1] = A[i1];
                        }

                        for (lastc = ix; lastc <= b_i; lastc++) {
                          x[lastc - 1] = 9.9792015476736E+291 * x[lastc - 1];
                        }

                        A.set_size(x.size(0), x.size(1));
                        jA = x.size(1);
                        for (i1 = 0; i1 < jA; i1++) {
                          itemp = x.size(0);
                          for (lastc = 0; lastc < itemp; lastc++) {
                            A[lastc + A.size(0) * i1] = x[lastc + x.size(0) * i1];
                          }
                        }

                        beta1 *= 9.9792015476736E+291;
                        atmp *= 9.9792015476736E+291;
                      } while ((std::abs(beta1) < 1.0020841800044864E-292) &&
                               (knt < 20));

                      beta1 = rt_hypotd_snf(atmp, blas::xnrm2(mmi - 1, x, ii + 2));
                      if (atmp >= 0.0) {
                        beta1 = -beta1;
                      }

                      tau_data[i] = (beta1 - atmp) / beta1;
                      temp = 1.0 / (atmp - beta1);
                      for (lastc = ix; lastc <= b_i; lastc++) {
                        x[lastc - 1] = temp * x[lastc - 1];
                      }

                      A.set_size(x.size(0), x.size(1));
                      jA = x.size(1);
                      for (b_i = 0; b_i < jA; b_i++) {
                        itemp = x.size(0);
                        for (i1 = 0; i1 < itemp; i1++) {
                          A[i1 + A.size(0) * b_i] = x[i1 + x.size(0) * b_i];
                        }
                      }

                      for (lastc = 0; lastc < knt; lastc++) {
                        beta1 *= 1.0020841800044864E-292;
                      }

                      atmp = beta1;
                    } else {
                      tau_data[i] = (beta1 - A[ii]) / beta1;
                      temp = 1.0 / (A[ii] - beta1);
                      x.set_size(A.size(0), A.size(1));
                      jA = A.size(0) * A.size(1);
                      for (b_i = 0; b_i < jA; b_i++) {
                        x[b_i] = A[b_i];
                      }

                      b_i = ii + mmi;
                      for (lastc = ix; lastc <= b_i; lastc++) {
                        x[lastc - 1] = temp * x[lastc - 1];
                      }

                      A.set_size(x.size(0), x.size(1));
                      jA = x.size(1);
                      for (b_i = 0; b_i < jA; b_i++) {
                        itemp = x.size(0);
                        for (i1 = 0; i1 < itemp; i1++) {
                          A[i1 + A.size(0) * b_i] = x[i1 + x.size(0) * b_i];
                        }
                      }

                      atmp = beta1;
                    }
                  }
                }

                A[ii] = atmp;
              } else {
                tau_data[i] = 0.0;
              }

              if (i + 1 < n) {
                atmp = A[ii];
                A[ii] = 1.0;
                jA = (ii + ma) + 1;
                if (tau_data[0] != 0.0) {
                  boolean_T exitg2;
                  pvt = mmi - 1;
                  itemp = (ii + mmi) - 1;
                  while ((pvt + 1 > 0) && (A[itemp] == 0.0)) {
                    pvt--;
                    itemp--;
                  }

                  lastc = nmi - 2;
                  exitg2 = false;
                  while ((!exitg2) && (lastc + 1 > 0)) {
                    int exitg1;
                    ix = jA;
                    do {
                      exitg1 = 0;
                      if (ix <= jA + pvt) {
                        if (A[ix - 1] != 0.0) {
                          exitg1 = 1;
                        } else {
                          ix++;
                        }
                      } else {
                        lastc = -1;
                        exitg1 = 2;
                      }
                    } while (exitg1 == 0);

                    if (exitg1 == 1) {
                      exitg2 = true;
                    }
                  }
                } else {
                  pvt = -1;
                  lastc = -1;
                }

                if (pvt + 1 > 0) {
                  if (lastc + 1 != 0) {
                    if (lastc >= 0) {
                      work_data[0] = 0.0;
                    }

                    itemp = 0;
                    b_i = jA + ma * lastc;
                    for (knt = jA; ma < 0 ? knt >= b_i : knt <= b_i; knt += ma)
                    {
                      temp = 0.0;
                      i1 = knt + pvt;
                      for (ix = knt; ix <= i1; ix++) {
                        temp += A[ix - 1] * A[(ii + ix) - knt];
                      }

                      work_data[itemp] += temp;
                      itemp++;
                    }
                  }

                  if (!(-tau_data[0] == 0.0)) {
                    for (ix = 0; ix <= lastc; ix++) {
                      if (work_data[0] != 0.0) {
                        temp = work_data[0] * -tau_data[0];
                        b_i = pvt + jA;
                        for (itemp = jA; itemp <= b_i; itemp++) {
                          A[itemp - 1] = A[itemp - 1] + A[(ii + itemp) - jA] *
                            temp;
                        }
                      }

                      jA += ma;
                    }
                  }
                }

                A[ii] = atmp;
              }

              for (ix = ip1; ix <= n; ix++) {
                itemp = i + ma;
                if (vn1_data[1] != 0.0) {
                  temp = std::abs(A[itemp]) / vn1_data[1];
                  temp = 1.0 - temp * temp;
                  if (temp < 0.0) {
                    temp = 0.0;
                  }

                  beta1 = vn1_data[1] / vn2_data[1];
                  beta1 = temp * (beta1 * beta1);
                  if (beta1 <= 1.4901161193847656E-8) {
                    if (i + 1 < m) {
                      temp = blas::xnrm2(mmi - 1, A, itemp + 2);
                      vn1_data[1] = temp;
                      vn2_data[1] = temp;
                    } else {
                      vn1_data[1] = 0.0;
                      vn2_data[1] = 0.0;
                    }
                  } else {
                    vn1_data[1] *= std::sqrt(temp);
                  }
                }
              }
            }
          }

          return tau_size;
        }

        //
        // Arguments    : int idx[8]
        //                double x[8]
        //                int np
        //                int nq
        //                int iwork[8]
        //                double xwork[8]
        // Return Type  : void
        //
      }

      static void merge(int idx[8], double x[8], int np, int nq, int iwork[8],
                        double xwork[8])
      {
        if (nq != 0) {
          int iout;
          int offset1;
          int p;
          int q;
          offset1 = np + nq;
          if (offset1 - 1 >= 0) {
            std::copy(&idx[0], &idx[offset1], &iwork[0]);
            std::copy(&x[0], &x[offset1], &xwork[0]);
          }

          p = 0;
          q = np;
          iout = -1;
          int exitg1;
          do {
            exitg1 = 0;
            iout++;
            if (xwork[p] >= xwork[q]) {
              idx[iout] = iwork[p];
              x[iout] = xwork[p];
              if (p + 1 < np) {
                p++;
              } else {
                exitg1 = 1;
              }
            } else {
              idx[iout] = iwork[q];
              x[iout] = xwork[q];
              if (q + 1 < offset1) {
                q++;
              } else {
                offset1 = iout - p;
                for (iout = p + 1; iout <= np; iout++) {
                  q = offset1 + iout;
                  idx[q] = iwork[iout - 1];
                  x[q] = xwork[iout - 1];
                }

                exitg1 = 1;
              }
            }
          } while (exitg1 == 0);
        }
      }

      //
      // Arguments    : const double x_data[]
      //                const int x_size[2]
      //                int &idx
      // Return Type  : double
      //
      static double minimum(const double x_data[], const int x_size[2], int &idx)
      {
        double ex;
        int last;
        last = x_size[1];
        if (x_size[1] <= 2) {
          if (x_size[1] == 1) {
            ex = x_data[0];
            idx = 1;
          } else {
            ex = x_data[x_size[1] - 1];
            if ((x_data[0] > ex) || (std::isnan(x_data[0]) && (!std::isnan(ex))))
            {
              idx = x_size[1];
            } else {
              ex = x_data[0];
              idx = 1;
            }
          }
        } else {
          int k;
          if (!std::isnan(x_data[0])) {
            idx = 1;
          } else {
            boolean_T exitg1;
            idx = 0;
            k = 2;
            exitg1 = false;
            while ((!exitg1) && (k <= last)) {
              if (!std::isnan(x_data[k - 1])) {
                idx = k;
                exitg1 = true;
              } else {
                k++;
              }
            }
          }

          if (idx == 0) {
            ex = x_data[0];
            idx = 1;
          } else {
            int i;
            ex = x_data[idx - 1];
            i = idx + 1;
            for (k = i; k <= last; k++) {
              double d;
              d = x_data[k - 1];
              if (ex > d) {
                ex = d;
                idx = k;
              }
            }
          }
        }

        return ex;
      }

      //
      // Arguments    : double x_data[]
      //                const boolean_T idx[100]
      // Return Type  : int
      //
      static int nullAssignment(double x_data[], const boolean_T idx[100])
      {
        int k0;
        int n;
        n = 0;
        k0 = -1;
        for (int k{0}; k < 100; k++) {
          boolean_T b;
          b = idx[k];
          n += b;
          if (!b) {
            k0++;
            x_data[k0] = x_data[k];
          }
        }

        if (100 - n < 1) {
          n = -1;
        } else {
          n = 99 - n;
        }

        return n + 1;
      }

      //
      // Arguments    : double v[100]
      //                int n
      //                int vlen
      //                int &nfirst
      //                int &nlast
      // Return Type  : double
      //
      static double quickselect(double v[100], int n, int vlen, int &nfirst, int
        &nlast)
      {
        double vn;
        if (n > vlen) {
          vn = rtNaN;
          nfirst = 0;
          nlast = 0;
        } else {
          int ia;
          int ib;
          int ilast;
          int ipiv;
          int oldnv;
          boolean_T checkspeed;
          boolean_T exitg1;
          boolean_T isslow;
          ipiv = n;
          ia = 0;
          ib = vlen - 1;
          nfirst = 1;
          ilast = vlen - 1;
          oldnv = vlen;
          checkspeed = false;
          isslow = false;
          exitg1 = false;
          while ((!exitg1) && (ia + 1 < ib + 1)) {
            double vref;
            boolean_T guard1;
            vref = v[ipiv - 1];
            v[ipiv - 1] = v[ib];
            v[ib] = vref;
            ilast = ia;
            ipiv = -1;
            for (int k{ia + 1}; k <= ib; k++) {
              double vk_tmp;
              vk_tmp = v[k - 1];
              if (vk_tmp == vref) {
                v[k - 1] = v[ilast];
                v[ilast] = vk_tmp;
                ipiv++;
                ilast++;
              } else if (vk_tmp < vref) {
                v[k - 1] = v[ilast];
                v[ilast] = vk_tmp;
                ilast++;
              }
            }

            v[ib] = v[ilast];
            v[ilast] = vref;
            guard1 = false;
            if (n <= ilast + 1) {
              nfirst = ilast - ipiv;
              if (n >= nfirst) {
                exitg1 = true;
              } else {
                ib = ilast - 1;
                guard1 = true;
              }
            } else {
              ia = ilast + 1;
              guard1 = true;
            }

            if (guard1) {
              int c;
              c = (ib - ia) + 1;
              if (checkspeed) {
                isslow = (c > oldnv / 2);
                oldnv = c;
              }

              checkspeed = !checkspeed;
              if (isslow) {
                while (c > 1) {
                  int i;
                  int ngroupsof5;
                  ngroupsof5 = c / 5;
                  nlast = c - ngroupsof5 * 5;
                  c = ngroupsof5;
                  i = static_cast<unsigned char>(ngroupsof5);
                  for (int k{0}; k < i; k++) {
                    ipiv = (ia + k * 5) + 1;
                    ipiv = thirdOfFive(v, ipiv, ipiv + 4) - 1;
                    ilast = ia + k;
                    vref = v[ilast];
                    v[ilast] = v[ipiv];
                    v[ipiv] = vref;
                  }

                  if (nlast > 0) {
                    ipiv = (ia + ngroupsof5 * 5) + 1;
                    ipiv = thirdOfFive(v, ipiv, (ipiv + nlast) - 1) - 1;
                    ilast = ia + ngroupsof5;
                    vref = v[ilast];
                    v[ilast] = v[ipiv];
                    v[ipiv] = vref;
                    c = ngroupsof5 + 1;
                  }
                }
              } else if (c >= 3) {
                ipiv = ia + static_cast<int>(static_cast<unsigned int>(c - 1) >>
                  1);
                if (v[ia] < v[ipiv]) {
                  if (!(v[ipiv] < v[ib])) {
                    if (v[ia] < v[ib]) {
                      ipiv = ib;
                    } else {
                      ipiv = ia;
                    }
                  }
                } else if (v[ia] < v[ib]) {
                  ipiv = ia;
                } else if (v[ipiv] < v[ib]) {
                  ipiv = ib;
                }

                if (ipiv + 1 > ia + 1) {
                  vref = v[ia];
                  v[ia] = v[ipiv];
                  v[ipiv] = vref;
                }
              }

              ipiv = ia + 1;
              nfirst = ia + 1;
              ilast = ib;
            }
          }

          vn = v[ilast];
          nlast = ilast + 1;
        }

        return vn;
      }

      //
      // Arguments    : double x[8]
      //                int idx[8]
      // Return Type  : void
      //
      static void sort(double x[8], int idx[8])
      {
        double xwork[8];
        double x4[4];
        int iwork[8];
        int b_i1;
        int i;
        int i1;
        int ib;
        int nNaNs;
        int quartetOffset;
        signed char idx4[4];
        x4[0] = 0.0;
        idx4[0] = 0;
        x4[1] = 0.0;
        idx4[1] = 0;
        x4[2] = 0.0;
        idx4[2] = 0;
        x4[3] = 0.0;
        idx4[3] = 0;
        std::memset(&xwork[0], 0, 8U * sizeof(double));
        for (quartetOffset = 0; quartetOffset < 8; quartetOffset++) {
          idx[quartetOffset] = 0;
        }

        nNaNs = 0;
        ib = 0;
        for (int k{0}; k < 8; k++) {
          if (std::isnan(x[k])) {
            idx[7 - nNaNs] = k + 1;
            xwork[7 - nNaNs] = x[k];
            nNaNs++;
          } else {
            ib++;
            idx4[ib - 1] = static_cast<signed char>(k + 1);
            x4[ib - 1] = x[k];
            if (ib == 4) {
              double d;
              double d1;
              int i3;
              int i4;
              quartetOffset = k - nNaNs;
              if (x4[0] >= x4[1]) {
                i1 = 1;
                ib = 2;
              } else {
                i1 = 2;
                ib = 1;
              }

              if (x4[2] >= x4[3]) {
                i3 = 3;
                i4 = 4;
              } else {
                i3 = 4;
                i4 = 3;
              }

              d = x4[i3 - 1];
              d1 = x4[i1 - 1];
              if (d1 >= d) {
                d1 = x4[ib - 1];
                if (d1 >= d) {
                  i = i1;
                  b_i1 = ib;
                  i1 = i3;
                  ib = i4;
                } else if (d1 >= x4[i4 - 1]) {
                  i = i1;
                  b_i1 = i3;
                  i1 = ib;
                  ib = i4;
                } else {
                  i = i1;
                  b_i1 = i3;
                  i1 = i4;
                }
              } else {
                d = x4[i4 - 1];
                if (d1 >= d) {
                  if (x4[ib - 1] >= d) {
                    i = i3;
                    b_i1 = i1;
                    i1 = ib;
                    ib = i4;
                  } else {
                    i = i3;
                    b_i1 = i1;
                    i1 = i4;
                  }
                } else {
                  i = i3;
                  b_i1 = i4;
                }
              }

              idx[quartetOffset - 3] = idx4[i - 1];
              idx[quartetOffset - 2] = idx4[b_i1 - 1];
              idx[quartetOffset - 1] = idx4[i1 - 1];
              idx[quartetOffset] = idx4[ib - 1];
              x[quartetOffset - 3] = x4[i - 1];
              x[quartetOffset - 2] = x4[b_i1 - 1];
              x[quartetOffset - 1] = x4[i1 - 1];
              x[quartetOffset] = x4[ib - 1];
              ib = 0;
            }
          }
        }

        if (ib > 0) {
          signed char perm[4];
          perm[1] = 0;
          perm[2] = 0;
          perm[3] = 0;
          if (ib == 1) {
            perm[0] = 1;
          } else if (ib == 2) {
            if (x4[0] >= x4[1]) {
              perm[0] = 1;
              perm[1] = 2;
            } else {
              perm[0] = 2;
              perm[1] = 1;
            }
          } else if (x4[0] >= x4[1]) {
            if (x4[1] >= x4[2]) {
              perm[0] = 1;
              perm[1] = 2;
              perm[2] = 3;
            } else if (x4[0] >= x4[2]) {
              perm[0] = 1;
              perm[1] = 3;
              perm[2] = 2;
            } else {
              perm[0] = 3;
              perm[1] = 1;
              perm[2] = 2;
            }
          } else if (x4[0] >= x4[2]) {
            perm[0] = 2;
            perm[1] = 1;
            perm[2] = 3;
          } else if (x4[1] >= x4[2]) {
            perm[0] = 2;
            perm[1] = 3;
            perm[2] = 1;
          } else {
            perm[0] = 3;
            perm[1] = 2;
            perm[2] = 1;
          }

          i = static_cast<unsigned char>(ib);
          for (int k{0}; k < i; k++) {
            quartetOffset = ((k - nNaNs) - ib) + 8;
            b_i1 = perm[k];
            idx[quartetOffset] = idx4[b_i1 - 1];
            x[quartetOffset] = x4[b_i1 - 1];
          }
        }

        quartetOffset = (nNaNs >> 1) + 8;
        for (int k{0}; k <= quartetOffset - 9; k++) {
          ib = (k - nNaNs) + 8;
          i1 = idx[ib];
          idx[ib] = idx[7 - k];
          idx[7 - k] = i1;
          x[ib] = xwork[7 - k];
          x[7 - k] = xwork[ib];
        }

        if ((nNaNs & 1) != 0) {
          i = quartetOffset - nNaNs;
          x[i] = xwork[i];
        }

        for (quartetOffset = 0; quartetOffset < 8; quartetOffset++) {
          iwork[quartetOffset] = 0;
        }

        i1 = 8 - nNaNs;
        if (8 - nNaNs > 1) {
          quartetOffset = (8 - nNaNs) >> 2;
          ib = 4;
          while (quartetOffset > 1) {
            merge(idx, x, ib, ib, iwork, xwork);
            ib <<= 1;
            quartetOffset = 1;
          }

          if (8 - nNaNs > ib) {
            merge(idx, x, ib, 8 - (nNaNs + ib), iwork, xwork);
          }
        }

        if ((nNaNs > 0) && (8 - nNaNs > 0)) {
          for (int k{0}; k < nNaNs; k++) {
            quartetOffset = (k - nNaNs) + 8;
            xwork[k] = x[quartetOffset];
            iwork[k] = idx[quartetOffset];
          }

          for (int k{i1}; k >= 1; k--) {
            i = (nNaNs + k) - 1;
            x[i] = x[k - 1];
            idx[i] = idx[k - 1];
          }

          std::copy(&xwork[0], &xwork[nNaNs], &x[0]);
          std::copy(&iwork[0], &iwork[nNaNs], &idx[0]);
        }
      }

      //
      // Arguments    : const double v[100]
      //                int ia
      //                int ib
      // Return Type  : int
      //
      static int thirdOfFive(const double v[100], int ia, int ib)
      {
        int im;
        if ((ia == ib) || (ia + 1 == ib)) {
          im = ia;
        } else if ((ia + 2 == ib) || (ia + 3 == ib)) {
          double v4;
          v4 = v[ia - 1];
          if (v4 < v[ia]) {
            double v5;
            v5 = v[ia + 1];
            if (v[ia] < v5) {
              im = ia + 1;
            } else if (v4 < v5) {
              im = ia + 2;
            } else {
              im = ia;
            }
          } else {
            double v5;
            v5 = v[ia + 1];
            if (v4 < v5) {
              im = ia;
            } else if (v[ia] < v5) {
              im = ia + 2;
            } else {
              im = ia + 1;
            }
          }
        } else {
          double v4;
          double v5;
          int j2;
          int j3;
          int j4;
          int j5;
          v4 = v[ia - 1];
          if (v4 < v[ia]) {
            v5 = v[ia + 1];
            if (v[ia] < v5) {
              im = ia;
              j2 = ia;
              j3 = ia + 2;
            } else if (v4 < v5) {
              im = ia;
              j2 = ia + 1;
              j3 = ia + 1;
            } else {
              im = ia + 2;
              j2 = ia - 1;
              j3 = ia + 1;
            }
          } else {
            v5 = v[ia + 1];
            if (v4 < v5) {
              im = ia + 1;
              j2 = ia - 1;
              j3 = ia + 2;
            } else if (v[ia] < v5) {
              im = ia + 1;
              j2 = ia + 1;
              j3 = ia;
            } else {
              im = ia + 2;
              j2 = ia;
              j3 = ia;
            }
          }

          j4 = ia;
          j5 = ia + 1;
          v4 = v[ia + 2];
          v5 = v[ia + 3];
          if (v5 < v4) {
            j4 = ia + 1;
            j5 = ia;
            v5 = v4;
            v4 = v[ia + 3];
          }

          if (!(v5 < v[im - 1])) {
            if (v5 < v[j2]) {
              im = j5 + 3;
            } else if (v4 < v[j2]) {
              im = j2 + 1;
            } else if (v4 < v[j3 - 1]) {
              im = j4 + 3;
            } else {
              im = j3;
            }
          }
        }

        return im;
      }

      //
      // Arguments    : const ::coder::array<double, 3U> &x
      //                double y[110]
      // Return Type  : void
      //
    }

    static void mean(const ::coder::array<double, 3U> &x, double y[110])
    {
      int vlen;
      vlen = x.size(2);
      if (x.size(2) == 0) {
        std::memset(&y[0], 0, 110U * sizeof(double));
      } else {
        for (int xj{0}; xj < 110; xj++) {
          y[xj] = x[xj];
        }

        for (int k{2}; k <= vlen; k++) {
          int xoffset;
          xoffset = (k - 1) * 110;
          for (int xj{0}; xj < 110; xj++) {
            y[xj] += x[xoffset + xj];
          }
        }
      }

      for (vlen = 0; vlen < 110; vlen++) {
        y[vlen] /= static_cast<double>(x.size(2));
      }
    }

    //
    // Arguments    : const double x[100]
    // Return Type  : double
    //
    static double median(const double x[100])
    {
      double v[100];
      double y;
      int a__3;
      int ilast;
      int k;
      k = 0;
      int exitg1;
      do {
        exitg1 = 0;
        if (k < 100) {
          if (std::isnan(x[k])) {
            y = rtNaN;
            exitg1 = 1;
          } else {
            k++;
          }
        } else {
          std::copy(&x[0], &x[100], &v[0]);
          y = internal::quickselect(v, 51, 100, k, ilast);
          if (k > 50) {
            double b;
            b = internal::quickselect(v, 50, ilast - 1, k, a__3);
            if (((y < 0.0) != (b < 0.0)) || std::isinf(y)) {
              y = (y + b) / 2.0;
            } else {
              y += (b - y) / 2.0;
            }
          }

          exitg1 = 1;
        }
      } while (exitg1 == 0);

      return y;
    }

    //
    // Arguments    : const ::coder::array<double, 2U> &A
    //                double B_data[]
    //                int &B_size
    // Return Type  : void
    //
    static void mldivide(const ::coder::array<double, 2U> &A, double B_data[],
                         int &B_size)
    {
      ::coder::array<double, 2U> b_A;
      double tau_data[2];
      int jpvt_data[2];
      if (A.size(0) == 2) {
        double tol;
        int i;
        int minmn;
        b_A.set_size(2, 2);
        for (i = 0; i < 4; i++) {
          b_A[i] = A[i];
        }

        jpvt_data[0] = 1;
        minmn = 0;
        if (std::abs(b_A[1]) > std::abs(b_A[0])) {
          minmn = 1;
        }

        if (b_A[minmn] != 0.0) {
          if (minmn != 0) {
            jpvt_data[0] = 2;
            tol = b_A[0];
            b_A[0] = b_A[1];
            b_A[1] = tol;
            tol = b_A[2];
            b_A[2] = b_A[3];
            b_A[3] = tol;
          }

          b_A[1] = b_A[1] / b_A[0];
        }

        tol = b_A[2];
        if (b_A[2] != 0.0) {
          b_A[3] = b_A[3] + b_A[1] * -tol;
        }

        if (jpvt_data[0] != 1) {
          tol = B_data[0];
          B_data[0] = B_data[1];
          B_data[1] = tol;
        }

        for (int maxmn{0}; maxmn < 2; maxmn++) {
          minmn = maxmn << 1;
          if (B_data[maxmn] != 0.0) {
            i = maxmn + 2;
            for (int b_i{i}; b_i < 3; b_i++) {
              B_data[1] -= B_data[maxmn] * b_A[minmn + 1];
            }
          }
        }

        for (int maxmn{1}; maxmn >= 0; maxmn--) {
          minmn = maxmn << 1;
          tol = B_data[maxmn];
          if (tol != 0.0) {
            tol /= b_A[maxmn + minmn];
            B_data[maxmn] = tol;
            for (int b_i{0}; b_i < maxmn; b_i++) {
              B_data[0] -= B_data[maxmn] * b_A[minmn];
            }
          }
        }
      } else {
        double Y_data[2];
        double tol;
        int i;
        int maxmn;
        int minmn;
        int rankA;
        b_A.set_size(A.size(0), 2);
        minmn = A.size(0) << 1;
        for (i = 0; i < minmn; i++) {
          b_A[i] = A[i];
        }

        int jpvt_size[2];
        internal::lapack::xgeqp3(b_A, tau_data, jpvt_data, jpvt_size);
        rankA = 0;
        if (b_A.size(0) < b_A.size(1)) {
          minmn = b_A.size(0);
          maxmn = b_A.size(1);
        } else {
          minmn = b_A.size(1);
          maxmn = b_A.size(0);
        }

        if (minmn > 0) {
          tol = 2.2204460492503131E-15 * static_cast<double>(maxmn) * std::abs
            (b_A[0]);
          while ((rankA < minmn) && (!(std::abs(b_A[rankA + b_A.size(0) * rankA])
                   <= tol))) {
            rankA++;
          }
        }

        minmn = b_A.size(0);
        for (maxmn = 0; maxmn < 2; maxmn++) {
          Y_data[maxmn] = 0.0;
          if (tau_data[maxmn] != 0.0) {
            tol = B_data[maxmn];
            i = maxmn + 2;
            for (int b_i{i}; b_i <= minmn; b_i++) {
              tol += b_A[(b_i + b_A.size(0) * maxmn) - 1] * B_data[b_i - 1];
            }

            tol *= tau_data[maxmn];
            if (tol != 0.0) {
              B_data[maxmn] -= tol;
              for (int b_i{i}; b_i <= minmn; b_i++) {
                B_data[b_i - 1] -= b_A[(b_i + b_A.size(0) * maxmn) - 1] * tol;
              }
            }
          }
        }

        for (int b_i{0}; b_i < rankA; b_i++) {
          Y_data[jpvt_data[b_i] - 1] = B_data[b_i];
        }

        for (maxmn = rankA; maxmn >= 1; maxmn--) {
          i = jpvt_data[maxmn - 1];
          Y_data[i - 1] /= b_A[(maxmn + b_A.size(0) * (maxmn - 1)) - 1];
          for (int b_i{0}; b_i <= maxmn - 2; b_i++) {
            Y_data[jpvt_data[0] - 1] -= Y_data[i - 1] * b_A[b_A.size(0) * (maxmn
              - 1)];
          }
        }

        B_size = 2;
        B_data[0] = Y_data[0];
        B_data[1] = Y_data[1];
      }
    }

    //
    // Arguments    : const double x[92400]
    //                double y[92400]
    // Return Type  : void
    //
    static void movmean(const double x[92400], double y[92400])
    {
      double xv[110];
      double yv[110];
      for (int p{0}; p < 840; p++) {
        int workspace_ixfirst_tmp;
        workspace_ixfirst_tmp = p * 110;
        std::copy(&x[workspace_ixfirst_tmp], &x[static_cast<int>(static_cast<
                   unsigned int>(workspace_ixfirst_tmp) + 110U)], &xv[0]);
        vmovfun(xv, yv);
        std::copy(&yv[0], &yv[110], &y[workspace_ixfirst_tmp]);
      }
    }

    //
    // Arguments    : const double x[220]
    //                double y[100]
    // Return Type  : void
    //
    static void prctile(const double x[220], double y[100])
    {
      double r;
      int idx[220];
      int iwork[220];
      int i;
      int k;
      int nj;
      int qEnd;
      for (k = 0; k <= 218; k += 2) {
        r = x[k + 1];
        if ((x[k] <= r) || std::isnan(r)) {
          idx[k] = k + 1;
          idx[k + 1] = k + 2;
        } else {
          idx[k] = k + 2;
          idx[k + 1] = k + 1;
        }
      }

      i = 2;
      while (i < 220) {
        int i2;
        int j;
        i2 = i << 1;
        j = 1;
        for (int pEnd{i + 1}; pEnd < 221; pEnd = qEnd + i) {
          int kEnd;
          int p;
          int q;
          p = j;
          q = pEnd - 1;
          qEnd = j + i2;
          if (qEnd > 221) {
            qEnd = 221;
          }

          k = 0;
          kEnd = qEnd - j;
          while (k + 1 <= kEnd) {
            r = x[idx[q] - 1];
            nj = idx[p - 1];
            if ((x[nj - 1] <= r) || std::isnan(r)) {
              iwork[k] = nj;
              p++;
              if (p == pEnd) {
                while (q + 1 < qEnd) {
                  k++;
                  iwork[k] = idx[q];
                  q++;
                }
              }
            } else {
              iwork[k] = idx[q];
              q++;
              if (q + 1 == qEnd) {
                while (p < pEnd) {
                  k++;
                  iwork[k] = idx[p - 1];
                  p++;
                }
              }
            }

            k++;
          }

          for (k = 0; k < kEnd; k++) {
            idx[(j + k) - 1] = iwork[k];
          }

          j = qEnd;
        }

        i = i2;
      }

      nj = 220;
      while ((nj > 0) && std::isnan(x[idx[nj - 1] - 1])) {
        nj--;
      }

      if (nj < 1) {
        for (nj = 0; nj < 100; nj++) {
          y[nj] = rtNaN;
        }
      } else if (nj == 1) {
        for (nj = 0; nj < 100; nj++) {
          y[nj] = x[idx[0] - 1];
        }
      } else {
        for (k = 0; k < 100; k++) {
          r = static_cast<double>(k) / 100.0 * static_cast<double>(nj);
          i = static_cast<int>(std::round(r));
          if (i < 1) {
            y[k] = x[idx[0] - 1];
          } else if (i >= nj) {
            y[k] = x[idx[nj - 1] - 1];
          } else {
            r -= static_cast<double>(i);
            y[k] = (0.5 - r) * x[idx[i - 1] - 1] + (r + 0.5) * x[idx[i] - 1];
          }
        }
      }
    }

    //
    // Arguments    : const double x[1250]
    //                double varargout_1[626]
    //                double varargout_2[626]
    // Return Type  : void
    //
    static void pwelch(const double x[1250], double varargout_1[626], double
                       varargout_2[626])
    {
      static creal_T Xx[1250];
      static creal_T wwc[1249];
      static const double sintabinv[2049]{ 0.0, 0.0015339801862847655,
        0.0030679567629659761, 0.0046019261204485705, 0.0061358846491544753,
        0.007669828739531097, 0.00920375478205982, 0.010737659167264491,
        0.012271538285719925, 0.013805388528060391, 0.0153392062849881,
        0.01687298794728171, 0.01840672990580482, 0.019940428551514441,
        0.021474080275469508, 0.023007681468839369, 0.024541228522912288,
        0.0260747178291039, 0.02760814577896574, 0.029141508764193722,
        0.030674803176636626, 0.032208025408304586, 0.03374117185137758,
        0.035274238898213947, 0.036807222941358832, 0.038340120373552694,
        0.039872927587739811, 0.041405640977076739, 0.04293825693494082,
        0.044470771854938668, 0.046003182130914623, 0.0475354841569593,
        0.049067674327418015, 0.050599749036899282, 0.052131704680283324,
        0.05366353765273052, 0.055195244349689941, 0.056726821166907748,
        0.058258264500435752, 0.059789570746639868, 0.061320736302208578,
        0.0628517575641614, 0.064382630929857465, 0.0659133527970038,
        0.067443919563664051, 0.068974327628266746, 0.070504573389613856,
        0.072034653246889332, 0.073564563599667426, 0.0750943008479213,
        0.076623861392031492, 0.078153241632794232, 0.079682437971430126,
        0.081211446809592441, 0.082740264549375692, 0.084268887593324071,
        0.0857973123444399, 0.087325535206192059, 0.0888535525825246,
        0.090381360877864983, 0.091908956497132724, 0.093436335845747787,
        0.094963495329638992, 0.096490431355252593, 0.0980171403295606,
        0.099543618660069319, 0.10106986275482782, 0.10259586902243628,
        0.10412163387205459, 0.10564715371341062, 0.10717242495680884,
        0.10869744401313872, 0.11022220729388306, 0.11174671121112659,
        0.11327095217756435, 0.11479492660651008, 0.11631863091190475,
        0.11784206150832498, 0.11936521481099135, 0.12088808723577708,
        0.1224106751992162, 0.12393297511851216, 0.12545498341154623,
        0.12697669649688587, 0.12849811079379317, 0.13001922272223335,
        0.13154002870288312, 0.13306052515713906, 0.13458070850712617,
        0.1361005751757062, 0.13762012158648604, 0.1391393441638262,
        0.14065823933284921, 0.14217680351944803, 0.14369503315029447,
        0.14521292465284746, 0.14673047445536175, 0.14824767898689603,
        0.14976453467732151, 0.15128103795733022, 0.15279718525844344,
        0.1543129730130201, 0.15582839765426523, 0.15734345561623825,
        0.15885814333386145, 0.16037245724292828, 0.16188639378011183,
        0.16339994938297323, 0.16491312048996992, 0.1664259035404641,
        0.16793829497473117, 0.16945029123396796, 0.17096188876030122,
        0.17247308399679595, 0.17398387338746382, 0.17549425337727143,
        0.17700422041214875, 0.17851377093899751, 0.18002290140569951,
        0.18153160826112497, 0.18303988795514095, 0.18454773693861962,
        0.18605515166344663, 0.1875621285825296, 0.18906866414980619,
        0.19057475482025274, 0.19208039704989244, 0.19358558729580361,
        0.19509032201612825, 0.19659459767008022, 0.19809841071795356,
        0.19960175762113097, 0.2011046348420919, 0.20260703884442113,
        0.20410896609281687, 0.20561041305309924, 0.20711137619221856,
        0.20861185197826349, 0.21011183688046961, 0.21161132736922755,
        0.21311031991609136, 0.21460881099378676, 0.21610679707621952,
        0.21760427463848364, 0.2191012401568698, 0.22059769010887351,
        0.22209362097320351, 0.22358902922979, 0.22508391135979283,
        0.22657826384561, 0.22807208317088573, 0.22956536582051887,
        0.23105810828067111, 0.23255030703877524, 0.23404195858354343,
        0.23553305940497549, 0.2370236059943672, 0.23851359484431842,
        0.2400030224487415, 0.24149188530286933, 0.24298017990326387,
        0.24446790274782415, 0.24595505033579459, 0.24744161916777327,
        0.24892760574572015, 0.25041300657296522, 0.25189781815421697,
        0.25338203699557016, 0.25486565960451457, 0.25634868248994291,
        0.257831102162159, 0.25931291513288623, 0.26079411791527551,
        0.26227470702391359, 0.26375467897483135, 0.26523403028551179,
        0.26671275747489837, 0.26819085706340318, 0.26966832557291509,
        0.271145159526808, 0.272621355449949, 0.27409690986870638,
        0.27557181931095814, 0.2770460803060999, 0.27851968938505306,
        0.27999264308027322, 0.28146493792575794, 0.28293657045705539,
        0.28440753721127188, 0.28587783472708062, 0.28734745954472951,
        0.28881640820604948, 0.29028467725446233, 0.29175226323498926,
        0.29321916269425863, 0.29468537218051433, 0.29615088824362379,
        0.2976157074350862, 0.29907982630804048, 0.30054324141727345,
        0.30200594931922808, 0.30346794657201132, 0.30492922973540237,
        0.30638979537086092, 0.30784964004153487, 0.30930876031226873,
        0.31076715274961147, 0.31222481392182488, 0.31368174039889152,
        0.31513792875252244, 0.31659337555616585, 0.31804807738501495,
        0.31950203081601569, 0.32095523242787521, 0.32240767880106985,
        0.32385936651785285, 0.32531029216226293, 0.32676045232013173,
        0.3282098435790925, 0.32965846252858749, 0.33110630575987643,
        0.33255336986604422, 0.33399965144200938, 0.3354451470845316,
        0.33688985339222005, 0.33833376696554113, 0.33977688440682685,
        0.34121920232028236, 0.34266071731199438, 0.34410142598993881,
        0.34554132496398909, 0.34698041084592368, 0.34841868024943456,
        0.34985612979013492, 0.35129275608556709, 0.35272855575521073,
        0.35416352542049034, 0.35559766170478385, 0.35703096123343,
        0.35846342063373654, 0.35989503653498811, 0.36132580556845428,
        0.36275572436739723, 0.36418478956707989, 0.36561299780477385,
        0.36704034571976718, 0.36846682995337232, 0.3698924471489341,
        0.37131719395183749, 0.37274106700951576, 0.37416406297145793,
        0.37558617848921722, 0.37700741021641826, 0.37842775480876556,
        0.37984720892405116, 0.38126576922216238, 0.38268343236508978,
        0.38410019501693504, 0.38551605384391885, 0.38693100551438858,
        0.38834504669882625, 0.38975817406985641, 0.39117038430225387,
        0.39258167407295147, 0.3939920400610481, 0.39540147894781635,
        0.39680998741671031, 0.39821756215337356, 0.39962419984564679,
        0.40102989718357562, 0.40243465085941843, 0.40383845756765407,
        0.40524131400498986, 0.40664321687036903, 0.40804416286497869,
        0.40944414869225759, 0.41084317105790391, 0.41224122666988289,
        0.4136383122384345, 0.41503442447608163, 0.41642956009763715,
        0.41782371582021227, 0.41921688836322391, 0.42060907444840251,
        0.42200027079979968, 0.42339047414379605, 0.42477968120910881,
        0.42616788872679962, 0.42755509343028208, 0.42894129205532949,
        0.43032648134008261, 0.43171065802505726, 0.43309381885315196,
        0.43447596056965565, 0.43585707992225547, 0.43723717366104409,
        0.43861623853852766, 0.43999427130963326, 0.44137126873171667,
        0.44274722756457, 0.4441221445704292, 0.44549601651398174,
        0.44686884016237416, 0.44824061228521989, 0.44961132965460654,
        0.45098098904510386, 0.45234958723377089, 0.45371712100016387,
        0.45508358712634384, 0.45644898239688392, 0.45781330359887717,
        0.45917654752194409, 0.46053871095824, 0.46189979070246273,
        0.46325978355186015, 0.46461868630623782, 0.46597649576796618,
        0.46733320874198842, 0.46868882203582796, 0.47004333245959562,
        0.47139673682599764, 0.47274903195034279, 0.47410021465054997,
        0.47545028174715587, 0.47679923006332209, 0.478147056424843,
        0.47949375766015295, 0.48083933060033396, 0.48218377207912272,
        0.48352707893291874, 0.48486924800079106, 0.48621027612448642,
        0.487550160148436, 0.48888889691976317, 0.49022648328829116,
        0.4915629161065499, 0.49289819222978404, 0.49423230851595967,
        0.49556526182577254, 0.49689704902265447, 0.49822766697278181,
        0.49955711254508184, 0.50088538261124071, 0.50221247404571079,
        0.50353838372571758, 0.50486310853126759, 0.50618664534515523,
        0.50750899105297087, 0.508830142543107, 0.51015009670676681,
        0.5114688504379703, 0.512786400633563, 0.51410274419322166,
        0.51541787801946293, 0.51673179901764987, 0.51804450409599934,
        0.51935599016558964, 0.52066625414036716, 0.52197529293715439,
        0.52328310347565643, 0.524589682678469, 0.52589502747108463,
        0.52719913478190128, 0.52850200154222848, 0.52980362468629461,
        0.531104001151255, 0.5324031278771979, 0.533701001807153,
        0.53499761988709715, 0.53629297906596318, 0.53758707629564539,
        0.53887990853100842, 0.54017147272989285, 0.54146176585312344,
        0.54275078486451589, 0.54403852673088382, 0.54532498842204646,
        0.54661016691083486, 0.54789405917310019, 0.54917666218771966,
        0.55045797293660481, 0.55173798840470734, 0.55301670558002747,
        0.55429412145362, 0.55557023301960218, 0.5568450372751601,
        0.5581185312205561, 0.55939071185913614, 0.560661576197336,
        0.56193112124468936, 0.56319934401383409, 0.5644662415205195,
        0.56573181078361312, 0.56699604882510868, 0.56825895267013149,
        0.56952051934694714, 0.57078074588696726, 0.572039629324757,
        0.5732971666980422, 0.57455335504771576, 0.57580819141784534,
        0.57706167285567944, 0.57831379641165559, 0.57956455913940563,
        0.58081395809576453, 0.58206199034077544, 0.58330865293769829,
        0.58455394295301533, 0.58579785745643886, 0.587040393520918,
        0.58828154822264522, 0.58952131864106394, 0.59075970185887416,
        0.591996694962041, 0.5932322950397998, 0.59446649918466443,
        0.59569930449243336, 0.59693070806219639, 0.59816070699634238,
        0.59938929840056454, 0.600616479383869, 0.60184224705858,
        0.60306659854034816, 0.604289530948156, 0.60551104140432555,
        0.60673112703452448, 0.60794978496777363, 0.60916701233645321,
        0.61038280627630948, 0.61159716392646191, 0.61281008242940971,
        0.61402155893103849, 0.61523159058062682, 0.61644017453085365,
        0.61764730793780387, 0.61885298796097632, 0.6200572117632891,
        0.62125997651108755, 0.62246127937415, 0.62366111752569453,
        0.62485948814238634, 0.62605638840434352, 0.62725181549514408,
        0.6284457666018326, 0.629638238914927, 0.63082922962842447,
        0.63201873593980906, 0.63320675505005719, 0.63439328416364549,
        0.63557832048855611, 0.6367618612362842, 0.637943903621844,
        0.63912444486377573, 0.64030348218415167, 0.641481012808583,
        0.64265703396622686, 0.64383154288979139, 0.64500453681554393,
        0.64617601298331628, 0.64734596863651206, 0.64851440102211244,
        0.64968130739068319, 0.650846684996381, 0.6520105310969595,
        0.65317284295377676, 0.65433361783180044, 0.65549285299961535,
        0.65665054572942894, 0.65780669329707864, 0.65896129298203732,
        0.66011434206742048, 0.66126583783999227, 0.66241577759017178,
        0.66356415861203977, 0.66471097820334479, 0.66585623366550972,
        0.66699992230363747, 0.66814204142651845, 0.669282588346636,
        0.67042156038017309, 0.67155895484701833, 0.67269476907077286,
        0.673829000378756, 0.674961646102012, 0.67609270357531592,
        0.67722217013718033, 0.67835004312986147, 0.679476319899365,
        0.680600997795453, 0.68172407417164971, 0.68284554638524808,
        0.6839654117973154, 0.68508366777270036, 0.68620031168003859,
        0.687315340891759, 0.68842875278409044, 0.68954054473706683,
        0.6906507141345346, 0.69175925836415775, 0.69286617481742463,
        0.69397146088965389, 0.69507511398000088, 0.696177131491463,
        0.69727751083088652, 0.69837624940897292, 0.69947334464028377,
        0.70056879394324834, 0.70166259474016845, 0.7027547444572253,
        0.70384524052448494, 0.70493408037590488, 0.70602126144933974,
        0.70710678118654757, 0.7081906370331954, 0.70927282643886569,
        0.71035334685706242, 0.71143219574521643, 0.71250937056469243,
        0.71358486878079352, 0.71465868786276909, 0.71573082528381859,
        0.71680127852109954, 0.71787004505573171, 0.71893712237280449,
        0.72000250796138165, 0.72106619931450811, 0.72212819392921535,
        0.72318848930652746, 0.724247082951467, 0.72530397237306077,
        0.726359155084346, 0.72741262860237577, 0.7284643904482252,
        0.729514438146997, 0.73056276922782759, 0.73160938122389263,
        0.73265427167241282, 0.73369743811466037, 0.7347388780959635,
        0.73577858916571359, 0.73681656887736979, 0.737852814788466,
        0.73888732446061511, 0.7399200954595162, 0.74095112535495922,
        0.74198041172083107, 0.74300795213512172, 0.74403374417992929,
        0.745057785441466, 0.74608007351006378, 0.74710060598018013,
        0.7481193804504036, 0.74913639452345937, 0.75015164580621507,
        0.75116513190968637, 0.7521768504490427, 0.75318679904361252,
        0.75419497531688917, 0.75520137689653655, 0.75620600141439454,
        0.75720884650648457, 0.75820990981301528, 0.759209188978388,
        0.76020668165120242, 0.76120238548426178, 0.7621962981345789,
        0.76318841726338127, 0.76417874053611679, 0.765167265622459,
        0.76615399019631292, 0.7671389119358204, 0.76812202852336542,
        0.7691033376455797, 0.7700828369933479, 0.77106052426181382,
        0.77203639715038452, 0.773010453362737, 0.7739826906068229,
        0.77495310659487393, 0.77592169904340769, 0.77688846567323244,
        0.77785340420945315, 0.778816512381476, 0.77977778792301455,
        0.78073722857209449, 0.78169483207105939, 0.78265059616657573,
        0.78360451860963831, 0.78455659715557524, 0.78550682956405393,
        0.78645521359908577, 0.78740174702903143, 0.78834642762660634,
        0.78928925316888565, 0.79023022143731, 0.7911693302176902,
        0.79210657730021239, 0.79304196047944364, 0.79397547755433717,
        0.794907126328237, 0.79583690460888357, 0.79676481020841883,
        0.79769084094339116, 0.79861499463476093, 0.799537269107905,
        0.80045766219262282, 0.80137617172314024, 0.80229279553811572,
        0.80320753148064494, 0.8041203773982657, 0.80503133114296366,
        0.80594039057117628, 0.80684755354379933, 0.80775281792619036,
        0.808656181588175, 0.80955764240405126, 0.81045719825259477,
        0.81135484701706373, 0.81225058658520388, 0.81314441484925359,
        0.81403632970594841, 0.81492632905652662, 0.81581441080673378,
        0.81670057286682785, 0.81758481315158371, 0.81846712958029866,
        0.819347520076797, 0.82022598256943469, 0.82110251499110465,
        0.82197711527924155, 0.82284978137582643, 0.82372051122739143,
        0.82458930278502529, 0.82545615400437755, 0.82632106284566353,
        0.82718402727366913, 0.8280450452577558, 0.82890411477186487,
        0.829761233794523, 0.83061640030884631, 0.83146961230254524,
        0.83232086776792968, 0.83317016470191319, 0.83401750110601813,
        0.83486287498638, 0.8357062843537526, 0.836547727223512,
        0.83738720161566194, 0.83822470555483808, 0.83906023707031274,
        0.83989379419599952, 0.84072537497045807, 0.84155497743689844,
        0.84238259964318585, 0.84320823964184544, 0.84403189549006641,
        0.84485356524970712, 0.84567324698729907, 0.84649093877405213,
        0.84730663868585832, 0.84812034480329723, 0.84893205521163961,
        0.84974176800085255, 0.85054948126560348, 0.8513551931052652,
        0.85215890162391983, 0.85296060493036363, 0.85376030113811141,
        0.85455798836540053, 0.855353664735196, 0.85614732837519447,
        0.85693897741782876, 0.85772861000027212, 0.85851622426444274,
        0.85930181835700847, 0.86008539042939014, 0.86086693863776731,
        0.8616464611430813, 0.8624239561110405, 0.86319942171212416,
        0.8639728561215867, 0.86474425751946238, 0.86551362409056909,
        0.866280954024513, 0.86704624551569265, 0.86780949676330332,
        0.8685707059713409, 0.86932987134860684, 0.87008699110871146,
        0.870842063470079, 0.87159508665595109, 0.87234605889439154,
        0.87309497841829009, 0.87384184346536686, 0.87458665227817611,
        0.87532940310411089, 0.8760700941954066, 0.87680872380914565,
        0.87754529020726135, 0.87827979165654158, 0.87901222642863353,
        0.87974259280004741, 0.88047088905216075, 0.88119711347122209,
        0.881921264348355, 0.88264333997956279, 0.88336333866573158,
        0.884081258712635, 0.88479709843093779, 0.8855108561362,
        0.88622253014888064, 0.88693211879434219, 0.88763962040285393,
        0.88834503330959635, 0.88904835585466457, 0.88974958638307278,
        0.89044872324475788, 0.89114576479458318, 0.89184070939234272,
        0.89253355540276458, 0.89322430119551532, 0.89391294514520325,
        0.8945994856313827, 0.89528392103855758, 0.89596624975618522,
        0.89664647017868015, 0.89732458070541832, 0.89800057974073988,
        0.89867446569395382, 0.89934623697934157, 0.90001589201616017,
        0.900683429228647, 0.901348847046022, 0.90201214390249318,
        0.90267331823725883, 0.90333236849451182, 0.90398929312344334,
        0.90464409057824624, 0.90529675931811882, 0.90594729780726846,
        0.90659570451491533, 0.90724197791529582, 0.90788611648766626,
        0.90852811871630612, 0.90916798309052238, 0.90980570810465222,
        0.91044129225806725, 0.91107473405517636, 0.91170603200542988,
        0.91233518462332275, 0.91296219042839821, 0.91358704794525081,
        0.91420975570353069, 0.9148303122379462, 0.91544871608826783,
        0.91606496579933172, 0.9166790599210427, 0.91729099700837791,
        0.9179007756213905, 0.91850839432521225, 0.91911385169005777,
        0.91971714629122736, 0.92031827670911059, 0.92091724152918952,
        0.9215140393420419, 0.92210866874334518, 0.92270112833387863,
        0.92329141671952764, 0.92387953251128674, 0.9244654743252626,
        0.92504924078267758, 0.92563083050987272, 0.92621024213831138,
        0.92678747430458175, 0.92736252565040111, 0.92793539482261789,
        0.92850608047321559, 0.92907458125931586, 0.92964089584318121,
        0.93020502289221907, 0.93076696107898371, 0.93132670908118043,
        0.93188426558166815, 0.93243962926846236, 0.932992798834739,
        0.93354377297883617, 0.93409255040425887, 0.93463912981968078,
        0.93518350993894761, 0.93572568948108037, 0.93626566717027826,
        0.93680344173592156, 0.937339011912575, 0.93787237643998989,
        0.93840353406310806, 0.9389324835320646, 0.93945922360218992,
        0.93998375303401394, 0.9405060705932683, 0.94102617505088926,
        0.94154406518302081, 0.94205973977101731, 0.94257319760144687,
        0.94308443746609349, 0.94359345816196039, 0.94410025849127266,
        0.94460483726148026, 0.94510719328526061, 0.94560732538052128,
        0.94610523237040345, 0.94660091308328353, 0.94709436635277722,
        0.94758559101774109, 0.94807458592227623, 0.94856134991573027,
        0.94904588185270056, 0.94952818059303667, 0.950008245001843,
        0.9504860739494817, 0.95096166631157508, 0.95143502096900834,
        0.95190613680793235, 0.95237501271976588, 0.95284164760119872,
        0.95330604035419386, 0.95376818988599033, 0.95422809510910567,
        0.95468575494133834, 0.95514116830577078, 0.95559433413077111,
        0.95604525134999641, 0.9564939189023951, 0.95694033573220882,
        0.95738450078897586, 0.95782641302753291, 0.95826607140801767,
        0.9587034748958716, 0.95913862246184189, 0.95957151308198452,
        0.960002145737666, 0.96043051941556579, 0.96085663310767966,
        0.96128048581132064, 0.96170207652912254, 0.96212140426904158,
        0.96253846804435916, 0.96295326687368388, 0.963365799780954,
        0.96377606579543984, 0.96418406395174583, 0.96458979328981276,
        0.96499325285492032, 0.9653944416976894, 0.96579335887408368,
        0.9661900034454125, 0.96658437447833312, 0.96697647104485207,
        0.96736629222232851, 0.96775383709347551, 0.96813910474636244,
        0.96852209427441727, 0.96890280477642887, 0.96928123535654853,
        0.96965738512429245, 0.970031253194544, 0.9704028386875555,
        0.97077214072895035, 0.97113915844972509, 0.97150389098625178,
        0.9718663374802794, 0.97222649707893627, 0.97258436893473221,
        0.97293995220556018, 0.97329324605469825, 0.973644249650812,
        0.97399296216795583, 0.97433938278557586, 0.97468351068851067,
        0.97502534506699412, 0.975364885116657, 0.97570213003852857,
        0.976037079039039, 0.97636973133002114, 0.97670008612871184,
        0.97702814265775439, 0.97735390014520007, 0.97767735782450993,
        0.97799851493455714, 0.97831737071962765, 0.97863392442942321,
        0.9789481753190622, 0.979260122649082, 0.97956976568544052,
        0.97987710369951764, 0.98018213596811743, 0.98048486177346938,
        0.98078528040323043, 0.98108339115048671, 0.98137919331375456,
        0.98167268619698311, 0.98196386910955524, 0.98225274136628937,
        0.98253930228744124, 0.98282355119870524, 0.98310548743121629,
        0.98338511032155118, 0.98366241921173025, 0.98393741344921892,
        0.984210092386929, 0.98448045538322093, 0.98474850180190421,
        0.98501423101223984, 0.98527764238894122, 0.98553873531217606,
        0.98579750916756748, 0.98605396334619544, 0.98630809724459867,
        0.98655991026477541, 0.98680940181418553, 0.987056571305751,
        0.98730141815785843, 0.98754394179435923, 0.98778414164457218,
        0.98802201714328353, 0.98825756773074946, 0.98849079285269659,
        0.98872169196032378, 0.988950264510303, 0.989176509964781,
        0.98940042779138038, 0.98962201746320089, 0.98984127845882053,
        0.99005821026229712, 0.99027281236316911, 0.99048508425645709,
        0.99069502544266463, 0.99090263542778, 0.99110791372327689,
        0.99131085984611544, 0.9915114733187439, 0.99170975366909953,
        0.99190570043060933, 0.9920993131421918, 0.99229059134825737,
        0.99247953459871, 0.992666142448948, 0.9928504144598651,
        0.99303235019785141, 0.9932119492347945, 0.99338921114808065,
        0.9935641355205953, 0.9937367219407246, 0.99390697000235606,
        0.99407487930487937, 0.9942404494531879, 0.9944036800576791,
        0.99456457073425542, 0.9947231211043257, 0.99487933079480562,
        0.99503319943811863, 0.99518472667219693, 0.99533391214048228,
        0.99548075549192694, 0.99562525638099431, 0.99576741446765982,
        0.99590722941741172, 0.996044700901252, 0.996179828595697,
        0.996312612182778, 0.99644305135004263, 0.99657114579055484,
        0.99669689520289606, 0.99682029929116567, 0.99694135776498216,
        0.997060070339483, 0.99717643673532619, 0.99729045667869021,
        0.9974021299012753, 0.99751145614030345, 0.99761843513851955,
        0.99772306664419164, 0.99782535041111164, 0.997925286198596,
        0.99802287377148624, 0.99811811290014918, 0.99821100336047819,
        0.99830154493389289, 0.99838973740734016, 0.99847558057329477,
        0.99855907422975931, 0.99864021818026527, 0.99871901223387294,
        0.99879545620517241, 0.99886954991428356, 0.99894129318685687,
        0.99901068585407338, 0.99907772775264536, 0.99914241872481691,
        0.99920475861836389, 0.99926474728659442, 0.99932238458834954,
        0.99937767038800285, 0.99943060455546173, 0.999481186966167,
        0.99952941750109314, 0.99957529604674922, 0.99961882249517864,
        0.99965999674395922, 0.99969881869620425, 0.99973528826056168,
        0.99976940535121528, 0.99980116988788426, 0.9998305817958234,
        0.99985764100582386, 0.99988234745421256, 0.9999047010828529,
        0.9999247018391445, 0.99994234967602391, 0.9999576445519639,
        0.99997058643097414, 0.99998117528260111, 0.9999894110819284,
        0.99999529380957619, 0.99999882345170188, 1.0, 0.99999882345170188,
        0.99999529380957619, 0.9999894110819284, 0.99998117528260111,
        0.99997058643097414, 0.9999576445519639, 0.99994234967602391,
        0.9999247018391445, 0.9999047010828529, 0.99988234745421256,
        0.99985764100582386, 0.9998305817958234, 0.99980116988788426,
        0.99976940535121528, 0.99973528826056168, 0.99969881869620425,
        0.99965999674395922, 0.99961882249517864, 0.99957529604674922,
        0.99952941750109314, 0.999481186966167, 0.99943060455546173,
        0.99937767038800285, 0.99932238458834954, 0.99926474728659442,
        0.99920475861836389, 0.99914241872481691, 0.99907772775264536,
        0.99901068585407338, 0.99894129318685687, 0.99886954991428356,
        0.99879545620517241, 0.99871901223387294, 0.99864021818026527,
        0.99855907422975931, 0.99847558057329477, 0.99838973740734016,
        0.99830154493389289, 0.99821100336047819, 0.99811811290014918,
        0.99802287377148624, 0.997925286198596, 0.99782535041111164,
        0.99772306664419164, 0.99761843513851955, 0.99751145614030345,
        0.9974021299012753, 0.99729045667869021, 0.99717643673532619,
        0.997060070339483, 0.99694135776498216, 0.99682029929116567,
        0.99669689520289606, 0.99657114579055484, 0.99644305135004263,
        0.996312612182778, 0.996179828595697, 0.996044700901252,
        0.99590722941741172, 0.99576741446765982, 0.99562525638099431,
        0.99548075549192694, 0.99533391214048228, 0.99518472667219693,
        0.99503319943811863, 0.99487933079480562, 0.9947231211043257,
        0.99456457073425542, 0.9944036800576791, 0.9942404494531879,
        0.99407487930487937, 0.99390697000235606, 0.9937367219407246,
        0.9935641355205953, 0.99338921114808065, 0.9932119492347945,
        0.99303235019785141, 0.9928504144598651, 0.992666142448948,
        0.99247953459871, 0.99229059134825737, 0.9920993131421918,
        0.99190570043060933, 0.99170975366909953, 0.9915114733187439,
        0.99131085984611544, 0.99110791372327689, 0.99090263542778,
        0.99069502544266463, 0.99048508425645709, 0.99027281236316911,
        0.99005821026229712, 0.98984127845882053, 0.98962201746320089,
        0.98940042779138038, 0.989176509964781, 0.988950264510303,
        0.98872169196032378, 0.98849079285269659, 0.98825756773074946,
        0.98802201714328353, 0.98778414164457218, 0.98754394179435923,
        0.98730141815785843, 0.987056571305751, 0.98680940181418553,
        0.98655991026477541, 0.98630809724459867, 0.98605396334619544,
        0.98579750916756748, 0.98553873531217606, 0.98527764238894122,
        0.98501423101223984, 0.98474850180190421, 0.98448045538322093,
        0.984210092386929, 0.98393741344921892, 0.98366241921173025,
        0.98338511032155118, 0.98310548743121629, 0.98282355119870524,
        0.98253930228744124, 0.98225274136628937, 0.98196386910955524,
        0.98167268619698311, 0.98137919331375456, 0.98108339115048671,
        0.98078528040323043, 0.98048486177346938, 0.98018213596811743,
        0.97987710369951764, 0.97956976568544052, 0.979260122649082,
        0.9789481753190622, 0.97863392442942321, 0.97831737071962765,
        0.97799851493455714, 0.97767735782450993, 0.97735390014520007,
        0.97702814265775439, 0.97670008612871184, 0.97636973133002114,
        0.976037079039039, 0.97570213003852857, 0.975364885116657,
        0.97502534506699412, 0.97468351068851067, 0.97433938278557586,
        0.97399296216795583, 0.973644249650812, 0.97329324605469825,
        0.97293995220556018, 0.97258436893473221, 0.97222649707893627,
        0.9718663374802794, 0.97150389098625178, 0.97113915844972509,
        0.97077214072895035, 0.9704028386875555, 0.970031253194544,
        0.96965738512429245, 0.96928123535654853, 0.96890280477642887,
        0.96852209427441727, 0.96813910474636244, 0.96775383709347551,
        0.96736629222232851, 0.96697647104485207, 0.96658437447833312,
        0.9661900034454125, 0.96579335887408368, 0.9653944416976894,
        0.96499325285492032, 0.96458979328981276, 0.96418406395174583,
        0.96377606579543984, 0.963365799780954, 0.96295326687368388,
        0.96253846804435916, 0.96212140426904158, 0.96170207652912254,
        0.96128048581132064, 0.96085663310767966, 0.96043051941556579,
        0.960002145737666, 0.95957151308198452, 0.95913862246184189,
        0.9587034748958716, 0.95826607140801767, 0.95782641302753291,
        0.95738450078897586, 0.95694033573220882, 0.9564939189023951,
        0.95604525134999641, 0.95559433413077111, 0.95514116830577078,
        0.95468575494133834, 0.95422809510910567, 0.95376818988599033,
        0.95330604035419386, 0.95284164760119872, 0.95237501271976588,
        0.95190613680793235, 0.95143502096900834, 0.95096166631157508,
        0.9504860739494817, 0.950008245001843, 0.94952818059303667,
        0.94904588185270056, 0.94856134991573027, 0.94807458592227623,
        0.94758559101774109, 0.94709436635277722, 0.94660091308328353,
        0.94610523237040345, 0.94560732538052128, 0.94510719328526061,
        0.94460483726148026, 0.94410025849127266, 0.94359345816196039,
        0.94308443746609349, 0.94257319760144687, 0.94205973977101731,
        0.94154406518302081, 0.94102617505088926, 0.9405060705932683,
        0.93998375303401394, 0.93945922360218992, 0.9389324835320646,
        0.93840353406310806, 0.93787237643998989, 0.937339011912575,
        0.93680344173592156, 0.93626566717027826, 0.93572568948108037,
        0.93518350993894761, 0.93463912981968078, 0.93409255040425887,
        0.93354377297883617, 0.932992798834739, 0.93243962926846236,
        0.93188426558166815, 0.93132670908118043, 0.93076696107898371,
        0.93020502289221907, 0.92964089584318121, 0.92907458125931586,
        0.92850608047321559, 0.92793539482261789, 0.92736252565040111,
        0.92678747430458175, 0.92621024213831138, 0.92563083050987272,
        0.92504924078267758, 0.9244654743252626, 0.92387953251128674,
        0.92329141671952764, 0.92270112833387863, 0.92210866874334518,
        0.9215140393420419, 0.92091724152918952, 0.92031827670911059,
        0.91971714629122736, 0.91911385169005777, 0.91850839432521225,
        0.9179007756213905, 0.91729099700837791, 0.9166790599210427,
        0.91606496579933172, 0.91544871608826783, 0.9148303122379462,
        0.91420975570353069, 0.91358704794525081, 0.91296219042839821,
        0.91233518462332275, 0.91170603200542988, 0.91107473405517636,
        0.91044129225806725, 0.90980570810465222, 0.90916798309052238,
        0.90852811871630612, 0.90788611648766626, 0.90724197791529582,
        0.90659570451491533, 0.90594729780726846, 0.90529675931811882,
        0.90464409057824624, 0.90398929312344334, 0.90333236849451182,
        0.90267331823725883, 0.90201214390249318, 0.901348847046022,
        0.900683429228647, 0.90001589201616017, 0.89934623697934157,
        0.89867446569395382, 0.89800057974073988, 0.89732458070541832,
        0.89664647017868015, 0.89596624975618522, 0.89528392103855758,
        0.8945994856313827, 0.89391294514520325, 0.89322430119551532,
        0.89253355540276458, 0.89184070939234272, 0.89114576479458318,
        0.89044872324475788, 0.88974958638307278, 0.88904835585466457,
        0.88834503330959635, 0.88763962040285393, 0.88693211879434219,
        0.88622253014888064, 0.8855108561362, 0.88479709843093779,
        0.884081258712635, 0.88336333866573158, 0.88264333997956279,
        0.881921264348355, 0.88119711347122209, 0.88047088905216075,
        0.87974259280004741, 0.87901222642863353, 0.87827979165654158,
        0.87754529020726135, 0.87680872380914565, 0.8760700941954066,
        0.87532940310411089, 0.87458665227817611, 0.87384184346536686,
        0.87309497841829009, 0.87234605889439154, 0.87159508665595109,
        0.870842063470079, 0.87008699110871146, 0.86932987134860684,
        0.8685707059713409, 0.86780949676330332, 0.86704624551569265,
        0.866280954024513, 0.86551362409056909, 0.86474425751946238,
        0.8639728561215867, 0.86319942171212416, 0.8624239561110405,
        0.8616464611430813, 0.86086693863776731, 0.86008539042939014,
        0.85930181835700847, 0.85851622426444274, 0.85772861000027212,
        0.85693897741782876, 0.85614732837519447, 0.855353664735196,
        0.85455798836540053, 0.85376030113811141, 0.85296060493036363,
        0.85215890162391983, 0.8513551931052652, 0.85054948126560348,
        0.84974176800085255, 0.84893205521163961, 0.84812034480329723,
        0.84730663868585832, 0.84649093877405213, 0.84567324698729907,
        0.84485356524970712, 0.84403189549006641, 0.84320823964184544,
        0.84238259964318585, 0.84155497743689844, 0.84072537497045807,
        0.83989379419599952, 0.83906023707031274, 0.83822470555483808,
        0.83738720161566194, 0.836547727223512, 0.8357062843537526,
        0.83486287498638, 0.83401750110601813, 0.83317016470191319,
        0.83232086776792968, 0.83146961230254524, 0.83061640030884631,
        0.829761233794523, 0.82890411477186487, 0.8280450452577558,
        0.82718402727366913, 0.82632106284566353, 0.82545615400437755,
        0.82458930278502529, 0.82372051122739143, 0.82284978137582643,
        0.82197711527924155, 0.82110251499110465, 0.82022598256943469,
        0.819347520076797, 0.81846712958029866, 0.81758481315158371,
        0.81670057286682785, 0.81581441080673378, 0.81492632905652662,
        0.81403632970594841, 0.81314441484925359, 0.81225058658520388,
        0.81135484701706373, 0.81045719825259477, 0.80955764240405126,
        0.808656181588175, 0.80775281792619036, 0.80684755354379933,
        0.80594039057117628, 0.80503133114296366, 0.8041203773982657,
        0.80320753148064494, 0.80229279553811572, 0.80137617172314024,
        0.80045766219262282, 0.799537269107905, 0.79861499463476093,
        0.79769084094339116, 0.79676481020841883, 0.79583690460888357,
        0.794907126328237, 0.79397547755433717, 0.79304196047944364,
        0.79210657730021239, 0.7911693302176902, 0.79023022143731,
        0.78928925316888565, 0.78834642762660634, 0.78740174702903143,
        0.78645521359908577, 0.78550682956405393, 0.78455659715557524,
        0.78360451860963831, 0.78265059616657573, 0.78169483207105939,
        0.78073722857209449, 0.77977778792301455, 0.778816512381476,
        0.77785340420945315, 0.77688846567323244, 0.77592169904340769,
        0.77495310659487393, 0.7739826906068229, 0.773010453362737,
        0.77203639715038452, 0.77106052426181382, 0.7700828369933479,
        0.7691033376455797, 0.76812202852336542, 0.7671389119358204,
        0.76615399019631292, 0.765167265622459, 0.76417874053611679,
        0.76318841726338127, 0.7621962981345789, 0.76120238548426178,
        0.76020668165120242, 0.759209188978388, 0.75820990981301528,
        0.75720884650648457, 0.75620600141439454, 0.75520137689653655,
        0.75419497531688917, 0.75318679904361252, 0.7521768504490427,
        0.75116513190968637, 0.75015164580621507, 0.74913639452345937,
        0.7481193804504036, 0.74710060598018013, 0.74608007351006378,
        0.745057785441466, 0.74403374417992929, 0.74300795213512172,
        0.74198041172083107, 0.74095112535495922, 0.7399200954595162,
        0.73888732446061511, 0.737852814788466, 0.73681656887736979,
        0.73577858916571359, 0.7347388780959635, 0.73369743811466037,
        0.73265427167241282, 0.73160938122389263, 0.73056276922782759,
        0.729514438146997, 0.7284643904482252, 0.72741262860237577,
        0.726359155084346, 0.72530397237306077, 0.724247082951467,
        0.72318848930652746, 0.72212819392921535, 0.72106619931450811,
        0.72000250796138165, 0.71893712237280449, 0.71787004505573171,
        0.71680127852109954, 0.71573082528381859, 0.71465868786276909,
        0.71358486878079352, 0.71250937056469243, 0.71143219574521643,
        0.71035334685706242, 0.70927282643886569, 0.7081906370331954,
        0.70710678118654757, 0.70602126144933974, 0.70493408037590488,
        0.70384524052448494, 0.7027547444572253, 0.70166259474016845,
        0.70056879394324834, 0.69947334464028377, 0.69837624940897292,
        0.69727751083088652, 0.696177131491463, 0.69507511398000088,
        0.69397146088965389, 0.69286617481742463, 0.69175925836415775,
        0.6906507141345346, 0.68954054473706683, 0.68842875278409044,
        0.687315340891759, 0.68620031168003859, 0.68508366777270036,
        0.6839654117973154, 0.68284554638524808, 0.68172407417164971,
        0.680600997795453, 0.679476319899365, 0.67835004312986147,
        0.67722217013718033, 0.67609270357531592, 0.674961646102012,
        0.673829000378756, 0.67269476907077286, 0.67155895484701833,
        0.67042156038017309, 0.669282588346636, 0.66814204142651845,
        0.66699992230363747, 0.66585623366550972, 0.66471097820334479,
        0.66356415861203977, 0.66241577759017178, 0.66126583783999227,
        0.66011434206742048, 0.65896129298203732, 0.65780669329707864,
        0.65665054572942894, 0.65549285299961535, 0.65433361783180044,
        0.65317284295377676, 0.6520105310969595, 0.650846684996381,
        0.64968130739068319, 0.64851440102211244, 0.64734596863651206,
        0.64617601298331628, 0.64500453681554393, 0.64383154288979139,
        0.64265703396622686, 0.641481012808583, 0.64030348218415167,
        0.63912444486377573, 0.637943903621844, 0.6367618612362842,
        0.63557832048855611, 0.63439328416364549, 0.63320675505005719,
        0.63201873593980906, 0.63082922962842447, 0.629638238914927,
        0.6284457666018326, 0.62725181549514408, 0.62605638840434352,
        0.62485948814238634, 0.62366111752569453, 0.62246127937415,
        0.62125997651108755, 0.6200572117632891, 0.61885298796097632,
        0.61764730793780387, 0.61644017453085365, 0.61523159058062682,
        0.61402155893103849, 0.61281008242940971, 0.61159716392646191,
        0.61038280627630948, 0.60916701233645321, 0.60794978496777363,
        0.60673112703452448, 0.60551104140432555, 0.604289530948156,
        0.60306659854034816, 0.60184224705858, 0.600616479383869,
        0.59938929840056454, 0.59816070699634238, 0.59693070806219639,
        0.59569930449243336, 0.59446649918466443, 0.5932322950397998,
        0.591996694962041, 0.59075970185887416, 0.58952131864106394,
        0.58828154822264522, 0.587040393520918, 0.58579785745643886,
        0.58455394295301533, 0.58330865293769829, 0.58206199034077544,
        0.58081395809576453, 0.57956455913940563, 0.57831379641165559,
        0.57706167285567944, 0.57580819141784534, 0.57455335504771576,
        0.5732971666980422, 0.572039629324757, 0.57078074588696726,
        0.56952051934694714, 0.56825895267013149, 0.56699604882510868,
        0.56573181078361312, 0.5644662415205195, 0.56319934401383409,
        0.56193112124468936, 0.560661576197336, 0.55939071185913614,
        0.5581185312205561, 0.5568450372751601, 0.55557023301960218,
        0.55429412145362, 0.55301670558002747, 0.55173798840470734,
        0.55045797293660481, 0.54917666218771966, 0.54789405917310019,
        0.54661016691083486, 0.54532498842204646, 0.54403852673088382,
        0.54275078486451589, 0.54146176585312344, 0.54017147272989285,
        0.53887990853100842, 0.53758707629564539, 0.53629297906596318,
        0.53499761988709715, 0.533701001807153, 0.5324031278771979,
        0.531104001151255, 0.52980362468629461, 0.52850200154222848,
        0.52719913478190128, 0.52589502747108463, 0.524589682678469,
        0.52328310347565643, 0.52197529293715439, 0.52066625414036716,
        0.51935599016558964, 0.51804450409599934, 0.51673179901764987,
        0.51541787801946293, 0.51410274419322166, 0.512786400633563,
        0.5114688504379703, 0.51015009670676681, 0.508830142543107,
        0.50750899105297087, 0.50618664534515523, 0.50486310853126759,
        0.50353838372571758, 0.50221247404571079, 0.50088538261124071,
        0.49955711254508184, 0.49822766697278181, 0.49689704902265447,
        0.49556526182577254, 0.49423230851595967, 0.49289819222978404,
        0.4915629161065499, 0.49022648328829116, 0.48888889691976317,
        0.487550160148436, 0.48621027612448642, 0.48486924800079106,
        0.48352707893291874, 0.48218377207912272, 0.48083933060033396,
        0.47949375766015295, 0.478147056424843, 0.47679923006332209,
        0.47545028174715587, 0.47410021465054997, 0.47274903195034279,
        0.47139673682599764, 0.47004333245959562, 0.46868882203582796,
        0.46733320874198842, 0.46597649576796618, 0.46461868630623782,
        0.46325978355186015, 0.46189979070246273, 0.46053871095824,
        0.45917654752194409, 0.45781330359887717, 0.45644898239688392,
        0.45508358712634384, 0.45371712100016387, 0.45234958723377089,
        0.45098098904510386, 0.44961132965460654, 0.44824061228521989,
        0.44686884016237416, 0.44549601651398174, 0.4441221445704292,
        0.44274722756457, 0.44137126873171667, 0.43999427130963326,
        0.43861623853852766, 0.43723717366104409, 0.43585707992225547,
        0.43447596056965565, 0.43309381885315196, 0.43171065802505726,
        0.43032648134008261, 0.42894129205532949, 0.42755509343028208,
        0.42616788872679962, 0.42477968120910881, 0.42339047414379605,
        0.42200027079979968, 0.42060907444840251, 0.41921688836322391,
        0.41782371582021227, 0.41642956009763715, 0.41503442447608163,
        0.4136383122384345, 0.41224122666988289, 0.41084317105790391,
        0.40944414869225759, 0.40804416286497869, 0.40664321687036903,
        0.40524131400498986, 0.40383845756765407, 0.40243465085941843,
        0.40102989718357562, 0.39962419984564679, 0.39821756215337356,
        0.39680998741671031, 0.39540147894781635, 0.3939920400610481,
        0.39258167407295147, 0.39117038430225387, 0.38975817406985641,
        0.38834504669882625, 0.38693100551438858, 0.38551605384391885,
        0.38410019501693504, 0.38268343236508978, 0.38126576922216238,
        0.37984720892405116, 0.37842775480876556, 0.37700741021641826,
        0.37558617848921722, 0.37416406297145793, 0.37274106700951576,
        0.37131719395183749, 0.3698924471489341, 0.36846682995337232,
        0.36704034571976718, 0.36561299780477385, 0.36418478956707989,
        0.36275572436739723, 0.36132580556845428, 0.35989503653498811,
        0.35846342063373654, 0.35703096123343, 0.35559766170478385,
        0.35416352542049034, 0.35272855575521073, 0.35129275608556709,
        0.34985612979013492, 0.34841868024943456, 0.34698041084592368,
        0.34554132496398909, 0.34410142598993881, 0.34266071731199438,
        0.34121920232028236, 0.33977688440682685, 0.33833376696554113,
        0.33688985339222005, 0.3354451470845316, 0.33399965144200938,
        0.33255336986604422, 0.33110630575987643, 0.32965846252858749,
        0.3282098435790925, 0.32676045232013173, 0.32531029216226293,
        0.32385936651785285, 0.32240767880106985, 0.32095523242787521,
        0.31950203081601569, 0.31804807738501495, 0.31659337555616585,
        0.31513792875252244, 0.31368174039889152, 0.31222481392182488,
        0.31076715274961147, 0.30930876031226873, 0.30784964004153487,
        0.30638979537086092, 0.30492922973540237, 0.30346794657201132,
        0.30200594931922808, 0.30054324141727345, 0.29907982630804048,
        0.2976157074350862, 0.29615088824362379, 0.29468537218051433,
        0.29321916269425863, 0.29175226323498926, 0.29028467725446233,
        0.28881640820604948, 0.28734745954472951, 0.28587783472708062,
        0.28440753721127188, 0.28293657045705539, 0.28146493792575794,
        0.27999264308027322, 0.27851968938505306, 0.2770460803060999,
        0.27557181931095814, 0.27409690986870638, 0.272621355449949,
        0.271145159526808, 0.26966832557291509, 0.26819085706340318,
        0.26671275747489837, 0.26523403028551179, 0.26375467897483135,
        0.26227470702391359, 0.26079411791527551, 0.25931291513288623,
        0.257831102162159, 0.25634868248994291, 0.25486565960451457,
        0.25338203699557016, 0.25189781815421697, 0.25041300657296522,
        0.24892760574572015, 0.24744161916777327, 0.24595505033579459,
        0.24446790274782415, 0.24298017990326387, 0.24149188530286933,
        0.2400030224487415, 0.23851359484431842, 0.2370236059943672,
        0.23553305940497549, 0.23404195858354343, 0.23255030703877524,
        0.23105810828067111, 0.22956536582051887, 0.22807208317088573,
        0.22657826384561, 0.22508391135979283, 0.22358902922979,
        0.22209362097320351, 0.22059769010887351, 0.2191012401568698,
        0.21760427463848364, 0.21610679707621952, 0.21460881099378676,
        0.21311031991609136, 0.21161132736922755, 0.21011183688046961,
        0.20861185197826349, 0.20711137619221856, 0.20561041305309924,
        0.20410896609281687, 0.20260703884442113, 0.2011046348420919,
        0.19960175762113097, 0.19809841071795356, 0.19659459767008022,
        0.19509032201612825, 0.19358558729580361, 0.19208039704989244,
        0.19057475482025274, 0.18906866414980619, 0.1875621285825296,
        0.18605515166344663, 0.18454773693861962, 0.18303988795514095,
        0.18153160826112497, 0.18002290140569951, 0.17851377093899751,
        0.17700422041214875, 0.17549425337727143, 0.17398387338746382,
        0.17247308399679595, 0.17096188876030122, 0.16945029123396796,
        0.16793829497473117, 0.1664259035404641, 0.16491312048996992,
        0.16339994938297323, 0.16188639378011183, 0.16037245724292828,
        0.15885814333386145, 0.15734345561623825, 0.15582839765426523,
        0.1543129730130201, 0.15279718525844344, 0.15128103795733022,
        0.14976453467732151, 0.14824767898689603, 0.14673047445536175,
        0.14521292465284746, 0.14369503315029447, 0.14217680351944803,
        0.14065823933284921, 0.1391393441638262, 0.13762012158648604,
        0.1361005751757062, 0.13458070850712617, 0.13306052515713906,
        0.13154002870288312, 0.13001922272223335, 0.12849811079379317,
        0.12697669649688587, 0.12545498341154623, 0.12393297511851216,
        0.1224106751992162, 0.12088808723577708, 0.11936521481099135,
        0.11784206150832498, 0.11631863091190475, 0.11479492660651008,
        0.11327095217756435, 0.11174671121112659, 0.11022220729388306,
        0.10869744401313872, 0.10717242495680884, 0.10564715371341062,
        0.10412163387205459, 0.10259586902243628, 0.10106986275482782,
        0.099543618660069319, 0.0980171403295606, 0.096490431355252593,
        0.094963495329638992, 0.093436335845747787, 0.091908956497132724,
        0.090381360877864983, 0.0888535525825246, 0.087325535206192059,
        0.0857973123444399, 0.084268887593324071, 0.082740264549375692,
        0.081211446809592441, 0.079682437971430126, 0.078153241632794232,
        0.076623861392031492, 0.0750943008479213, 0.073564563599667426,
        0.072034653246889332, 0.070504573389613856, 0.068974327628266746,
        0.067443919563664051, 0.0659133527970038, 0.064382630929857465,
        0.0628517575641614, 0.061320736302208578, 0.059789570746639868,
        0.058258264500435752, 0.056726821166907748, 0.055195244349689941,
        0.05366353765273052, 0.052131704680283324, 0.050599749036899282,
        0.049067674327418015, 0.0475354841569593, 0.046003182130914623,
        0.044470771854938668, 0.04293825693494082, 0.041405640977076739,
        0.039872927587739811, 0.038340120373552694, 0.036807222941358832,
        0.035274238898213947, 0.03374117185137758, 0.032208025408304586,
        0.030674803176636626, 0.029141508764193722, 0.02760814577896574,
        0.0260747178291039, 0.024541228522912288, 0.023007681468839369,
        0.021474080275469508, 0.019940428551514441, 0.01840672990580482,
        0.01687298794728171, 0.0153392062849881, 0.013805388528060391,
        0.012271538285719925, 0.010737659167264491, 0.00920375478205982,
        0.007669828739531097, 0.0061358846491544753, 0.0046019261204485705,
        0.0030679567629659761, 0.0015339801862847655, 0.0 };

      static const double b_dv[1250]{ 0.080000000000000016, 0.080005820519922888,
        0.080023281932394, 0.08005238379552404, 0.0800931253728438,
        0.080145505633321956, 0.0802095232513918, 0.080285176606984587,
        0.080372463785570392, 0.080471382578206907, 0.0805819304815949,
        0.080704104698141932, 0.080837902136032924, 0.080983319409308419,
        0.081140352837950569, 0.081308998447975844, 0.081489251971535837,
        0.081681108847025174, 0.081884564219197153, 0.082099612939286248,
        0.082326249565138843, 0.082564468361350452, 0.082814263299411384,
        0.083075628057859008, 0.083348556022437681, 0.08363304028626628,
        0.083929073650013064, 0.084236648622077526, 0.0845557574187803,
        0.0848863919645601, 0.085228543892177933, 0.085582204542928975,
        0.085947364966861728, 0.0863240159230042, 0.086712147879598245,
        0.087111751014340433, 0.087522815214630789, 0.087945330077828454,
        0.08837928491151531, 0.088824668733766432, 0.089281470273427754,
        0.089749677970401676, 0.090229279975939325, 0.0907202641529406,
        0.0912226180762612, 0.0917363290330272, 0.092261384022956527,
        0.092797769758688253, 0.09334547266611859, 0.093904478884744513,
        0.09447477426801465, 0.095056344383687152, 0.09564917451419469,
        0.096253249657017481, 0.096868554525062378, 0.097495073547050115,
        0.0981327908679091, 0.098781690349177, 0.0994417555694086,
        0.10011296982459195, 0.10079531612857079, 0.10148877721347438,
        0.10219333553015475, 0.10290897324863035, 0.10363567225853787,
        0.10437341416958995, 0.10512218031204107, 0.10588195173715964,
        0.10665270921770775, 0.10743443324842777, 0.10822710404653574,
        0.10903070155222228, 0.10984520542915999, 0.11067059506501825,
        0.11150684957198476, 0.11235394778729441, 0.11321186827376412,
        0.11408058932033632, 0.11496008894262777, 0.11585034488348583,
        0.11675133461355219, 0.11766303533183248, 0.11858542396627381,
        0.11951847717434821, 0.12046217134364345, 0.12141648259246091,
        0.12238138677041954, 0.12335685945906721, 0.1243428759724986,
        0.12533941135798, 0.12634644039658055, 0.12736393760381093,
        0.12839187723026779, 0.12943023326228548, 0.13047897942259468,
        0.13153808917098692, 0.13260753570498673, 0.13368729196052942,
        0.13477733061264635, 0.13587762407615611, 0.13698814450636315,
        0.13810886379976178, 0.13923975359474766, 0.14038078527233588,
        0.14153192995688435, 0.14269315851682562, 0.14386444156540318,
        0.14504574946141569, 0.14623705230996692, 0.14743831996322215,
        0.14864952202117132, 0.14987062783239841, 0.15110160649485682,
        0.15234242685665167, 0.153593057516828, 0.15485346682616546,
        0.15612362288797932, 0.15740349355892763, 0.15869304644982446,
        0.15999224892645991, 0.16130106811042566, 0.16261947087994727,
        0.1639474238707222, 0.16528489347676406, 0.16663184585125357,
        0.16798824690739428, 0.16935406231927597, 0.17072925752274293,
        0.17211379771626872, 0.17350764786183692, 0.17491077268582778,
        0.1763231366799109, 0.17774470410194371, 0.17917543897687638,
        0.18061530509766166, 0.18206426602617154, 0.18352228509411933,
        0.18498932540398744, 0.18646534982996127, 0.18795032101886883,
        0.18944420139112578, 0.19094695314168658, 0.19245853824100123,
        0.19397891843597759, 0.19550805525094961, 0.19704590998865068,
        0.19859244373119328, 0.20014761734105357, 0.20171139146206224,
        0.2032837265204, 0.20486458272559926, 0.20645392007155111,
        0.20805169833751797, 0.20965787708915085, 0.21127241567951316,
        0.21289527325010915, 0.21452640873191786, 0.21616578084643245,
        0.21781334810670477, 0.21946906881839562, 0.22113290108082923,
        0.2228048027880542, 0.22448473162990878, 0.22617264509309187,
        0.22786850046223828, 0.22957225482100041, 0.23128386505313403,
        0.23300328784358931, 0.23473047967960703, 0.23646539685181989,
        0.23820799545535842, 0.23995823139096228, 0.24171606036609605,
        0.24348143789607046, 0.24525431930516756, 0.24703465972777189,
        0.24882241410950573, 0.25061753720836888, 0.25241998359588447,
        0.25422970765824737, 0.25604666359747963, 0.25787080543258883,
        0.259702087000732, 0.26154046195838371, 0.26338588378250888,
        0.26523830577174007, 0.26709768104755954, 0.26896396255548533,
        0.27083710306626241, 0.27271705517705735, 0.27460377131265823,
        0.27649720372667891, 0.27839730450276667, 0.28030402555581552,
        0.28221731863318233, 0.28413713531590862, 0.28606342701994542,
        0.28799614499738296, 0.28993524033768447, 0.29188066396892343,
        0.2938323666590259, 0.29579029901701659, 0.29775441149426762,
        0.29972465438575413, 0.30170097783131067, 0.303683331816894,
        0.305671666175848, 0.30766593059017383, 0.309666074591803,
        0.31167204756387468, 0.31368379874201635, 0.31570127721562879,
        0.31772443192917454, 0.31975321168346954, 0.32178756513697915,
        0.32382744080711717, 0.325872787071549, 0.32792355216949753,
        0.329979684203054, 0.33204113113849, 0.33410784080757527,
        0.33617976090889778, 0.3382568390091869, 0.34033902254464066,
        0.34242625882225552, 0.34451849502116083, 0.34661567819395439,
        0.34871775526804288, 0.35082467304698511, 0.35293637821183788,
        0.35505281732250582, 0.35717393681909326, 0.35929968302325954,
        0.36143000213957821, 0.36356484025689756, 0.36570414334970569,
        0.36784785727949687, 0.36999592779614215, 0.37214830053926251,
        0.37430492103960367, 0.37646573472041539, 0.37863068689883206,
        0.3807997227872566, 0.38297278749474761, 0.38514982602840742,
        0.38733078329477438, 0.38951560410121722, 0.39170423315733138,
        0.39389661507633872, 0.3960926943764882, 0.39829241548246141,
        0.4004957227267778, 0.40270256035120366, 0.40491287250816355,
        0.40712660326215339, 0.4093436965911561, 0.41156409638805891,
        0.41378774646207395, 0.41601459054015949, 0.41824457226844453,
        0.42047763521365505, 0.42271372286454156, 0.42495277863330955,
        0.42719474585705164, 0.42943956779918119, 0.43168718765086872,
        0.43393754853247879, 0.43619059349500988, 0.43844626552153554,
        0.44070450752864715, 0.44296526236789874, 0.44522847282725281,
        0.44749408163252885, 0.449762031448852, 0.45203226488210457,
        0.45430472448037812, 0.45657935273542749, 0.45885609208412642,
        0.46113488490992383, 0.46341567354430213, 0.46569840026823656,
        0.46798300731365589, 0.47026943686490452, 0.47255763106020521,
        0.47484753199312341, 0.4771390817140333, 0.47943222223158327,
        0.4817268955141647, 0.4840230434913792, 0.4863206080555092,
        0.48861953106298822, 0.49091975433587204, 0.49322121966331112,
        0.49552386880302368, 0.49782764348276981, 0.50013248540182609,
        0.50243833623246048, 0.50474513762140927, 0.50705283119135314,
        0.50936135854239439, 0.511670661253536, 0.51398068088415816,
        0.51629135897549916, 0.518602637052133, 0.52091445662345137,
        0.523226759185141, 0.52553948622066693, 0.52785257920275186,
        0.53016597959485745, 0.532479628852666, 0.534793468425562,
        0.53710743975811326, 0.5394214842915539, 0.541735543465265,
        0.54404955871825733, 0.546363471490653, 0.54867722322516788,
        0.550990755368593, 0.55330400937327662, 0.55561692669860507,
        0.55792944881248585, 0.56024151719282755, 0.562553073329021,
        0.56486405872342027, 0.56717441489282316, 0.56948408336995116,
        0.5717930057049283, 0.57410112346676145, 0.5764083782448185,
        0.57871471165030608, 0.5810200653177483, 0.58332438090646266,
        0.58562760010203674, 0.5879296646178046, 0.59023051619632128,
        0.592530096610837, 0.59482834766677029, 0.59712521120318229,
        0.599420629094247, 0.6017145432507226, 0.60400689562142185,
        0.60629762819468147, 0.608586682999829, 0.61087400210865117,
        0.613159527636859, 0.61544320174555323, 0.61772496664268717,
        0.62000476458453069, 0.62228253787713, 0.624558228877768,
        0.62683177999642425, 0.629103133697231, 0.63137223249992969,
        0.63363901898132524, 0.63590343577674024, 0.63816542558146572,
        0.64042493115221144, 0.6426818953085548, 0.644936260934388,
        0.64718797097936287, 0.64943696846033516, 0.6516831964628067,
        0.65392659814236465, 0.6561671167261216, 0.65840469551415126,
        0.66063927788092358, 0.66287080727673764, 0.66509922722915293,
        0.66732448134441869, 0.66954651330890025, 0.67176526689050509,
        0.67398068594010518, 0.67619271439295847, 0.678401296270127,
        0.68060637567989413, 0.68280789681917919, 0.68500580397494848,
        0.68720004152562664, 0.68939055394250337, 0.69157728579113864,
        0.693760181732766, 0.69593918652569287, 0.69811424502669839,
        0.70028530219242868, 0.70245230308079043, 0.70461519285234109,
        0.706773916771676, 0.70892842020881419, 0.71107864864058157,
        0.71322454765198873, 0.71536606293761018, 0.71750314030295692,
        0.71963572566584955, 0.72176376505778506, 0.7238872046253042,
        0.72600599063135351, 0.728120069456645, 0.73022938760101408,
        0.73233389168477259, 0.73443352845005971, 0.73652824476219014,
        0.73861798761099884, 0.74070270411218175, 0.74278234150863465,
        0.74485684717178857, 0.74692616860294136, 0.74899025343458558,
        0.751049049431735, 0.75310250449324578, 0.75515056665313451,
        0.75719318408189462, 0.75923030508780642, 0.761261878118247,
        0.76328785176099256, 0.765308174745522, 0.767322795944313,
        0.76933166437413547, 0.77133472919734292, 0.77333193972315861,
        0.77532324540895781, 0.7773085958615471, 0.77928794083844033,
        0.78126123024912963, 0.78322841415635236, 0.78518944277735581,
        0.7871442664851569, 0.7890928358097975, 0.79103510143959688,
        0.79297101422239935, 0.79490052516681864, 0.79682358544347642,
        0.79874014638623958, 0.8006501594934512, 0.80255357642915737,
        0.80445034902433121, 0.80634042927809157, 0.80822376935891782,
        0.81010032160585965, 0.81197003852974459, 0.81383287281437888,
        0.81568877731774458, 0.81753770507319312, 0.81937960929063447,
        0.82121444335771954, 0.82304216084102122, 0.824862715487209,
        0.82667606122421944, 0.82848215216242216, 0.83028094259578111,
        0.83207238700301145, 0.83385644004873094, 0.83563305658460774,
        0.83740219165050345, 0.83916380047560946, 0.84091783847958124,
        0.84266426127366589, 0.84440302466182571, 0.8461340846418568,
        0.847857397406502, 0.84957291934456025, 0.8512806070419896,
        0.85298041728300644, 0.8546723070511788, 0.85635623353051438,
        0.85803215410654576, 0.859700026367407, 0.86135980810490853,
        0.86301145731560336, 0.86465493220185186, 0.866290191172879,
        0.86791719284582636, 0.86953589604679959, 0.871146259811911,
        0.87274824338831514, 0.87434180623524127, 0.87592690802501849,
        0.87750350864409676, 0.87907156819406129, 0.88063104699264361,
        0.8821819055747242, 0.8837241046933324, 0.885257605320639,
        0.88678236864894444, 0.88829835609166008, 0.88980552928428547,
        0.89130385008537893, 0.892793280577523, 0.89427378306828342,
        0.895745320091163, 0.89720785440655126, 0.8986613490026647,
        0.90010576709648471, 0.90154107213468881, 0.902967227794574,
        0.90438419798497771, 0.90579194684719044, 0.90719043875586292,
        0.90857963831990785, 0.9099595103833964, 0.91133002002644647,
        0.91269113256610734, 0.91404281355723671, 0.91538502879337358,
        0.91671774430760233, 0.9180409263734135, 0.91935454150555684,
        0.92065855646088846, 0.92195293823921254, 0.92323765408411662,
        0.9245126714837999, 0.92577795817189623, 0.92703348212829106,
        0.92827921157993121, 0.92951511500162964, 0.93074116111686211,
        0.93195731889855982, 0.93316355756989433, 0.93435984660505578,
        0.935546155730026, 0.93672245492334483, 0.937888714416869,
        0.93904490469652668, 0.94019099650306281, 0.94132696083278111,
        0.94245276893827712, 0.943568392329166, 0.94467380277280366,
        0.94576897229500068, 0.94685387318073111, 0.947928477974833,
        0.9489927594827039, 0.95004669077098813, 0.95109024516825957,
        0.95212339626569586, 0.95314611791774662, 0.95415838424279564,
        0.95516016962381545, 0.95615144870901569, 0.95713219641248481,
        0.95810238791482494, 0.95906199866377939, 0.96001100437485509,
        0.96094938103193583, 0.96187710488789135, 0.9627941524651773,
        0.96370050055642964, 0.96459612622505231, 0.96548100680579729,
        0.96635511990533818, 0.96721844340283736, 0.96807095545050481,
        0.96891263447415221, 0.96974345917373816, 0.97056340852390743,
        0.97137246177452274, 0.97217059845119058, 0.97295779835577845,
        0.97373404156692689, 0.97449930844055266, 0.97525357961034675,
        0.97599683598826448, 0.97672905876500726, 0.9774502294105003,
        0.97816032967436051, 0.97885934158635857, 0.97954724745687383,
        0.98022402987734181, 0.98088967172069474, 0.98154415614179535,
        0.98218746657786271, 0.98281958674889136, 0.983440500658064,
        0.9840501925921552, 0.98464864712193023, 0.98523584910253448,
        0.98581178367387745, 0.98637643626100857, 0.986929792574486,
        0.987471838610738, 0.98800256065241809, 0.98852194526875126,
        0.98902997931587433, 0.98952664993716888, 0.990011944563586,
        0.99048585091396446, 0.99094835699534189, 0.99139945110325811,
        0.991839121822051, 0.99226735802514621, 0.99268414887533774,
        0.99308948382506257, 0.9934833526166682, 0.99386574528267091,
        0.99423665214600976, 0.99459606382028976, 0.99494397121002043,
        0.99528036551084575, 0.995605238209767, 0.99591858108535791,
        0.996220386207973, 0.99651064593994831, 0.9967893529357944,
        0.99705650014238256, 0.99731208079912315, 0.99755608843813637,
        0.99778851688441661, 0.99800936025598808, 0.99821861296405423,
        0.99841626971313868, 0.9986023255012193, 0.99877677561985556,
        0.99893961565430611, 0.99909084148364236, 0.99923044928085125,
        0.999358435512933, 0.99947479694099028, 0.9995795306203098,
        0.99967263390043748, 0.999754104425245, 0.99982394013298981,
        0.99988213925636693, 0.99992870032255388, 0.99996362215324819,
        0.99998690386469646, 0.99999854486771778, 0.99999854486771778,
        0.99998690386469646, 0.99996362215324819, 0.99992870032255388,
        0.99988213925636693, 0.99982394013298981, 0.999754104425245,
        0.99967263390043748, 0.9995795306203098, 0.99947479694099028,
        0.999358435512933, 0.99923044928085125, 0.99909084148364236,
        0.99893961565430611, 0.99877677561985556, 0.9986023255012193,
        0.99841626971313868, 0.99821861296405423, 0.99800936025598808,
        0.99778851688441661, 0.99755608843813637, 0.99731208079912315,
        0.99705650014238256, 0.9967893529357944, 0.99651064593994831,
        0.996220386207973, 0.99591858108535791, 0.995605238209767,
        0.99528036551084575, 0.99494397121002043, 0.99459606382028976,
        0.99423665214600976, 0.99386574528267091, 0.9934833526166682,
        0.99308948382506257, 0.99268414887533774, 0.99226735802514621,
        0.991839121822051, 0.99139945110325811, 0.99094835699534189,
        0.99048585091396446, 0.990011944563586, 0.98952664993716888,
        0.98902997931587433, 0.98852194526875126, 0.98800256065241809,
        0.987471838610738, 0.986929792574486, 0.98637643626100857,
        0.98581178367387745, 0.98523584910253448, 0.98464864712193023,
        0.9840501925921552, 0.983440500658064, 0.98281958674889136,
        0.98218746657786271, 0.98154415614179535, 0.98088967172069474,
        0.98022402987734181, 0.97954724745687383, 0.97885934158635857,
        0.97816032967436051, 0.9774502294105003, 0.97672905876500726,
        0.97599683598826448, 0.97525357961034675, 0.97449930844055266,
        0.97373404156692689, 0.97295779835577845, 0.97217059845119058,
        0.97137246177452274, 0.97056340852390743, 0.96974345917373816,
        0.96891263447415221, 0.96807095545050481, 0.96721844340283736,
        0.96635511990533818, 0.96548100680579729, 0.96459612622505231,
        0.96370050055642964, 0.9627941524651773, 0.96187710488789135,
        0.96094938103193583, 0.96001100437485509, 0.95906199866377939,
        0.95810238791482494, 0.95713219641248481, 0.95615144870901569,
        0.95516016962381545, 0.95415838424279564, 0.95314611791774662,
        0.95212339626569586, 0.95109024516825957, 0.95004669077098813,
        0.9489927594827039, 0.947928477974833, 0.94685387318073111,
        0.94576897229500068, 0.94467380277280366, 0.943568392329166,
        0.94245276893827712, 0.94132696083278111, 0.94019099650306281,
        0.93904490469652668, 0.937888714416869, 0.93672245492334483,
        0.935546155730026, 0.93435984660505578, 0.93316355756989433,
        0.93195731889855982, 0.93074116111686211, 0.92951511500162964,
        0.92827921157993121, 0.92703348212829106, 0.92577795817189623,
        0.9245126714837999, 0.92323765408411662, 0.92195293823921254,
        0.92065855646088846, 0.91935454150555684, 0.9180409263734135,
        0.91671774430760233, 0.91538502879337358, 0.91404281355723671,
        0.91269113256610734, 0.91133002002644647, 0.9099595103833964,
        0.90857963831990785, 0.90719043875586292, 0.90579194684719044,
        0.90438419798497771, 0.902967227794574, 0.90154107213468881,
        0.90010576709648471, 0.8986613490026647, 0.89720785440655126,
        0.895745320091163, 0.89427378306828342, 0.892793280577523,
        0.89130385008537893, 0.88980552928428547, 0.88829835609166008,
        0.88678236864894444, 0.885257605320639, 0.8837241046933324,
        0.8821819055747242, 0.88063104699264361, 0.87907156819406129,
        0.87750350864409676, 0.87592690802501849, 0.87434180623524127,
        0.87274824338831514, 0.871146259811911, 0.86953589604679959,
        0.86791719284582636, 0.866290191172879, 0.86465493220185186,
        0.86301145731560336, 0.86135980810490853, 0.859700026367407,
        0.85803215410654576, 0.85635623353051438, 0.8546723070511788,
        0.85298041728300644, 0.8512806070419896, 0.84957291934456025,
        0.847857397406502, 0.8461340846418568, 0.84440302466182571,
        0.84266426127366589, 0.84091783847958124, 0.83916380047560946,
        0.83740219165050345, 0.83563305658460774, 0.83385644004873094,
        0.83207238700301145, 0.83028094259578111, 0.82848215216242216,
        0.82667606122421944, 0.824862715487209, 0.82304216084102122,
        0.82121444335771954, 0.81937960929063447, 0.81753770507319312,
        0.81568877731774458, 0.81383287281437888, 0.81197003852974459,
        0.81010032160585965, 0.80822376935891782, 0.80634042927809157,
        0.80445034902433121, 0.80255357642915737, 0.8006501594934512,
        0.79874014638623958, 0.79682358544347642, 0.79490052516681864,
        0.79297101422239935, 0.79103510143959688, 0.7890928358097975,
        0.7871442664851569, 0.78518944277735581, 0.78322841415635236,
        0.78126123024912963, 0.77928794083844033, 0.7773085958615471,
        0.77532324540895781, 0.77333193972315861, 0.77133472919734292,
        0.76933166437413547, 0.767322795944313, 0.765308174745522,
        0.76328785176099256, 0.761261878118247, 0.75923030508780642,
        0.75719318408189462, 0.75515056665313451, 0.75310250449324578,
        0.751049049431735, 0.74899025343458558, 0.74692616860294136,
        0.74485684717178857, 0.74278234150863465, 0.74070270411218175,
        0.73861798761099884, 0.73652824476219014, 0.73443352845005971,
        0.73233389168477259, 0.73022938760101408, 0.728120069456645,
        0.72600599063135351, 0.7238872046253042, 0.72176376505778506,
        0.71963572566584955, 0.71750314030295692, 0.71536606293761018,
        0.71322454765198873, 0.71107864864058157, 0.70892842020881419,
        0.706773916771676, 0.70461519285234109, 0.70245230308079043,
        0.70028530219242868, 0.69811424502669839, 0.69593918652569287,
        0.693760181732766, 0.69157728579113864, 0.68939055394250337,
        0.68720004152562664, 0.68500580397494848, 0.68280789681917919,
        0.68060637567989413, 0.678401296270127, 0.67619271439295847,
        0.67398068594010518, 0.67176526689050509, 0.66954651330890025,
        0.66732448134441869, 0.66509922722915293, 0.66287080727673764,
        0.66063927788092358, 0.65840469551415126, 0.6561671167261216,
        0.65392659814236465, 0.6516831964628067, 0.64943696846033516,
        0.64718797097936287, 0.644936260934388, 0.6426818953085548,
        0.64042493115221144, 0.63816542558146572, 0.63590343577674024,
        0.63363901898132524, 0.63137223249992969, 0.629103133697231,
        0.62683177999642425, 0.624558228877768, 0.62228253787713,
        0.62000476458453069, 0.61772496664268717, 0.61544320174555323,
        0.613159527636859, 0.61087400210865117, 0.608586682999829,
        0.60629762819468147, 0.60400689562142185, 0.6017145432507226,
        0.599420629094247, 0.59712521120318229, 0.59482834766677029,
        0.592530096610837, 0.59023051619632128, 0.5879296646178046,
        0.58562760010203674, 0.58332438090646266, 0.5810200653177483,
        0.57871471165030608, 0.5764083782448185, 0.57410112346676145,
        0.5717930057049283, 0.56948408336995116, 0.56717441489282316,
        0.56486405872342027, 0.562553073329021, 0.56024151719282755,
        0.55792944881248585, 0.55561692669860507, 0.55330400937327662,
        0.550990755368593, 0.54867722322516788, 0.546363471490653,
        0.54404955871825733, 0.541735543465265, 0.5394214842915539,
        0.53710743975811326, 0.534793468425562, 0.532479628852666,
        0.53016597959485745, 0.52785257920275186, 0.52553948622066693,
        0.523226759185141, 0.52091445662345137, 0.518602637052133,
        0.51629135897549916, 0.51398068088415816, 0.511670661253536,
        0.50936135854239439, 0.50705283119135314, 0.50474513762140927,
        0.50243833623246048, 0.50013248540182609, 0.49782764348276981,
        0.49552386880302368, 0.49322121966331112, 0.49091975433587204,
        0.48861953106298822, 0.4863206080555092, 0.4840230434913792,
        0.4817268955141647, 0.47943222223158327, 0.4771390817140333,
        0.47484753199312341, 0.47255763106020521, 0.47026943686490452,
        0.46798300731365589, 0.46569840026823656, 0.46341567354430213,
        0.46113488490992383, 0.45885609208412642, 0.45657935273542749,
        0.45430472448037812, 0.45203226488210457, 0.449762031448852,
        0.44749408163252885, 0.44522847282725281, 0.44296526236789874,
        0.44070450752864715, 0.43844626552153554, 0.43619059349500988,
        0.43393754853247879, 0.43168718765086872, 0.42943956779918119,
        0.42719474585705164, 0.42495277863330955, 0.42271372286454156,
        0.42047763521365505, 0.41824457226844453, 0.41601459054015949,
        0.41378774646207395, 0.41156409638805891, 0.4093436965911561,
        0.40712660326215339, 0.40491287250816355, 0.40270256035120366,
        0.4004957227267778, 0.39829241548246141, 0.3960926943764882,
        0.39389661507633872, 0.39170423315733138, 0.38951560410121722,
        0.38733078329477438, 0.38514982602840742, 0.38297278749474761,
        0.3807997227872566, 0.37863068689883206, 0.37646573472041539,
        0.37430492103960367, 0.37214830053926251, 0.36999592779614215,
        0.36784785727949687, 0.36570414334970569, 0.36356484025689756,
        0.36143000213957821, 0.35929968302325954, 0.35717393681909326,
        0.35505281732250582, 0.35293637821183788, 0.35082467304698511,
        0.34871775526804288, 0.34661567819395439, 0.34451849502116083,
        0.34242625882225552, 0.34033902254464066, 0.3382568390091869,
        0.33617976090889778, 0.33410784080757527, 0.33204113113849,
        0.329979684203054, 0.32792355216949753, 0.325872787071549,
        0.32382744080711717, 0.32178756513697915, 0.31975321168346954,
        0.31772443192917454, 0.31570127721562879, 0.31368379874201635,
        0.31167204756387468, 0.309666074591803, 0.30766593059017383,
        0.305671666175848, 0.303683331816894, 0.30170097783131067,
        0.29972465438575413, 0.29775441149426762, 0.29579029901701659,
        0.2938323666590259, 0.29188066396892343, 0.28993524033768447,
        0.28799614499738296, 0.28606342701994542, 0.28413713531590862,
        0.28221731863318233, 0.28030402555581552, 0.27839730450276667,
        0.27649720372667891, 0.27460377131265823, 0.27271705517705735,
        0.27083710306626241, 0.26896396255548533, 0.26709768104755954,
        0.26523830577174007, 0.26338588378250888, 0.26154046195838371,
        0.259702087000732, 0.25787080543258883, 0.25604666359747963,
        0.25422970765824737, 0.25241998359588447, 0.25061753720836888,
        0.24882241410950573, 0.24703465972777189, 0.24525431930516756,
        0.24348143789607046, 0.24171606036609605, 0.23995823139096228,
        0.23820799545535842, 0.23646539685181989, 0.23473047967960703,
        0.23300328784358931, 0.23128386505313403, 0.22957225482100041,
        0.22786850046223828, 0.22617264509309187, 0.22448473162990878,
        0.2228048027880542, 0.22113290108082923, 0.21946906881839562,
        0.21781334810670477, 0.21616578084643245, 0.21452640873191786,
        0.21289527325010915, 0.21127241567951316, 0.20965787708915085,
        0.20805169833751797, 0.20645392007155111, 0.20486458272559926,
        0.2032837265204, 0.20171139146206224, 0.20014761734105357,
        0.19859244373119328, 0.19704590998865068, 0.19550805525094961,
        0.19397891843597759, 0.19245853824100123, 0.19094695314168658,
        0.18944420139112578, 0.18795032101886883, 0.18646534982996127,
        0.18498932540398744, 0.18352228509411933, 0.18206426602617154,
        0.18061530509766166, 0.17917543897687638, 0.17774470410194371,
        0.1763231366799109, 0.17491077268582778, 0.17350764786183692,
        0.17211379771626872, 0.17072925752274293, 0.16935406231927597,
        0.16798824690739428, 0.16663184585125357, 0.16528489347676406,
        0.1639474238707222, 0.16261947087994727, 0.16130106811042566,
        0.15999224892645991, 0.15869304644982446, 0.15740349355892763,
        0.15612362288797932, 0.15485346682616546, 0.153593057516828,
        0.15234242685665167, 0.15110160649485682, 0.14987062783239841,
        0.14864952202117132, 0.14743831996322215, 0.14623705230996692,
        0.14504574946141569, 0.14386444156540318, 0.14269315851682562,
        0.14153192995688435, 0.14038078527233588, 0.13923975359474766,
        0.13810886379976178, 0.13698814450636315, 0.13587762407615611,
        0.13477733061264635, 0.13368729196052942, 0.13260753570498673,
        0.13153808917098692, 0.13047897942259468, 0.12943023326228548,
        0.12839187723026779, 0.12736393760381093, 0.12634644039658055,
        0.12533941135798, 0.1243428759724986, 0.12335685945906721,
        0.12238138677041954, 0.12141648259246091, 0.12046217134364345,
        0.11951847717434821, 0.11858542396627381, 0.11766303533183248,
        0.11675133461355219, 0.11585034488348583, 0.11496008894262777,
        0.11408058932033632, 0.11321186827376412, 0.11235394778729441,
        0.11150684957198476, 0.11067059506501825, 0.10984520542915999,
        0.10903070155222228, 0.10822710404653574, 0.10743443324842777,
        0.10665270921770775, 0.10588195173715964, 0.10512218031204107,
        0.10437341416958995, 0.10363567225853787, 0.10290897324863035,
        0.10219333553015475, 0.10148877721347438, 0.10079531612857079,
        0.10011296982459195, 0.0994417555694086, 0.098781690349177,
        0.0981327908679091, 0.097495073547050115, 0.096868554525062378,
        0.096253249657017481, 0.09564917451419469, 0.095056344383687152,
        0.09447477426801465, 0.093904478884744513, 0.09334547266611859,
        0.092797769758688253, 0.092261384022956527, 0.0917363290330272,
        0.0912226180762612, 0.0907202641529406, 0.090229279975939325,
        0.089749677970401676, 0.089281470273427754, 0.088824668733766432,
        0.08837928491151531, 0.087945330077828454, 0.087522815214630789,
        0.087111751014340433, 0.086712147879598245, 0.0863240159230042,
        0.085947364966861728, 0.085582204542928975, 0.085228543892177933,
        0.0848863919645601, 0.0845557574187803, 0.084236648622077526,
        0.083929073650013064, 0.08363304028626628, 0.083348556022437681,
        0.083075628057859008, 0.082814263299411384, 0.082564468361350452,
        0.082326249565138843, 0.082099612939286248, 0.081884564219197153,
        0.081681108847025174, 0.081489251971535837, 0.081308998447975844,
        0.081140352837950569, 0.080983319409308419, 0.080837902136032924,
        0.080704104698141932, 0.0805819304815949, 0.080471382578206907,
        0.080372463785570392, 0.080285176606984587, 0.0802095232513918,
        0.080145505633321956, 0.0800931253728438, 0.08005238379552404,
        0.080023281932394, 0.080005820519922888, 0.080000000000000016 };

      static double xw[1250];
      double Sxx_unscaled[626];
      double nt_im;
      int rt;
      for (int i{0}; i < 1250; i++) {
        xw[i] = x[i] * b_dv[i];
      }

      rt = 0;
      wwc[624].re = 1.0;
      wwc[624].im = 0.0;
      for (int i{0}; i < 624; i++) {
        int y;
        y = ((i + 1) << 1) - 1;
        if (1250 - rt <= y) {
          rt = (y + rt) - 1250;
        } else {
          rt += y;
        }

        nt_im = -3.1415926535897931 * static_cast<double>(rt) / 625.0;
        wwc[623 - i].re = std::cos(nt_im);
        wwc[623 - i].im = -std::sin(nt_im);
      }

      for (int i{623}; i >= 0; i--) {
        wwc[i + 625] = wwc[623 - i];
      }

      internal::fft::FFTImplementationCallback::doHalfLengthBluestein(xw, Xx,
        wwc, dv4, sintabinv);
      for (int i{0}; i < 626; i++) {
        double Xx_im_tmp;
        double Xx_re_tmp;
        Xx_re_tmp = Xx[i].re;
        Xx_im_tmp = Xx[i].im;
        nt_im = Xx_re_tmp * Xx_re_tmp - Xx_im_tmp * -Xx_im_tmp;
        if (Xx_re_tmp * -Xx_im_tmp + Xx_im_tmp * Xx_re_tmp == 0.0) {
          nt_im /= 496.35899999999958;
        } else if (nt_im == 0.0) {
          nt_im = 0.0;
        } else {
          nt_im /= 496.35899999999958;
        }

        Sxx_unscaled[i] = nt_im;
      }

      varargout_1[0] = Sxx_unscaled[0] / 250.0;
      for (int i{0}; i < 624; i++) {
        varargout_1[i + 1] = 2.0 * Sxx_unscaled[i + 1] / 250.0;
      }

      varargout_1[625] = Sxx_unscaled[625] / 250.0;
      for (int i{0}; i < 626; i++) {
        varargout_2[i] = 0.2 * static_cast<double>(i);
      }
    }

    //
    // Arguments    : const ::coder::array<double, 2U> &x
    //                double y_data[]
    //                int y_size[2]
    // Return Type  : void
    //
    static void sum(const ::coder::array<double, 2U> &x, double y_data[], int
                    y_size[2])
    {
      int vlen;
      vlen = x.size(0);
      if (x.size(0) == 0) {
        y_size[0] = 1;
        y_size[1] = 2;
        y_data[0] = 0.0;
        y_data[1] = 0.0;
      } else {
        y_size[0] = 1;
        y_size[1] = 2;
        for (int xi{0}; xi < 2; xi++) {
          int xpageoffset;
          xpageoffset = xi * x.size(0);
          y_data[xi] = x[xpageoffset];
          for (int k{2}; k <= vlen; k++) {
            y_data[xi] += x[(xpageoffset + k) - 1];
          }
        }
      }
    }

    //
    // Arguments    : const double x[110]
    //                double y[110]
    // Return Type  : void
    //
    static void vmovfun(const double x[110], double y[110])
    {
      double b_y;
      int b_k;
      int iLeft;
      int vlen;

#pragma omp parallel for \
 num_threads(omp_get_max_threads()) \
 private(iLeft,vlen,b_y,b_k)

      for (int k = 0; k < 110; k++) {
        if (k + 1 <= 2) {
          iLeft = -2;
        } else {
          iLeft = k - 4;
        }

        if (k + 3 > 110) {
          vlen = 108;
        } else {
          vlen = k + 1;
        }

        vlen -= iLeft;
        if (vlen == 0) {
          b_y = 0.0;
        } else {
          b_y = x[iLeft + 2];
          for (b_k = 2; b_k <= vlen; b_k++) {
            b_y += x[(iLeft + b_k) + 1];
          }
        }

        y[k] = b_y / static_cast<double>(vlen);
      }
    }

    //
    // Arguments    : double u0
    //                double u1
    // Return Type  : double
    //
  }

  static double rt_hypotd_snf(double u0, double u1)
  {
    double a;
    double b;
    double y;
    a = std::abs(u0);
    b = std::abs(u1);
    if (a < b) {
      a /= b;
      y = b * std::sqrt(a * a + 1.0);
    } else if (a > b) {
      b /= a;
      y = a * std::sqrt(b * b + 1.0);
    } else if (std::isnan(b)) {
      y = rtNaN;
    } else {
      y = a * 1.4142135623730951;
    }

    return y;
  }

  //
  // Arguments    : double u0
  //                double u1
  // Return Type  : double
  //
  static double rt_powd_snf(double u0, double u1)
  {
    double y;
    if (std::isnan(u0) || std::isnan(u1)) {
      y = rtNaN;
    } else {
      double d;
      double d1;
      d = std::abs(u0);
      d1 = std::abs(u1);
      if (std::isinf(u1)) {
        if (d == 1.0) {
          y = 1.0;
        } else if (d > 1.0) {
          if (u1 > 0.0) {
            y = rtInf;
          } else {
            y = 0.0;
          }
        } else if (u1 > 0.0) {
          y = 0.0;
        } else {
          y = rtInf;
        }
      } else if (d1 == 0.0) {
        y = 1.0;
      } else if (d1 == 1.0) {
        if (u1 > 0.0) {
          y = u0;
        } else {
          y = 1.0 / u0;
        }
      } else if (u1 == 2.0) {
        y = u0 * u0;
      } else if ((u1 == 0.5) && (u0 >= 0.0)) {
        y = std::sqrt(u0);
      } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
        y = rtNaN;
      } else {
        y = std::pow(u0, u1);
      }
    }

    return y;
  }

  //
  // Optimization of parameters of the sigmoid function
  //
  //  Syntax:
  //        [param]=sigm_fit(x,y)
  //
  //        that is the same that
  //        [param]=sigm_fit(x,y,[],[],[])     % no fixed_params, automatic initial_params
  //
  //        [param]=sigm_fit(x,y,fixed_params)        % automatic initial_params
  //        [param]=sigm_fit(x,y,[],initial_params)   % use it when the estimation is poor
  //        [param]=sigm_fit(x,y,fixed_params,initial_params,plot_flag)
  //
  //  param = [min, max, x50, slope]
  //
  //  if fixed_params=[NaN, NaN , NaN , NaN]        % or fixed_params=[]
  //  optimization of "min", "max", "x50" and "slope" (default)
  //
  //  if fixed_params=[0, 1 , NaN , NaN]
  //  optimization of x50 and slope of a sigmoid of ranging from 0 to 1
  //
  //
  //  Additional information in the second output, STAT
  //  [param,stat]=sigm_fit(x,y,fixed_params,initial_params,plot_flag)
  //
  //
  //  Example:
  //  %% generate data vectors (x and y)
  //  fsigm = @(param,xval) param(1)+(param(2)-param(1))./(1+10.^((param(3)-xval)*param(4)))
  //  param=[0 1 5 1];  % "min", "max", "x50", "slope"
  //  x=0:0.1:10;
  //  y=fsigm(param,x) + 0.1*randn(size(x));
  //
  //  %% standard parameter estimation
  //  [estimated_params]=sigm_fit(x,y)
  //
  //  %% parameter estimation with forced 0.5 fixed min
  //  [estimated_params]=sigm_fit(x,y,[0.5 NaN NaN NaN])
  //
  //  %% parameter estimation without plotting
  //  [estimated_params]=sigm_fit(x,y,[],[],0)
  //
  //
  //  Doubts, bugs: rpavao@gmail.com
  //  Downloaded from http://www.mathworks.com/matlabcentral/fileexchange/42641-sigmoid-logistic-curve-fit
  //  warning off
  //
  // Arguments    : const double x[100]
  //                const double initial_params[4]
  //                double param[4]
  // Return Type  : void
  //
  static void sigm_fit(const double x[100], const double initial_params[4],
                       double param[4])
  {
    ::coder::array<double, 2U> J;
    ::coder::array<double, 2U> b_J;
    ::coder::array<double, 2U> b_y;
    ::coder::array<double, 2U> r;
    double rplus_data[102];
    double step_data[102];
    double b_yfit[100];
    double r_data[100];
    double y[100];
    double yfit[100];
    double BETA[2];
    double Sd_data_idx_0;
    double d;
    double lambda;
    double sse;
    int a__2;
    int partialTrueCount;
    int trueCount;
    signed char b_tmp_data[100];
    signed char tmp_data[100];
    boolean_T b_nans[100];
    boolean_T nans[100];
    boolean_T breakOut;
    boolean_T exitg1;

    // if exist('fixed_params','var')
    // end
    // if exist('initial_params','var')
    // end
    // if exist('plot_flag','var')
    // end
    // p(1)=min; p(2)=max-min; p(3)=x50; p(4)=slope como em Y=Bottom + (Top-Bottom)/(1+10^((LogEC50-X)*HillSlope))
    // NLINFIT Nonlinear least-squares regression.
    //    BETA = NLINFIT(X,Y,MODELFUN,BETA0) estimates the coefficients of a
    //    nonlinear regression function, using least squares estimation.  Y is a
    //    vector of response (dependent variable) values.  Typically, X is a
    //    design matrix of predictor (independent variable) values, with one row
    //    for each value in Y and one column for each coefficient.  However, X
    //    may be any array that MODELFUN is prepared to accept.  MODELFUN is a
    //    function, specified using @, that accepts two arguments, a coefficient
    //    vector and the array X, and returns a vector of fitted Y values.  BETA0
    //    is a vector containing initial values for the coefficients.
    //
    //    [BETA,R,J,COVB,MSE] = NLINFIT(X,Y,MODELFUN,BETA0) returns the fitted
    //    coefficients BETA, the residuals R, the Jacobian J of MODELFUN, the
    //    estimated covariance matrix COVB for the fitted coefficients, and an
    //    estimate MSE of the variance of the error term.  You can use these
    //    outputs with NLPREDCI to produce confidence intervals for predictions,
    //    and with NLPARCI to produce confidence intervals for the estimated
    //    coefficients.  If you use a robust option (see below), you must use
    //    COVB and may need MSE as input to NLPREDCI or NLPARCI to insure that
    //    the confidence intervals take the robust fit properly into account.
    //
    //    [...] = NLINFIT(X,Y,MODELFUN,BETA0,OPTIONS) specifies control parameters
    //    for the algorithm used in NLINFIT.  OPTIONS is a structure that can be
    //    created by a call to STATSET.  Applicable STATSET parameters are:
    //
    //       'MaxIter'     - Maximum number of iterations allowed.  Defaults to 100.
    //       'TolFun'      - Termination tolerance on the residual sum of squares.
    //                       Defaults to 1e-8.
    //       'TolX'        - Termination tolerance on the estimated coefficients
    //                       BETA.  Defaults to 1e-8.
    //       'Display'     - Level of display output during estimation.  Choices
    //                       are 'off' (the default), 'iter', or 'final'.
    //       'DerivStep'   - Relative difference used in finite difference gradient
    //                       calculation.  May be a scalar, or the same size as
    //                       the parameter vector BETA.  Defaults to EPS^(1/3).
    //       'FunValCheck' - Check for invalid values, such as NaN or Inf, from
    //                       the objective function.  'off' or 'on' (default).
    //       'RobustWgtFun'- A weight function for robust fitting. Valid functions
    //                       are 'bisquare', 'andrews', 'cauchy', 'fair', 'huber',
    //                       'logistic', 'talwar', or 'welsch'. Default is '' (no
    //                       robust fitting). Can also be a function handle that
    //                       accepts a normalized residual as input and returns
    //                       the robust weights as output.
    //       'Robust'      - Robust will be removed in a future release. Use
    //                       RobustWgtFun to invoke the robust fitting option.
    //       'WgtFun'      - WgtFun will be removed in the future release. Use
    //                       RobustWgtFun instead.
    //       'Tune'        - The tuning constant used in robust fitting to normalize the
    //                       residuals before applying the weight function.  A positive
    //                       scalar.  The default value depends upon the weight function.
    //                       This parameter is required if the weight function is
    //                       specified as a function handle.
    //
    //    [BETA,R,J,COVB,MSE] = NLINFIT(X,Y,MODELFUN,BETA0,OPTIONS,...,'Weights',W)
    //    nlinfit can accept an optional parameter name/value pair that specifies
    //    the observation weights:
    //
    //      'Weights'        A vector of real positive weights the same size as Y,
    //                       each element of which specifies an observation weight.
    //                       Reducing the weight of an observation reduces the
    //                       influence of that observation on the fitted model.
    //                       This can also be specified as a function handle that
    //                       accepts a vector of predicted response values and
    //                       returns a vector of real positive weights as output.
    //                       Default is no weights.
    //
    //     OPTIONS.RobustWgtFun must be [] when using observation weights. R and J
    //     are weighted residuals and a weighted model function Jacobian respectively.
    //     When J has full column rank, outputs MSE and R are related by:
    //                     MSE = (R'*R)/(n-p)
    //     where (n-p) = observations-parameters and COVB is related to J and MSE
    //     by:
    //                    COVB = inv(J'*J) * MSE.
    //
    //    [BETA,R,J,COVB,MSE,ERRORMODELINFO] = NLINFIT(X,Y,MODELFUN,BETA0,OPTIONS,...
    //                                             'ErrorModel',val1,'ErrorParameters',val2)
    //     nlinfit can also accept parameter name/value pairs that specify the error
    //     model and an initial estimate of error parameters to be used by nlinfit.
    //     These parameter name/value pairs are described below.
    //
    //      'ErrorModel'     A string specifying the form of the error term.
    //                       Default is 'constant'. Each model defines the error
    //                       using a standard zero mean and unit variance variable e
    //                       with independent components, model function value f,
    //                       and one or two parameters a and b. The Choices for
    //                       val1 are:
    //
    //                       'constant' (default)         y = f + a*e
    //                       'proportional'               y = f + b*f*e
    //                       'combined'                   y = f + (a+b*abs(f))*e
    //
    //                       If not specified, a 'constant' error model will be
    //                       used. The only allowed 'ErrorModel' when using 'Weights'
    //                       is 'constant'. OPTIONS.RobustWgtFun must be [] when
    //                       using error models other than 'constant'.
    //
    //    'ErrorParameters'  A numeric array containing initial estimates of the
    //                       error model parameters of the chosen 'ErrorModel'.
    //                       Specify val2 as:
    //
    //                       a       (default 1)       for 'constant'
    //                       b       (default 1)       for 'proportional'
    //                       [a b]   (default [1,1])   for 'combined'
    //
    //                       For example, if 'ErrorModel' is 'combined', one could
    //                       use 'ErrorParameters' as [1,2]. If not specified, the
    //                       default values mentioned in brackets above will be used
    //                       as initial estimates.
    //
    //    The output ERRORMODELINFO is a structure with the following fields:
    //
    //                       ErrorModel   Chosen error model (default = 'constant')
    //                  ErrorParameters   Estimated error parameters
    //                    ErrorVariance   A function handle that accepts a n by p
    //                                    matrix X and computes a n by 1 vector of
    //                                    error variances using the specified error
    //                                    model.
    //                              MSE   Mean squared error.
    //                   ScheffeSimPred   Scheffe parameter for a simultaneous
    //                                    prediction interval when using this error
    //                                    model.
    //                   WeightFunction   True if a custom weight function was used
    //                                    previously in nlinfit.
    //                     FixedWeights   True if fixed weights were used previously
    //                                    in nlinfit.
    //             RobustWeightFunction   True if a robust fitting was used previously
    //                                    in nlinfit.
    //
    //    When 'ErrorModel' is 'combined' or 'proportional', R and J can no
    //    longer be interpreted as model fit residuals and model function
    //    Jacobian respectively. When J has full column rank, outputs MSE and R
    //    are related by:
    //                     MSE = (R'*R)/(n-p) where (n-p) = observations-parameters
    //    and COVB is related to J and MSE by:
    //                    COVB = inv(J'*J) * MSE
    //
    //    NLINFIT treats NaNs in Y or MODELFUN(BETA0,X) as missing data, and
    //    ignores the corresponding observations.
    //
    //    Examples:
    //
    //       MODELFUN can be an anonymous function:
    //          load reaction;
    //          fun = @(beta,x)(beta(1)*x(:,2) - x(:,3)/beta(5)) ./ ...
    //                         (1+beta(2)*x(:,1)+beta(3)*x(:,2)+beta(4)*x(:,3));
    //          beta = nlinfit(reactants,rate,fun,beta);
    //
    //       MODELFUN can be a function on the path specified using @:
    //          load reaction;
    //          beta = nlinfit(reactants,rate,@hougen,beta);
    //
    //       For an example of weighted fitting, see the example "Weighted
    //       Nonlinear Regression".
    //
    //    See also NLPARCI, NLPREDCI, NLMEFIT, NLINTOOL, STATSET.
    //    References:
    //       [1] Seber, G.A.F, and Wild, C.J. (1989) Nonlinear Regression, Wiley.
    //    NLINFIT can be used to make a weighted fit with known weights:
    //
    //       load reaction;
    //       w = [8 2 1 6 12 9 12 10 10 12 2 10 8]'; % some example known weights
    //       ratew = sqrt(w).*rate;
    //       mymodelw = @(beta,X) sqrt(w).*mymodel(beta,X);
    //
    //       [betaw,residw,Jw] = nlinfit(reactants,ratew,mymodelw,beta);
    //       betaciw = nlparci(betaw,residw,Jw);
    //       [ratefitw, deltafitw] = nlpredci(@mymodel,reactants,betaw,residw,Jw);
    //       rmse = norm(residw) / (length(w)-length(rate))
    //
    //    Predict at the observed x values.  However, the prediction band
    //    assumes a weight (measurement precision) of 1 at these points.
    //
    //       [ratepredw, deltapredw] = ...
    //             nlpredci(@mymodel,reactants,betaw,residw,Jw,[],[],'observation');
    //    Copyright 1993-2021 The MathWorks, Inc.
    //  Parse input arguments
    //  Check sizes of the model function's outputs while initializing the fitted
    //  values, residuals, and SSE at the given starting coefficient values.
    // try
    //  catch ME
    //      if isa(model, 'inline')
    //          m = message('stats:nlinfit:ModelInlineError');
    //          throw(addCause(MException(m.Identifier,'%s',getString(m)),ME));
    //      elseif strcmp('MATLAB:UndefinedFunction', ME.identifier) ...
    //              && ~isempty(strfind(ME.message, func2str(model)))
    //          error(message('stats:nlinfit:ModelFunctionNotFound', func2str( model )));
    //      else
    //          m = message('stats:nlinfit:ModelFunctionError',func2str(model));
    //          throw(addCause(MException(m.Identifier,'%s',getString(m)),ME));
    //      end
    //  end
    //  Check weights
    //  Find NaNs in either the responses or in the fitted values at the starting
    //  point.  Since X is allowed to be anything, we can't just check for rows
    //  with NaNs, so checking yhat is the appropriate thing.  Those positions in
    //  the fit will be ignored as missing values.  NaNs that show up anywhere
    //  else during iteration will be treated as bad values.
    //  a col vector
    //  After removing NaNs in either the responses or in the fitted values at
    //  the starting point, if n = 0 then stop execution.
    //  Set the level of display
    //  display format for non-robust fit
    //  Known weights
    //  Cap the weights at max weight
    BETA[0] = initial_params[2];
    BETA[1] = initial_params[3];

    //  Levenberg-Marquardt algorithm for nonlinear regression
    //  End of fillErrorModelInfo.
    // ----------------------------------------------------------------------
    //  Set up convergence tolerances from options.
    //  Set initial weight for LM algorithm.
    lambda = 0.01;

    //  Set the iteration step
    //  treatment for nans
    //  a col vector
    trueCount = 0;
    partialTrueCount = 0;
    Sd_data_idx_0 = initial_params[2];
    sse = initial_params[3];
    for (int k{0}; k < 100; k++) {
      d = 100.0 / (rt_powd_snf(10.0, (Sd_data_idx_0 - x[k]) * sse) + 1.0);
      yfit[k] = d;
      nans[k] = std::isnan(d);
      b_yfit[k] = d;
      d = static_cast<double>(k) - d;
      y[k] = d;
      breakOut = std::isnan(d);
      b_nans[k] = breakOut;
      if (!breakOut) {
        trueCount++;
        tmp_data[partialTrueCount] = static_cast<signed char>(k);
        partialTrueCount++;
      }
    }

    sse = 0.0;
    for (int k{0}; k < trueCount; k++) {
      Sd_data_idx_0 = y[tmp_data[k]];
      r_data[k] = Sd_data_idx_0;
      sse += Sd_data_idx_0 * Sd_data_idx_0;
    }

    a__2 = 0;
    breakOut = false;
    exitg1 = false;
    while ((!exitg1) && (a__2 < 200)) {
      double delta[2];
      double betaold_idx_0;
      double betaold_idx_1;
      double sseold;
      int v_size[2];
      int b_trueCount;
      int i;
      int loop_ub;
      int trueCount_idx_0_tmp;
      signed char input_sizes_idx_0_tmp;
      a__2++;
      betaold_idx_0 = BETA[0];
      betaold_idx_1 = BETA[1];
      sseold = sse;

      //  Compute a finite difference approximation to the Jacobian
      //  function madsigma
      //  ---------------------- Jacobian
      b_trueCount = 0;
      partialTrueCount = 0;
      for (i = 0; i < 100; i++) {
        if (!b_nans[i]) {
          b_trueCount++;
          b_tmp_data[partialTrueCount] = static_cast<signed char>(i);
          partialTrueCount++;
        }
      }

      for (int k{0}; k < b_trueCount; k++) {
        y[k] = b_yfit[b_tmp_data[k]];
      }

      // STATJACOBIAN Estimate the Jacobian of a function
      //  J is a matrix with one row per observation and one column per model
      //  parameter. J(i,j) is an estimate of the derivative of the i'th
      //  observation with respect to the j'th parameter.
      //  For performance reasons, very little error checking is done on the input
      //  arguments. This function makes the following assumptions about inputs:
      //
      //  * func is the model function and is a valid function handle that accepts
      //    a single input argument of the same size as theta.
      //  * theta is vector or matrix of parameter values. If a matrix, each row
      //    represents a different group or observation (see "Grouping Note" below)
      //    and each column represents a different model parameter.
      //  * DerivStep (optional) controls the finite differencing step size. It may
      //    be empty, scalar, or a vector of positive numbers with the number of
      //    elements equal to the number model parameters.
      //  * y0 (optional) is the model function evaluated at theta. A value of []
      //    is equivalent to omitting the argument and results in the model being
      //    evaluated one additional time.
      //  * rowIdx (optional) is a vector indicating how to map rows of theta to
      //    rows of y0 (see "Grouping Note" below). The argument can be omitted or
      //    [] if there are no groups; otherwise, it is a vector of the same size
      //    as y0, with rowIdx(i) indicating the row of theta that is used by func
      //    to calculate y0(i). For observation-specific designs, rowIdx should be
      //    1:N, where N is the number of observations.
      // %% Grouping Note
      //  For the purposes of NLMEFIT and NLMEFITSA, which do estimates on groups
      //  of data, this function is vectorized to operate simultaneously on a
      //  matrix of theta values. The rows in theta either correspond to parameter
      //  values for a specific group or for parameter values for specific
      //  observations. Functions having no notion of groups (such as NLINFIT) will
      //  pass in a vector for theta and should omit the groups input argument.
      //  Note that NLMEFITSA only supports group-specific design matrices. See the
      //  following examples:
      //
      //  Example 1: NLINFIT
      //    NLINFIT is used to estimate the parameters b(1) and b(2) for the model
      //    @(b,T) b(1)*sin(b(2)*T), given data at T=1:5. NLINFIT needs the
      //    Jacobian of the model function with respect to b(1) and b(2) at each T.
      //    To do this, it constructs a new function handle that is only a function
      //    of b and that "burns-in" the value of T (e.g. model2 = @(b) model1(b,T)).
      //    It then calls STATJACOBIAN with the new function handle to obtain a
      //    matrix J, where J(i,j) is an estimate of the derivative of the model
      //    with respect to the j'th parameter evaluated at T(i) and b.
      //
      //  Example 2: NLMEFIT or NLMEFITSA with group-specific parameters
      //    NLMEFIT requires the Jacobian of the model function with respect to two
      //    parameters evaluated at group-specific values. (Group-specific
      //    parameters can arise, for example, from using the default FEConstDesign
      //    and REConstDesign options.) NLMEFIT calls STATJACOBIAN passing in a
      //    matrix of parameter values theta, with one row per group, where
      //    theta(i,j) represents a parameter value for i'th group and j'th
      //    parameter. STATJACOBIAN returns a matrix J, where J(i,j) is an estimate
      //    of the derivative of the model with respect to the j'th parameter,
      //    evaluated for observation i with parameter values theta(rowIdx(i),:),
      //    which are the parameter values for the observation's group.
      //
      //  Example 3: NLMEFIT with observation-specific parameters
      //    NLMEFIT requires the Jacobian of the model function with respect to two
      //    parameters evaluated at observation-specific values. (Observation-
      //    specific parameters can arise, for example, from using the FEObsDesign
      //    or REObsDesign options.) NLMEFIT calls STATJACOBIAN passing in a matrix
      //    of parameter values theta, with one row per observation, where
      //    theta(i,j) represents a parameter value for the i'th observation and
      //    j'th parameter. In this case, rowIdx is 1:N, where N is the number of
      //    observations. STATJACOBIAN returns a matrix J, where J(i,j) is an
      //    estimate of the derivative of the model with respect to the j'th
      //    parameter, evaluated for observation i with parameter values
      //    theta(i,:), which are the parameter values for the observation.
      //    Copyright 2020 The MathWorks, Inc.
      //  Use the appropriate class for variables.
      //  Handle optional arguments, starting with y0 since it will be needed to
      //  determine the appropriate size for a default groups.
      if (b_trueCount == 0) {
        Sd_data_idx_0 = BETA[0];
        sse = BETA[1];
        for (int k{0}; k < 100; k++) {
          y[k] = 100.0 / (rt_powd_snf(10.0, (Sd_data_idx_0 - x[k]) * sse) + 1.0);
        }

        b_trueCount = coder::internal::nullAssignment(y, b_nans);
      }

      //  When there is only one group, ensure that theta is a row vector so
      //  that vectoriation works properly. Also ensure that the underlying
      //  function is called with an input with the original size of theta.
      //  All observations belong to a single group; scalar expansion allows us
      //  to vectorize using a scalar index.
      delta[0] = 0.0;
      delta[1] = 0.0;
      J.set_size(b_trueCount, 2);
      loop_ub = b_trueCount << 1;
      for (int k{0}; k < loop_ub; k++) {
        J[k] = 0.0;
      }

      for (i = 0; i < 2; i++) {
        //  Calculate delta(:,i), but remember to set it back to 0 at the end of the loop.
        Sd_data_idx_0 = 6.0554544523933429E-6 * BETA[i];
        delta[i] = Sd_data_idx_0;
        if (Sd_data_idx_0 == 0.0) {
          double y_data[2];

          //  Use the norm as the "scale", or 1 if the norm is 0.
          for (int k{0}; k < 2; k++) {
            y_data[k] = rt_powd_snf(BETA[k], 2.0);
          }

          Sd_data_idx_0 = y_data[0] + y_data[1];
          Sd_data_idx_0 = std::sqrt(Sd_data_idx_0);
          delta[i] = 6.0554544523933429E-6 * (Sd_data_idx_0 + static_cast<double>
            (Sd_data_idx_0 == 0.0));
        }

        Sd_data_idx_0 = BETA[0] + delta[0];
        sse = BETA[1] + delta[1];

        // yplus = func(thetaNew);
        for (int k{0}; k < 100; k++) {
          b_yfit[k] = rt_powd_snf(10.0, (Sd_data_idx_0 - x[k]) * sse);
        }

        if (b_trueCount == 100) {
          loop_ub = J.size(0);
          for (int k{0}; k < loop_ub; k++) {
            J[k + J.size(0) * i] = (100.0 / (b_yfit[k] + 1.0) - y[k]) / delta[i];
          }
        } else {
          binary_expand_op(J, i, b_yfit, y, b_trueCount, delta);
        }

        delta[i] = 0.0;
      }

      b_trueCount = 0;
      for (i = 0; i < 100; i++) {
        if (!b_nans[i]) {
          b_trueCount++;
        }
      }

      if (b_trueCount == J.size(0)) {
        r.set_size(b_trueCount, 2);
        for (int k{0}; k < 2; k++) {
          for (partialTrueCount = 0; partialTrueCount < b_trueCount;
               partialTrueCount++) {
            r[partialTrueCount + r.size(0) * k] = J[partialTrueCount + J.size(0)
              * k];
          }
        }

        J.set_size(r.size(0), 2);
        loop_ub = r.size(0) << 1;
        for (int k{0}; k < loop_ub; k++) {
          J[k] = r[k];
        }
      } else {
        binary_expand_op_1(J, b_trueCount);
      }

      //  Levenberg-Marquardt step: inv(J'*J+lambda*D)*J'*r
      loop_ub = J.size(0) << 1;
      b_y.set_size(J.size(0), 2);
      for (int k{0}; k < loop_ub; k++) {
        b_y[k] = std::abs(J[k]);
      }

      r.set_size(b_y.size(0), 2);
      for (int k{0}; k < loop_ub; k++) {
        Sd_data_idx_0 = b_y[k];
        r[k] = rt_powd_snf(Sd_data_idx_0, 2.0);
      }

      coder::sum(r, delta, v_size);
      delta[0] = std::sqrt(lambda * delta[0]);
      delta[1] = std::sqrt(lambda * delta[1]);
      if (J.size(0) != 0) {
        input_sizes_idx_0_tmp = static_cast<signed char>(J.size(0));
      } else {
        input_sizes_idx_0_tmp = 0;
      }

      i = trueCount + 2;
      if (trueCount - 1 >= 0) {
        std::copy(&r_data[0], &r_data[trueCount], &rplus_data[0]);
      }

      rplus_data[trueCount] = 0.0;
      rplus_data[trueCount + 1] = 0.0;
      b_trueCount = trueCount + 2;
      std::copy(&rplus_data[0], &rplus_data[i], &step_data[0]);
      trueCount_idx_0_tmp = input_sizes_idx_0_tmp;
      b_J.set_size(input_sizes_idx_0_tmp + 2, 2);
      for (int k{0}; k < 2; k++) {
        for (partialTrueCount = 0; partialTrueCount < trueCount_idx_0_tmp;
             partialTrueCount++) {
          b_J[partialTrueCount + b_J.size(0) * k] = J[partialTrueCount + J.size
            (0) * k];
        }
      }

      b_J[static_cast<int>(input_sizes_idx_0_tmp)] = delta[0];
      b_J[input_sizes_idx_0_tmp + 1] = 0.0;
      b_J[input_sizes_idx_0_tmp + b_J.size(0)] = 0.0;
      b_J[(input_sizes_idx_0_tmp + b_J.size(0)) + 1] = delta[1];
      coder::mldivide(b_J, step_data, b_trueCount);
      BETA[0] += step_data[0];
      BETA[1] += step_data[1];

      //  Evaluate the fitted values at the new coefficients and
      //  compute the residuals and the SSE.
      Sd_data_idx_0 = BETA[0];
      sse = BETA[1];
      for (int k{0}; k < 100; k++) {
        d = 100.0 / (rt_powd_snf(10.0, (Sd_data_idx_0 - x[k]) * sse) + 1.0);
        b_yfit[k] = d;
        y[k] = static_cast<double>(k) - d;
      }

      sse = 0.0;
      for (int k{0}; k < trueCount; k++) {
        Sd_data_idx_0 = y[tmp_data[k]];
        r_data[k] = Sd_data_idx_0;
        sse += Sd_data_idx_0 * Sd_data_idx_0;
      }

      //  If the LM step decreased the SSE, decrease lambda to downweight the
      //  steepest descent direction.  Prevent underflowing to zero after many
      //  successful steps; smaller than eps is effectively zero anyway.
      if (sse < sseold) {
        lambda = std::fmax(0.1 * lambda, 2.2204460492503131E-16);

        //  If the LM step increased the SSE, repeatedly increase lambda to
        //  upweight the steepest descent direction and decrease the step size
        //  until we get a step that does decrease SSE.
      } else {
        boolean_T exitg2;
        exitg2 = false;
        while ((!exitg2) && (sse > sseold)) {
          lambda *= 10.0;
          if (lambda > 1.0E+16) {
            breakOut = true;
            exitg2 = true;
          } else {
            r.set_size(J.size(0), 2);
            for (int k{0}; k < loop_ub; k++) {
              Sd_data_idx_0 = J[k];
              r[k] = rt_powd_snf(Sd_data_idx_0, 2.0);
            }

            coder::sum(r, delta, v_size);
            delta[0] = std::sqrt(lambda * delta[0]);
            delta[1] = std::sqrt(lambda * delta[1]);
            b_trueCount = i;
            std::copy(&rplus_data[0], &rplus_data[i], &step_data[0]);
            b_J.set_size(input_sizes_idx_0_tmp + 2, 2);
            for (int k{0}; k < 2; k++) {
              for (partialTrueCount = 0; partialTrueCount < trueCount_idx_0_tmp;
                   partialTrueCount++) {
                b_J[partialTrueCount + b_J.size(0) * k] = J[partialTrueCount +
                  J.size(0) * k];
              }
            }

            b_J[static_cast<int>(input_sizes_idx_0_tmp)] = delta[0];
            b_J[input_sizes_idx_0_tmp + 1] = 0.0;
            b_J[input_sizes_idx_0_tmp + b_J.size(0)] = 0.0;
            b_J[(input_sizes_idx_0_tmp + b_J.size(0)) + 1] = delta[1];
            coder::mldivide(b_J, step_data, b_trueCount);
            BETA[0] = betaold_idx_0 + step_data[0];
            BETA[1] = betaold_idx_1 + step_data[1];
            Sd_data_idx_0 = BETA[0];
            sse = BETA[1];
            for (int k{0}; k < 100; k++) {
              d = 100.0 / (rt_powd_snf(10.0, (Sd_data_idx_0 - x[k]) * sse) + 1.0);
              b_yfit[k] = d;
              y[k] = static_cast<double>(k) - d;
            }

            sse = 0.0;
            for (int k{0}; k < trueCount; k++) {
              Sd_data_idx_0 = y[tmp_data[k]];
              r_data[k] = Sd_data_idx_0;
              sse += Sd_data_idx_0 * Sd_data_idx_0;
            }
          }
        }
      }

      //  Check step size and change in SSE for convergence.
      if (b_trueCount == 0) {
        Sd_data_idx_0 = 0.0;
      } else {
        Sd_data_idx_0 = coder::internal::blas::xnrm2(b_trueCount, step_data);
      }

      if ((Sd_data_idx_0 < 1.0E-8 * (coder::b_norm(BETA) + 1.4901161193847656E-8))
          || (std::abs(sse - sseold) <= 1.0E-8 * sse) || breakOut) {
        exitg1 = true;
      }
    }

    //  If the Jacobian is ill-conditioned, then it's likely that two parameters
    //  are aliased and the estimates will be highly correlated.  Prediction at
    //  new x values not in the same column space is dubious.  NLPARCI will have
    //  trouble computing CIs because the inverse of J'*J is difficult to get
    //  accurately. NLPREDCI will have the same difficulty, and in addition,
    //  will in effect end up taking the difference of two very large, but nearly
    //  equal, variance and covariance terms, lose precision, and so the
    //  prediction bands will be erratic. It may also be that the Jacobian has
    //  one or more columns of zeros, meaning model is constant with respect to
    //  one or more parameters.  This may be because those parameters are not
    //  even in the expression in the model function, or they are multiplied by
    //  another param that is estimated at exactly zero (or something similar),
    //  or because some part of the model function is underflowing, making it a
    //  constant zero.
    //  Final J might have Inf/NaN values or may not be of the right size due to
    //  NaN removal in intermediate steps if FunValCheck was 'off'. If so, this
    //  is an error since no meaningful statistics can be computed from such a J.
    //  If FunValCheck is 'on', we know that the Jacobian must be good.
    //  Get QR factorization of J and mark if J is ill-conditioned.
    // illConditionedJ = false;
    // if n <= p
    //      warning(message('stats:nlinfit:Overparameterized'));
    //  elseif condest(R) > 1/sqrt(eps(class(beta)))
    //      illConditionedJ = true;
    //      if any(all(abs(J)<sqrt(eps(norm(J,1))),1),2) % one or more columns of zeros
    //          warning(message('stats:nlinfit:ModelConstantWRTParam'));
    //      else
    //          % no columns of zeros
    //          warning(message('stats:nlinfit:IllConditionedJacobian'));
    //      end
    //  end
    //  We have beta, J, fullr and we need [beta,r,J,Sigma,mse,errorModelInfo].
    //  Inspect nargout and compute required quantities.
    //  Return residuals and Jacobian that have missing values where needed.
    //  Get rankJ, pinvJTJ and VQ using either:
    //  (a) SVD - if J is ill-conditioned or
    //  (b)  QR - if J is well-conditioned. In this case, we can set VQ equal
    //            to Q from QR factorization of J to test the Scheffe parameter
    //            condition.
    //  Call isEstimable.
    //  Get singular values.
    //  Square Sd, since we want SVD of X'*X.
    //  Check for zero singular values.
    //  Output the pseudo inverse.
    //  Get left singular vectors for non-zero singular values.
    // [~,rankJ,pinvJTJ,~,~,VQ] = isEstimable(eye(numel(beta)),'DesignMatrix',J(~nans,:),'TolSVD',TolSVD);
    //  Get MSE using either residuals or from Robust fit.
    //  Can use residuals to get MSE.
    //  The denominator degrees of freedom is (n-rankJ).
    for (int k{0}; k < 100; k++) {
      r_data[k] = static_cast<double>(k) - yfit[k];
    }

    coder::internal::nullAssignment(r_data, nans);

    //  Get Sigma, the co-variance matrix of beta.
    //  Sigma may be singular when J is ill-conditioned.
    //  confidence interval of the parameters
    // stat.paramCI = nlparci_t(BETA,RESID,'Jacobian',J);
    // NLPARCI Confidence intervals for parameters in nonlinear regression.
    //  Remove missing values.
    //  Estimate covariance from J and residuals
    //  Approximation when a column is zero vector
    //  Calculate covariance matrix
    //  Calculate confidence interval
    //  confidence interval of the estimation
    // [stat.ypred,delta] = nlpredci_t(f,x,BETA,RESID,'Covar',COVB);
    //  Odds are, an input of length n should be a column vector.
    //  If required, remove missing values from J and check its size.
    //  If required, make sure Sigma has the right size.
    //  Compute the predicted values at the new X.
    //  Make sure ypred is a vector.
    //  Do we have an exponential error model?
    //  If so, as done in nlinfit, transform it to a constant error model.
    //  If errorModelInfo is not empty, make sure it is sensible.
    //  Check user supplied weights if required.
    //  Enforce that both weights and errorModelInfo cannot be supplied.
    //  Approximate the Jacobian at the new X.
    //  Try to use J instead of Sigma whenever possible.
    //  Use Sigma.
    //  Mark if J or Sigma is ill-conditioned.
    // if condest(Sigma) > 1/eps(class(beta))
    // end
    //  Get rankJ and mark estimable contrasts in rows of delta. If usingJ, also
    //  get pinvJTJ for later use in calculating Sigma.
    //  Set TolSVD for isEstimable.
    //  Sigma is given. Sigma = mse*pinv(J'*J). We will use Sigma as
    //  pinvNormalMatrix instead of Sigma/mse as this should not affect
    //  estimability or rank of J.
    //  Invert non-zero singular values.
    //  Check for zero singular values.
    //  Output the pseudo inverse.
    //  Get MSE. The degrees of freedom when J is full rank is v = n-p and n-rank(J) otherwise.
    //  Calculate Sigma if usingJ only if Sigma is currently empty.
    //  Compute varpred.
    //  Are we using an error model to compute errorVar?
    //  Compute delta, the CI half-widths.
    //  Pointwise CIs.
    //  Set non-estimable contrasts in delta to NaN.
    //  delta should have the same size as ypred.
    //  If we have an exponential error model, make predictions on the same
    //  scale as the original model function.
    //  plot(x,y,'ko') % observed data
    //  hold on
    //  plot(x,ypred,'k','LineWidth',2)
    //  plot(x,[lower,upper],'r--','LineWidth',1.5)
    param[0] = 0.0;
    param[1] = 100.0;
    param[2] = BETA[0];
    param[3] = BETA[1];
  }

  //
  // Arguments    : const double Data[10000]
  //                const double z1_data[]
  //                int z1_size[2]
  //                const double z2_data[]
  //                int z2_size[2]
  //                ::coder::array<double, 3U> &Spec
  //                double isFirstTime
  //                const double alpha_feature[8]
  //                const double estimated_params[8]
  //                double Out[2]
  //                double z12[64]
  //                double z22[64]
  //                ::coder::array<double, 3U> &Spec1
  // Return Type  : void
  //
  void CLI2Realtime(const double Data[10000], const double z1_data[], int
                    z1_size[2], const double z2_data[], int z2_size[2], ::coder::
                    array<double, 3U> &Spec, double isFirstTime, const double
                    alpha_feature[8], const double estimated_params[8], double
                    Out[2], double z12[64], double z22[64], ::coder::array<
                    double, 3U> &Spec1)
  {
    static double Filt[10000];
    static double Filt_Data[10000];
    static double P_EO[5008];
    ::coder::array<double, 3U> x_tmp;
    double x[840];
    double as;
    int i;
    int jp;
    int offset;
    int offsetzf;
    int xpageoffset;
    signed char input_sizes_idx_0_tmp;
    boolean_T result;
    if (!isInitialized_CLI2Realtime) {
      CLI2Realtime_initialize();
    }

    Out[0] = 0.0;
    Out[1] = 0.0;
    if (isFirstTime == 1.0) {
      z1_size[0] = 0;
      z2_size[0] = 0;
      Spec.set_size(0, 0, 1);
    }

    std::memset(&z12[0], 0, 64U * sizeof(double));
    for (int c{0}; c < 8; c++) {
      offset = c * 1250;
      for (int k{0}; k < 8; k++) {
        Filt[offset + k] = z1_data[k + z1_size[0] * c];
      }

      std::memset(&Filt[offset + 8], 0, 1242U * sizeof(double));
    }

    for (int c{0}; c < 8; c++) {
      offset = c * 1250 + 1242;
      for (int k{0}; k < 1250; k++) {
        jp = (offset + k) - 1242;
        if (1250 - k < 9) {
          i = 1249 - k;
        } else {
          i = 8;
        }

        for (int j{0}; j <= i; j++) {
          xpageoffset = jp + j;
          Filt[xpageoffset] += Data[jp] * dv2[j];
        }

        if (1249 - k < 8) {
          i = 1248 - k;
        } else {
          i = 7;
        }

        as = -Filt[jp];
        for (int j{0}; j <= i; j++) {
          xpageoffset = (jp + j) + 1;
          Filt[xpageoffset] += as * dv3[j + 1];
        }
      }

      offsetzf = (c << 3) - 1;
      for (int k{0}; k < 8; k++) {
        as = Data[offset + k];
        for (int j{0}; j <= k; j++) {
          xpageoffset = (offsetzf + j) + 1;
          z12[xpageoffset] += as * dv2[(j - k) + 8];
        }
      }

      for (int k{0}; k < 8; k++) {
        as = -Filt[offset + k];
        for (int j{0}; j <= k; j++) {
          xpageoffset = (offsetzf + j) + 1;
          z12[xpageoffset] += as * dv3[(j - k) + 8];
        }
      }
    }

    std::memset(&z22[0], 0, 64U * sizeof(double));
    for (int c{0}; c < 8; c++) {
      offset = c * 1250;
      for (int k{0}; k < 8; k++) {
        Filt_Data[offset + k] = z2_data[k + z2_size[0] * c];
      }

      std::memset(&Filt_Data[offset + 8], 0, 1242U * sizeof(double));
    }

    for (int c{0}; c < 8; c++) {
      offset = c * 1250 + 1242;
      for (int k{0}; k < 1250; k++) {
        jp = (offset + k) - 1242;
        if (1250 - k < 9) {
          i = 1249 - k;
        } else {
          i = 8;
        }

        for (int j{0}; j <= i; j++) {
          xpageoffset = jp + j;
          Filt_Data[xpageoffset] += Filt[jp] * dv[j];
        }

        if (1249 - k < 8) {
          i = 1248 - k;
        } else {
          i = 7;
        }

        as = -Filt_Data[jp];
        for (int j{0}; j <= i; j++) {
          xpageoffset = (jp + j) + 1;
          Filt_Data[xpageoffset] += as * dv1[j + 1];
        }
      }

      offsetzf = (c << 3) - 1;
      for (int k{0}; k < 8; k++) {
        as = Filt[offset + k];
        for (int j{0}; j <= k; j++) {
          xpageoffset = (offsetzf + j) + 1;
          z22[xpageoffset] += as * dv[(j - k) + 8];
        }
      }

      for (int k{0}; k < 8; k++) {
        as = -Filt_Data[offset + k];
        for (int j{0}; j <= k; j++) {
          xpageoffset = (offsetzf + j) + 1;
          z22[xpageoffset] += as * dv1[(j - k) + 8];
        }
      }
    }

    for (xpageoffset = 0; xpageoffset < 8; xpageoffset++) {
      double a__1[626];
      double b_dv[626];
      coder::pwelch(&Filt_Data[1250 * xpageoffset], b_dv, a__1);
      for (i = 0; i < 626; i++) {
        P_EO[xpageoffset + (i << 3)] = b_dv[i];
      }
    }

    for (int k{0}; k < 840; k++) {
      x[k] = 10.0 * std::log10(P_EO[k + 160]);
    }

    if (Spec.size(0) != 0) {
      result = false;
    } else if (Spec.size(1) != 0) {
      result = false;
    } else if (Spec.size(2) != 1) {
      result = false;
    } else {
      result = true;
    }

    if (!result) {
      input_sizes_idx_0_tmp = static_cast<signed char>(Spec.size(0));
    } else {
      input_sizes_idx_0_tmp = 0;
    }

    xpageoffset = input_sizes_idx_0_tmp;
    Spec1.set_size(input_sizes_idx_0_tmp + 1, 8, 105);
    for (i = 0; i < 105; i++) {
      for (jp = 0; jp < 8; jp++) {
        for (offsetzf = 0; offsetzf < xpageoffset; offsetzf++) {
          Spec1[(offsetzf + Spec1.size(0) * jp) + Spec1.size(0) * 8 * i] = Spec
            [(offsetzf + input_sizes_idx_0_tmp * jp) + input_sizes_idx_0_tmp * 8
            * i];
        }

        Spec1[(input_sizes_idx_0_tmp + Spec1.size(0) * jp) + Spec1.size(0) * 8 *
          i] = x[jp + (i << 3)];
      }
    }

    if (Spec1.size(0) == 5) {
      double Mov_Spec[840];
      double d;
      boolean_T b_data[5];
      x_tmp.set_size(5, 8, 105);
      for (i = 0; i < 4200; i++) {
        x_tmp[i] = Spec1[i];
      }

      for (offsetzf = 0; offsetzf < 840; offsetzf++) {
        xpageoffset = offsetzf * 5;
        d = (((Spec1[xpageoffset] + Spec1[xpageoffset + 1]) + Spec1[xpageoffset
              + 2]) + Spec1[xpageoffset + 3]) + Spec1[xpageoffset + 4];
        x[offsetzf] = d / 5.0;
        Mov_Spec[offsetzf] = d / 5.0;
      }

      for (int k{0}; k < 2; k++) {
        double x_data[105];
        d = alpha_feature[k + 2];
        as = alpha_feature[k + 4];
        if (d > as) {
          i = 0;
          jp = 0;
        } else {
          i = static_cast<int>(d) - 1;
          jp = static_cast<int>(as);
        }

        xpageoffset = jp - i;
        for (jp = 0; jp < xpageoffset; jp++) {
          x_data[jp] = x[(static_cast<int>(alpha_feature[k]) + ((i + jp) << 3))
            - 1];
        }

        if (xpageoffset == 0) {
          as = 0.0;
        } else {
          as = Mov_Spec[(static_cast<int>(alpha_feature[k]) + (i << 3)) - 1];
          for (offsetzf = 2; offsetzf <= xpageoffset; offsetzf++) {
            as += x_data[offsetzf - 1];
          }
        }

        d = estimated_params[k];
        Out[k] = d + (estimated_params[k + 2] - d) / (rt_powd_snf(10.0,
          (estimated_params[k + 4] - as / (static_cast<double>(xpageoffset - 1)
          + 1.0)) * estimated_params[k + 6]) + 1.0);
      }

      for (i = 0; i < 5; i++) {
        b_data[i] = false;
      }

      b_data[0] = true;
      xpageoffset = 0;
      for (int k{0}; k < 5; k++) {
        xpageoffset += b_data[k];
      }

      Spec1.set_size(5 - xpageoffset, 8, 105);
      for (offset = 0; offset < 840; offset++) {
        offsetzf = offset * 5;
        jp = offset * (5 - xpageoffset);
        for (int k{0}; k < 5; k++) {
          if (!b_data[k]) {
            Spec1[jp] = x_tmp[offsetzf + k];
            jp++;
          }
        }
      }
    }
  }

  //
  // Arguments    : void
  // Return Type  : void
  //
  void CLI2Realtime_initialize()
  {
    //omp_init_nest_lock(&ClI2Baseline_nestLockGlobal);
    isInitialized_CLI2Realtime = true;
  }

  //
  // Arguments    : void
  // Return Type  : void
  //
  void CLI2Realtime_terminate()
  {
    //omp_destroy_nest_lock(&ClI2Baseline_nestLockGlobal);
    isInitialized_CLI2Realtime = false;
  }

  //
  // Arguments    : const double EOdata[120000]
  //                const double ECdata[120000]
  //                double alpha_feature[8]
  //                double estimated_params[8]
  // Return Type  : void
  //
  void ClI2Baseline(const double EOdata[120000], const double ECdata[120000],
                    double alpha_feature[8], double estimated_params[8])
  {
    static const double dv8[358]{ 4.0, 1.0, 4.2, 1.0, 4.4, 1.0, 4.6, 1.0, 4.8,
      1.0, 5.0, 1.0, 5.2, 1.0, 5.4, 1.0, 5.6, 1.0, 5.8, 1.0, 6.0, 1.0, 6.2, 1.0,
      6.4, 1.0, 6.6, 1.0, 6.8000000000000007, 1.0, 13.200000000000001, 1.0, 13.4,
      1.0, 13.600000000000001, 1.0, 13.8, 1.0, 14.0, 1.0, 14.200000000000001,
      1.0, 14.4, 1.0, 14.600000000000001, 1.0, 14.8, 1.0, 15.0, 1.0,
      15.200000000000001, 1.0, 15.4, 1.0, 15.600000000000001, 1.0, 15.8, 1.0,
      16.0, 1.0, 16.200000000000003, 1.0, 16.4, 1.0, 16.6, 1.0, 16.8, 1.0, 17.0,
      1.0, 17.200000000000003, 1.0, 17.4, 1.0, 17.6, 1.0, 17.8, 1.0, 18.0, 1.0,
      18.200000000000003, 1.0, 18.4, 1.0, 18.6, 1.0, 18.8, 1.0, 19.0, 1.0,
      19.200000000000003, 1.0, 19.4, 1.0, 19.6, 1.0, 19.8, 1.0, 20.0, 1.0, 20.2,
      1.0, 20.400000000000002, 1.0, 20.6, 1.0, 20.8, 1.0, 21.0, 1.0, 21.2, 1.0,
      21.400000000000002, 1.0, 21.6, 1.0, 21.8, 1.0, 22.0, 1.0, 22.2, 1.0,
      22.400000000000002, 1.0, 22.6, 1.0, 22.8, 1.0, 23.0, 1.0,
      23.200000000000003, 1.0, 23.400000000000002, 1.0, 23.6, 1.0, 23.8, 1.0,
      24.0, 1.0, 24.200000000000003, 1.0, 24.400000000000002, 1.0, 24.6, 1.0,
      24.8, 1.0, 4.0, 1.0, 4.2, 1.0, 4.4, 1.0, 4.6, 1.0, 4.8, 1.0, 5.0, 1.0, 5.2,
      1.0, 5.4, 1.0, 5.6, 1.0, 5.8, 1.0, 6.0, 1.0, 6.2, 1.0, 6.4, 1.0, 6.6, 1.0,
      6.8000000000000007, 1.0, 7.0, 1.0, 7.2, 1.0, 7.4, 1.0, 7.6, 1.0,
      7.8000000000000007, 1.0, 8.0, 1.0, 8.2, 1.0, 8.4, 1.0, 8.6000000000000014,
      1.0, 8.8, 1.0, 9.0, 1.0, 9.2, 1.0, 9.4, 1.0, 9.6000000000000014, 1.0, 9.8,
      1.0, 10.0, 1.0, 10.2, 1.0, 10.4, 1.0, 10.600000000000001, 1.0, 10.8, 1.0,
      11.0, 1.0, 11.2, 1.0, 11.4, 1.0, 11.600000000000001, 1.0, 11.8, 1.0, 12.0,
      1.0, 12.200000000000001, 1.0, 12.4, 1.0, 12.6, 1.0, 12.8, 1.0, 13.0, 1.0,
      13.200000000000001, 1.0, 13.4, 1.0, 13.600000000000001, 1.0, 13.8, 1.0,
      14.0, 1.0, 14.200000000000001, 1.0, 14.4, 1.0, 14.600000000000001, 1.0,
      14.8, 1.0, 15.0, 1.0, 15.200000000000001, 1.0, 15.4, 1.0,
      15.600000000000001, 1.0, 15.8, 1.0, 16.0, 1.0, 16.200000000000003, 1.0,
      16.4, 1.0, 16.6, 1.0, 16.8, 1.0, 17.0, 1.0, 17.200000000000003, 1.0, 17.4,
      1.0, 17.6, 1.0, 17.8, 1.0, 18.0, 1.0, 18.200000000000003, 1.0, 18.4, 1.0,
      18.6, 1.0, 18.8, 1.0, 19.0, 1.0, 19.200000000000003, 1.0, 19.4, 1.0, 19.6,
      1.0, 19.8, 1.0, 20.0, 1.0, 20.2, 1.0, 20.400000000000002, 1.0, 20.6, 1.0,
      20.8, 1.0, 21.0, 1.0, 21.2, 1.0, 21.400000000000002, 1.0, 21.6, 1.0, 21.8,
      1.0, 22.0, 1.0, 22.2, 1.0, 22.400000000000002, 1.0, 22.6, 1.0, 22.8, 1.0,
      23.0, 1.0, 23.200000000000003, 1.0, 23.400000000000002, 1.0, 23.6, 1.0,
      23.8, 1.0, 24.0, 1.0, 24.200000000000003, 1.0, 24.400000000000002, 1.0,
      24.6, 1.0, 24.8, 1.0 };

    static const double b_x[105]{ 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6,
      5.8, 6.0, 6.2, 6.4, 6.6, 6.8000000000000007, 7.0, 7.2, 7.4, 7.6,
      7.8000000000000007, 8.0, 8.2, 8.4, 8.6000000000000014, 8.8, 9.0, 9.2, 9.4,
      9.6000000000000014, 9.8, 10.0, 10.2, 10.4, 10.600000000000001, 10.8, 11.0,
      11.2, 11.4, 11.600000000000001, 11.8, 12.0, 12.200000000000001, 12.4, 12.6,
      12.8, 13.0, 13.200000000000001, 13.4, 13.600000000000001, 13.8, 14.0,
      14.200000000000001, 14.4, 14.600000000000001, 14.8, 15.0,
      15.200000000000001, 15.4, 15.600000000000001, 15.8, 16.0,
      16.200000000000003, 16.4, 16.6, 16.8, 17.0, 17.200000000000003, 17.4, 17.6,
      17.8, 18.0, 18.200000000000003, 18.4, 18.6, 18.8, 19.0, 19.200000000000003,
      19.4, 19.6, 19.8, 20.0, 20.2, 20.400000000000002, 20.6, 20.8, 21.0, 21.2,
      21.400000000000002, 21.6, 21.8, 22.0, 22.2, 22.400000000000002, 22.6, 22.8,
      23.0, 23.200000000000003, 23.400000000000002, 23.6, 23.8, 24.0,
      24.200000000000003, 24.400000000000002, 24.6, 24.8 };

    static double EC1_data[120000];
    static double EO1_data[120000];
    static double b_dv[120000];
    static double Data_Avg_Spec_EO[92400];
    static double Spec_EC[92400];
    static double Spec_EO[92400];
    static double P_EO[5008];
    static double x[840];
    ::coder::array<double, 3U> b_Spec_EO;
    double Avg_Spec_EC[840];
    double Avg_Spec_EO[840];
    double y[840];
    double b_dv1[626];
    double b_dv2[626];
    double fit_line[105];
    double x_data[31];
    double d_y[8];
    double end_alpha_idx[8];
    double start_alpha_idx[8];
    double stat_power[8];
    double dv5[4];
    double b_y;
    double mdl_idx_1;
    int iidx[8];
    int b_y_size[2];
    int y_size[2];
    int b_i;
    int c_i;
    int i;
    int i1;
    int i2;
    int l;
    signed char peak_ind[8];
    if (!isInitialized_CLI2Realtime) {
      CLI2Realtime_initialize();
    }

    coder::filter(dv2, dv3, EOdata, b_dv);
    coder::filter(dv, dv1, b_dv, EO1_data);
    coder::filter(dv2, dv3, ECdata, b_dv);
    coder::filter(dv, dv1, b_dv, EC1_data);
    std::memset(&Spec_EO[0], 0, 92400U * sizeof(double));
    std::memset(&Spec_EC[0], 0, 92400U * sizeof(double));
    std::memset(&alpha_feature[0], 0, 8U * sizeof(double));

    // PSD features calculation
    l = 0;
    for (i = 0; i < 110; i++) {
      b_i = i * 125;

      // clear P_EO f_EO;
      for (int k{0}; k < 8; k++) {
        coder::pwelch(&EO1_data[b_i + 15000 * k], b_dv1, b_dv2);
        for (c_i = 0; c_i < 626; c_i++) {
          P_EO[k + (c_i << 3)] = b_dv1[c_i];
        }
      }

      for (int k{0}; k < 840; k++) {
        x[k] = 10.0 * std::log10(P_EO[k + 160]);
      }

      for (c_i = 0; c_i < 105; c_i++) {
        for (i1 = 0; i1 < 8; i1++) {
          Spec_EO[(l + 110 * i1) + 880 * c_i] = x[i1 + (c_i << 3)];
        }
      }

      l++;
    }

    l = 0;
    for (i = 0; i < 110; i++) {
      b_i = i * 125;

      // clear P_EC f_EC;
      for (int k{0}; k < 8; k++) {
        coder::pwelch(&EC1_data[b_i + 15000 * k], b_dv1, b_dv2);
        for (c_i = 0; c_i < 626; c_i++) {
          P_EO[k + (c_i << 3)] = b_dv1[c_i];
        }
      }

      for (int k{0}; k < 840; k++) {
        x[k] = 10.0 * std::log10(P_EO[k + 160]);
      }

      for (c_i = 0; c_i < 105; c_i++) {
        for (i1 = 0; i1 < 8; i1++) {
          Spec_EC[(l + 110 * i1) + 880 * c_i] = x[i1 + (c_i << 3)];
        }
      }

      l++;
    }

    // save('Spec_EO_EC.mat',"Spec_EO","Spec_EC");
    coder::movmean(Spec_EO, Data_Avg_Spec_EO);
    coder::movmean(Spec_EC, Spec_EO);
    for (b_i = 0; b_i < 840; b_i++) {
      l = b_i * 110;
      b_y = Data_Avg_Spec_EO[l];
      mdl_idx_1 = Spec_EO[l];
      for (int k{0}; k < 109; k++) {
        c_i = (l + k) + 1;
        b_y += Data_Avg_Spec_EO[c_i];
        mdl_idx_1 += Spec_EO[c_i];
      }

      x[b_i] = b_y / 110.0;
      Avg_Spec_EO[b_i] = b_y / 110.0;
      y[b_i] = mdl_idx_1 / 110.0;
      Avg_Spec_EC[b_i] = mdl_idx_1 / 110.0;
    }

    for (int k{0}; k < 8; k++) {
      double e_y[179];
      double y_data[76];
      double b_y_data[31];
      double c_y[2];
      double f_y;
      double mdl_idx_0;
      signed char i3;

      //  Least-squares fit of data to y = c(1)*x + c(2)
      //  Here, c(1) = m; c(2) = b;
      //  Inputs:
      //  x,y = Vectors of independent and dependent variables
      //  Outputs:
      //  c = Coefficients of the given equation
      //  Least squares algorithm implementation
      //  x and y are column vectors
      //  m-by-n matrix of the system
      for (c_i = 0; c_i < 15; c_i++) {
        e_y[c_i] = y[k + (c_i << 3)];
      }

      for (c_i = 0; c_i < 59; c_i++) {
        e_y[c_i + 15] = y[k + ((c_i + 46) << 3)];
      }

      for (c_i = 0; c_i < 105; c_i++) {
        e_y[c_i + 74] = x[k + (c_i << 3)];
      }

      for (c_i = 0; c_i < 2; c_i++) {
        b_y = 0.0;
        for (i1 = 0; i1 < 179; i1++) {
          b_y += dv8[c_i + (i1 << 1)] * e_y[i1];
        }

        c_y[c_i] = b_y;
      }

      mdl_idx_1 = (c_y[1] - c_y[0] * 0.056467318031258831) / 25.747698863163521;
      mdl_idx_0 = (c_y[0] - mdl_idx_1 * 2714.0) / 48063.200000000012;

      //  Solving normal equations
      for (i = 0; i < 105; i++) {
        b_y = mdl_idx_0 * b_x[i] + mdl_idx_1;
        c_i = k + (i << 3);
        b_y = (Avg_Spec_EC[c_i] - b_y) - (Avg_Spec_EO[c_i] - b_y);
        fit_line[i] = b_y;
      }

      if (!std::isnan(fit_line[15])) {
        b_i = 1;
      } else {
        boolean_T exitg1;
        b_i = 0;
        l = 2;
        exitg1 = false;
        while ((!exitg1) && (l < 32)) {
          if (!std::isnan(fit_line[l + 14])) {
            b_i = l;
            exitg1 = true;
          } else {
            l++;
          }
        }
      }

      if (b_i == 0) {
        b_i = 1;
      } else {
        mdl_idx_1 = fit_line[b_i + 14];
        c_i = b_i + 1;
        for (l = c_i; l < 32; l++) {
          b_y = fit_line[l + 14];
          if (mdl_idx_1 < b_y) {
            mdl_idx_1 = b_y;
            b_i = l;
          }
        }
      }

      peak_ind[k] = static_cast<signed char>(b_i + 15);
      i = b_i - 1;
      std::copy(&fit_line[15], &fit_line[i + 16], &x_data[0]);
      i3 = peak_ind[k];
      c_i = i3 - 16;
      y_size[0] = 1;
      y_size[1] = i3 - 15;
      for (l = 0; l <= c_i; l++) {
        b_y_data[l] = std::abs(x_data[l]);
      }

      coder::internal::minimum(b_y_data, y_size, b_i);
      start_alpha_idx[k] = static_cast<double>(b_i) + 15.0;
      i = 47 - peak_ind[k];
      for (c_i = 0; c_i < i; c_i++) {
        x_data[c_i] = fit_line[(peak_ind[k] + c_i) - 1];
      }

      c_i = 46 - peak_ind[k];
      y_size[0] = 1;
      y_size[1] = i;
      for (l = 0; l <= c_i; l++) {
        b_y_data[l] = std::abs(x_data[l]);
      }

      coder::internal::minimum(b_y_data, y_size, b_i);
      b_y = (static_cast<double>(b_i) + static_cast<double>(peak_ind[k])) - 1.0;
      end_alpha_idx[k] = b_y;
      mdl_idx_1 = start_alpha_idx[k];
      if (mdl_idx_1 > b_y) {
        c_i = 0;
        i1 = 0;
        i2 = 0;
      } else {
        c_i = static_cast<int>(mdl_idx_1) - 1;
        i1 = static_cast<int>(b_y);
        i2 = static_cast<int>(mdl_idx_1) - 1;
      }

      b_y_size[0] = 1;
      i = i1 - c_i;
      b_y_size[1] = i;
      for (i1 = 0; i1 < i; i1++) {
        y_data[i1] = y[k + ((c_i + i1) << 3)];
      }

      mdl_idx_1 = coder::b_std(y_data, b_y_size);
      b_y_size[0] = 1;
      b_y_size[1] = i;
      for (i1 = 0; i1 < i; i1++) {
        y_data[i1] = x[k + ((i2 + i1) << 3)];
      }

      mdl_idx_0 = coder::b_std(y_data, b_y_size);
      if (i == 0) {
        b_y = 0.0;
      } else {
        b_y = y[k + (c_i << 3)];
        for (l = 2; l <= i; l++) {
          b_y += y[k + (((c_i + l) - 1) << 3)];
        }
      }

      if (i == 0) {
        f_y = 0.0;
      } else {
        f_y = x[k + (i2 << 3)];
        for (l = 2; l <= i; l++) {
          f_y += x[k + (((i2 + l) - 1) << 3)];
        }
      }

      b_y = (b_y / static_cast<double>(i) - f_y / static_cast<double>(i)) / std::
        sqrt((mdl_idx_1 * mdl_idx_1 + mdl_idx_0 * mdl_idx_0) / static_cast<
             double>(i));
      stat_power[k] = b_y;
      d_y[k] = b_y;
    }

    coder::internal::sort(d_y, iidx);
    for (int k{0}; k < 8; k++) {
      c_i = iidx[k];
      if ((stat_power[c_i - 1] > 20.0) || (k + 1 < 3)) {
        alpha_feature[k] = c_i;
        alpha_feature[k + 2] = start_alpha_idx[c_i - 1];
        alpha_feature[k + 4] = peak_ind[c_i - 1];
        alpha_feature[k + 6] = end_alpha_idx[c_i - 1];
      }
    }

    dv5[0] = 0.0;
    dv5[1] = 100.0;
    dv5[3] = 0.5;
    for (int k{0}; k < 2; k++) {
      double dv6[220];
      double b_dv3[110];
      double b_dv4[110];
      b_y = alpha_feature[k + 2];
      mdl_idx_1 = alpha_feature[k + 4];
      if (b_y > mdl_idx_1) {
        c_i = 0;
        i1 = 0;
        i2 = 0;
      } else {
        c_i = static_cast<int>(b_y) - 1;
        i1 = static_cast<int>(mdl_idx_1);
        i2 = static_cast<int>(b_y) - 1;
      }

      i = i1 - c_i;
      b_Spec_EO.set_size(110, 1, i);
      for (i1 = 0; i1 < i; i1++) {
        for (b_i = 0; b_i < 110; b_i++) {
          b_Spec_EO[b_i + 110 * i1] = Spec_EO[(b_i + 110 * (static_cast<int>
            (alpha_feature[k]) - 1)) + 880 * (c_i + i1)];
        }
      }

      coder::mean(b_Spec_EO, b_dv3);
      b_Spec_EO.set_size(110, 1, i);
      for (c_i = 0; c_i < i; c_i++) {
        for (i1 = 0; i1 < 110; i1++) {
          b_Spec_EO[i1 + 110 * c_i] = Data_Avg_Spec_EO[(i1 + 110 * (static_cast<
            int>(alpha_feature[k]) - 1)) + 880 * (i2 + c_i)];
        }
      }

      coder::mean(b_Spec_EO, b_dv4);
      for (c_i = 0; c_i < 110; c_i++) {
        dv6[c_i] = b_dv3[c_i];
        dv6[c_i + 110] = b_dv4[c_i];
      }

      double prct_val[100];
      double dv7[4];
      coder::prctile(dv6, prct_val);
      dv5[2] = coder::median(prct_val);
      sigm_fit(prct_val, dv5, dv7);
      estimated_params[k] = dv7[0];
      estimated_params[k + 2] = dv7[1];
      estimated_params[k + 4] = dv7[2];
      estimated_params[k + 6] = dv7[3];
    }
  }
}

//
// File trailer for CLI2Realtime.cpp
//
// [EOF]
//
